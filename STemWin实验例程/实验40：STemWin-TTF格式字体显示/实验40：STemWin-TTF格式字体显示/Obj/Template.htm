<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\Template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\Template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Thu Aug 29 16:39:33 2019
<BR><P>
<H3>Maximum Stack Usage =       1752 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
cid_slot_load_glyph &rArr; cid_load_glyph &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2cf]">__user_initial_stackheap</a>
 <LI><a href="#[3ab]">Mem_Copy</a>
 <LI><a href="#[a43]">CPU_IntDis</a>
 <LI><a href="#[a44]">CPU_IntEn</a>
 <LI><a href="#[2fd]">CPU_SR_Save</a>
 <LI><a href="#[2fe]">CPU_SR_Restore</a>
 <LI><a href="#[a45]">CPU_WaitForInt</a>
 <LI><a href="#[a46]">CPU_WaitForExcept</a>
 <LI><a href="#[3e1]">CPU_CntLeadZeros</a>
 <LI><a href="#[3e5]">CPU_CntTrailZeros</a>
 <LI><a href="#[a47]">CPU_RevBits</a>
 <LI><a href="#[403]">OSStartHighRdy</a>
 <LI><a href="#[38]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[98f]">_Findy1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[98f]">_Findy1</a><BR>
 <LI><a href="#[991]">_Findx1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[991]">_Findx1</a><BR>
 <LI><a href="#[990]">_Findx0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[990]">_Findx0</a><BR>
 <LI><a href="#[95d]">WM__InvalidateRect</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[95d]">WM__InvalidateRect</a><BR>
 <LI><a href="#[947]">WM_InvalidateWindowAndDescsEx</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[947]">WM_InvalidateWindowAndDescsEx</a><BR>
 <LI><a href="#[942]">WM__InvalidateDrawAndDescs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[942]">WM__InvalidateDrawAndDescs</a><BR>
 <LI><a href="#[91e]">WM_DefaultProc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[920]">WM_SendToParent</a><BR>
 <LI><a href="#[927]">_DeleteAllChildren</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[922]">WM_DeleteWindow</a><BR>
 <LI><a href="#[963]">_PaintTransChildren</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[963]">_PaintTransChildren</a><BR>
 <LI><a href="#[98c]">_EnlargeBlocks</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[818]">_Alloc</a><BR>
 <LI><a href="#[4c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[70f]">psh_hint_align</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70f]">psh_hint_align</a><BR>
 <LI><a href="#[94e]">WM__UpdateChildPositions</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[94c]">WM_ResizeWindow</a><BR>
 <LI><a href="#[95f]">_MoveDescendents</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[95f]">_MoveDescendents</a><BR>
 <LI><a href="#[9a3]">_Screen2hWin</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9a3]">_Screen2hWin</a><BR>
 <LI><a href="#[53d]">af_loader_load_g</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53d]">af_loader_load_g</a><BR>
 <LI><a href="#[577]">cff_operator_seac</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[579]">cff_decoder_parse_charstrings</a><BR>
 <LI><a href="#[6c0]">pfr_glyph_load_rec</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c0]">pfr_glyph_load_rec</a><BR>
 <LI><a href="#[755]">Load_SBit_Image</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[755]">Load_SBit_Image</a><BR>
 <LI><a href="#[773]">load_truetype_glyph</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[773]">load_truetype_glyph</a><BR>
 <LI><a href="#[931]">_GetDialogItem</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[931]">_GetDialogItem</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[69]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11a]">BDF_Face_Done</a> from bdf.o(.text) referenced from bdf.o(.constdata)
 <LI><a href="#[119]">BDF_Face_Init</a> from bdf.o(.text) referenced from bdf.o(.constdata)
 <LI><a href="#[11d]">BDF_Glyph_Load</a> from bdf.o(.text) referenced from bdf.o(.constdata)
 <LI><a href="#[11e]">BDF_Size_Request</a> from bdf.o(.text) referenced from bdf.o(.constdata)
 <LI><a href="#[11f]">BDF_Size_Select</a> from bdf.o(.text) referenced from bdf.o(.constdata)
 <LI><a href="#[76]">BUTTON_DrawSkinFlex</a> from button_skinflex.o(i.BUTTON_DrawSkinFlex) referenced from main.o(.text)
 <LI><a href="#[34]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[77]">CHECKBOX_DrawSkinFlex</a> from checkbox_skinflex.o(i.CHECKBOX_DrawSkinFlex) referenced from main.o(.text)
 <LI><a href="#[26]">CHECKBOX__GetButtonSize</a> from checkbox.o(i.CHECKBOX__GetButtonSize) referenced 2 times from checkbox.o(.data)
 <LI><a href="#[45]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[72]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[73]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[74]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[75]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[78]">DROPDOWN_DrawSkinFlex</a> from dropdown_skinflex.o(i.DROPDOWN_DrawSkinFlex) referenced from main.o(.text)
 <LI><a href="#[37]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[62]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">EXTI1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">EXTI2_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">EXTI3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[270]">FNT_Face_Done</a> from winfnt.o(.text) referenced from winfnt.o(.constdata)
 <LI><a href="#[26f]">FNT_Face_Init</a> from winfnt.o(.text) referenced from winfnt.o(.constdata)
 <LI><a href="#[271]">FNT_Load_Glyph</a> from winfnt.o(.text) referenced from winfnt.o(.constdata)
 <LI><a href="#[272]">FNT_Size_Request</a> from winfnt.o(.text) referenced from winfnt.o(.constdata)
 <LI><a href="#[273]">FNT_Size_Select</a> from winfnt.o(.text) referenced from winfnt.o(.constdata)
 <LI><a href="#[e]">FRAMEWIN_DrawSkinFlex</a> from framewin_skinflex.o(i.FRAMEWIN_DrawSkinFlex) referenced 2 times from framewin_skin.o(.data)
 <LI><a href="#[e]">FRAMEWIN_DrawSkinFlex</a> from framewin_skinflex.o(i.FRAMEWIN_DrawSkinFlex) referenced from main.o(.text)
 <LI><a href="#[ef]">FRAMEWIN_OwnerDraw</a> from framewin_skinclassic.o(i.FRAMEWIN_OwnerDraw) referenced from framewin_skinclassic.o(i._Create)
 <LI><a href="#[27]">FRAMEWIN__GetBorderSize</a> from framewin.o(i.FRAMEWIN__GetBorderSize) referenced 2 times from framewin.o(.data)
 <LI><a href="#[6a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[98]">FTC_GNode_Compare</a> from ftcache.o(.text) referenced from ftcache.o(.text)
 <LI><a href="#[99]">FTC_SNode_Compare</a> from ftcache.o(.text) referenced from ftcache.o(.text)
 <LI><a href="#[27d]">GUIMONO_DispChar</a> from gui_charm.o(i.GUIMONO_DispChar) referenced from f6x8.o(.constdata)
 <LI><a href="#[27e]">GUIMONO_GetCharDistX</a> from gui_charm.o(i.GUIMONO_GetCharDistX) referenced from f6x8.o(.constdata)
 <LI><a href="#[27f]">GUIMONO_GetFontInfo</a> from gui_charm.o(i.GUIMONO_GetFontInfo) referenced from f6x8.o(.constdata)
 <LI><a href="#[280]">GUIMONO_IsInFont</a> from gui_charm.o(i.GUIMONO_IsInFont) referenced from f6x8.o(.constdata)
 <LI><a href="#[294]">GUIPROP_DispChar</a> from gui_charp.o(i.GUIPROP_DispChar) referenced 2 times from f08_1.o(.constdata)
 <LI><a href="#[21]">GUIPROP_EXT__ClearLine</a> from gui_encext.o(i.GUIPROP_EXT__ClearLine) referenced 2 times from gui_encext.o(.data)
 <LI><a href="#[295]">GUIPROP_GetCharDistX</a> from gui_charp.o(i.GUIPROP_GetCharDistX) referenced 2 times from f08_1.o(.constdata)
 <LI><a href="#[296]">GUIPROP_GetFontInfo</a> from gui_charp.o(i.GUIPROP_GetFontInfo) referenced 2 times from f08_1.o(.constdata)
 <LI><a href="#[297]">GUIPROP_IsInFont</a> from gui_charp.o(i.GUIPROP_IsInFont) referenced 2 times from f08_1.o(.constdata)
 <LI><a href="#[e6]">GUI_DrawGradientH</a> from gui_drawgradient.o(i.GUI_DrawGradientH) referenced from scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
 <LI><a href="#[e9]">GUI_DrawGradientV</a> from gui_drawgradient.o(i.GUI_DrawGradientV) referenced from scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
 <LI><a href="#[f7]">GUI_MEMDEV_Paint1Static</a> from guidev_staticdevices.o(i.GUI_MEMDEV_Paint1Static) referenced from wm.o(i._Paint1)
 <LI><a href="#[f3]">GUI_MEMDEV__WriteToActiveAlpha</a> from guidev_writetoactivealpha.o(i.GUI_MEMDEV__WriteToActiveAlpha) referenced from guidev_32.o(i._GetDevFunc)
 <LI><a href="#[f2]">GUI_MEMDEV__WriteToActiveOpaque</a> from guidev_writetoactiveopaque.o(i.GUI_MEMDEV__WriteToActiveOpaque) referenced from guidev_16.o(i._GetDevFunc)
 <LI><a href="#[2c9]">GUI_USAGE_BM_AddHLine</a> from guidev_usagebm.o(i.GUI_USAGE_BM_AddHLine) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[2c8]">GUI_USAGE_BM_AddPixel</a> from guidev_usagebm.o(i.GUI_USAGE_BM_AddPixel) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[2ca]">GUI_USAGE_BM_Clear</a> from guidev_usagebm.o(i.GUI_USAGE_BM_Clear) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[2cc]">GUI_USAGE_BM_GetNextDirty</a> from guidev_usagebm.o(i.GUI_USAGE_BM_GetNextDirty) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[2c]">GUI_X_ExecIdle</a> from gui_x_ucosiii.o(.text) referenced 2 times from gui_waitevent.o(.data)
 <LI><a href="#[29]">GUI__MixColors</a> from gui__alpha.o(i.GUI__MixColors) referenced 2 times from gui__alpha.o(.data)
 <LI><a href="#[2a]">GUI__MixColorsBulk</a> from gui__alpha.o(i.GUI__MixColorsBulk) referenced 2 times from gui__alpha.o(.data)
 <LI><a href="#[23a]">Get_Interface</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[242]">Get_Kerning</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[79]">HEADER_DrawSkinFlex</a> from header_skinflex.o(i.HEADER_DrawSkinFlex) referenced from main.o(.text)
 <LI><a href="#[32]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c3]">Horizontal_Sweep_Drop</a> from raster.o(.text) referenced from raster.o(.text)
 <LI><a href="#[c1]">Horizontal_Sweep_Init</a> from raster.o(.text) referenced from raster.o(.text)
 <LI><a href="#[c2]">Horizontal_Sweep_Span</a> from raster.o(.text) referenced from raster.o(.text)
 <LI><a href="#[c4]">Horizontal_Sweep_Step</a> from raster.o(.text) referenced from raster.o(.text)
 <LI><a href="#[5a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d9]">LCD_DrawHLine</a> from lcd.o(i.LCD_DrawHLine) referenced from gui_core.o(.constdata)
 <LI><a href="#[d9]">LCD_DrawHLine</a> from lcd.o(i.LCD_DrawHLine) referenced from gui_drawgradientrounded.o(i.GUI_DrawGradientRoundedV)
 <LI><a href="#[d9]">LCD_DrawHLine</a> from lcd.o(i.LCD_DrawHLine) referenced from gui_drawgradient.o(i.GUI_DrawGradientV)
 <LI><a href="#[274]">LCD_DrawPixel</a> from lcd.o(i.LCD_DrawPixel) referenced from gui_core.o(.constdata)
 <LI><a href="#[d8]">LCD_DrawVLine</a> from lcd.o(i.LCD_DrawVLine) referenced from gui_drawgradient.o(i.GUI_DrawGradientH)
 <LI><a href="#[6]">LCD_GetpPalConvTableBM</a> from lcd_color.o(i.LCD_GetpPalConvTableBM) referenced 2 times from gui_core.o(.data)
 <LI><a href="#[dd]">LCD_Index2Color_888</a> from guicc_888_index2color.o(i.LCD_Index2Color_888) referenced from gui__alpha.o(i.GUI__DoAlphaBlending)
 <LI><a href="#[da]">LCD_Index2Color_8888</a> from guicc_8888_index2color.o(i.LCD_Index2Color_8888) referenced from guicc_8888.o(.constdata)
 <LI><a href="#[da]">LCD_Index2Color_8888</a> from guicc_8888_index2color.o(i.LCD_Index2Color_8888) referenced from guidev_writetoactivealpha.o(i.GUI_MEMDEV__WriteToActiveAlpha)
 <LI><a href="#[da]">LCD_Index2Color_8888</a> from guicc_8888_index2color.o(i.LCD_Index2Color_8888) referenced from gui__alpha.o(i.GUI__DoAlphaBlending)
 <LI><a href="#[276]">LCD_Index2Color_M565</a> from guicc_m565.o(i.LCD_Index2Color_M565) referenced from guicc_m565.o(.constdata)
 <LI><a href="#[e0]">LCD_SetPixelAA4_NoTrans</a> from lcd_aa.o(i.LCD_SetPixelAA4_NoTrans) referenced from lcd_aa.o(i.LCD__GetPfSetPixel)
 <LI><a href="#[e1]">LCD_SetPixelAA4_Trans</a> from lcd_aa.o(i.LCD_SetPixelAA4_Trans) referenced from lcd_aa.o(i.LCD__GetPfSetPixel)
 <LI><a href="#[e2]">LCD_SetPixelAA8_NoTrans</a> from lcd_aa.o(i.LCD_SetPixelAA8_NoTrans) referenced from lcd_aa.o(i.LCD__GetPfSetPixel)
 <LI><a href="#[e3]">LCD_SetPixelAA8_Trans</a> from lcd_aa.o(i.LCD_SetPixelAA8_Trans) referenced from lcd_aa.o(i.LCD__GetPfSetPixel)
 <LI><a href="#[12d]">Load_Glyph</a> from cff.o(.text) referenced 2 times from cff.o(.constdata)
 <LI><a href="#[7a]">MENU_DrawSkinFlex</a> from menu_skinflex.o(i.MENU_DrawSkinFlex) referenced from main.o(.text)
 <LI><a href="#[f5]">MENU__GetItemHeight</a> from menu.o(i.MENU__GetItemHeight) referenced from menu_skin.o(i._Paint)
 <LI><a href="#[f6]">MENU__GetItemWidth</a> from menu.o(i.MENU__GetItemWidth) referenced from menu_skin.o(i._Paint)
 <LI><a href="#[7b]">MULTIPAGE_DrawSkinFlex</a> from multipage_skinflex.o(i.MULTIPAGE_DrawSkinFlex) referenced from main.o(.text)
 <LI><a href="#[e4]">MULTIPAGE_SKIN__GetTouchedPage</a> from multipage_skin.o(i.MULTIPAGE_SKIN__GetTouchedPage) referenced from multipage_skinflex.o(i.MULTIPAGE_DrawSkinFlex)
 <LI><a href="#[33]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d6]">OSTaskSwHook</a> from os_cpu_c.o(.text) referenced from os_cpu_a.o(CODE)
 <LI><a href="#[3ea]">OS_IdleTask</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[431]">OS_IntQTask</a> from os_int.o(.text) referenced from os_int.o(.text)
 <LI><a href="#[45a]">OS_StatTask</a> from os_stat.o(.text) referenced from os_stat.o(.text)
 <LI><a href="#[83]">OS_TaskReturn</a> from os_task.o(.text) referenced from os_cpu_c.o(.text)
 <LI><a href="#[473]">OS_TickTask</a> from os_tick.o(.text) referenced from os_tick.o(.text)
 <LI><a href="#[484]">OS_TmrTask</a> from os_tmr.o(.text) referenced from os_tmr.o(.text)
 <LI><a href="#[16b]">PCF_Face_Done</a> from pcf.o(.text) referenced from pcf.o(.constdata)
 <LI><a href="#[16a]">PCF_Face_Init</a> from pcf.o(.text) referenced from pcf.o(.constdata)
 <LI><a href="#[16c]">PCF_Glyph_Load</a> from pcf.o(.text) referenced from pcf.o(.constdata)
 <LI><a href="#[16d]">PCF_Size_Request</a> from pcf.o(.text) referenced from pcf.o(.constdata)
 <LI><a href="#[16e]">PCF_Size_Select</a> from pcf.o(.text) referenced from pcf.o(.constdata)
 <LI><a href="#[7c]">PROGBAR_DrawSkinFlex</a> from progbar_skinflex.o(i.PROGBAR_DrawSkinFlex) referenced from main.o(.text)
 <LI><a href="#[3b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">PendSV_Handler</a> from os_cpu_a.o(CODE) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7d]">RADIO_DrawSkinFlex</a> from radio_skinflex.o(i.RADIO_DrawSkinFlex) referenced from main.o(.text)
 <LI><a href="#[28]">RADIO__GetButtonSize</a> from radio.o(i.RADIO__GetButtonSize) referenced 2 times from radio.o(.data)
 <LI><a href="#[3f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[63]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2cd]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7e]">SCROLLBAR_DrawSkinFlex</a> from scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex) referenced from main.o(.text)
 <LI><a href="#[6b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7f]">SLIDER_DrawSkinFlex</a> from slider_skinflex.o(i.SLIDER_DrawSkinFlex) referenced from main.o(.text)
 <LI><a href="#[5d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[80]">SPINBOX_DrawSkinFlex</a> from spinbox_skinflex.o(i.SPINBOX_DrawSkinFlex) referenced from main.o(.text)
 <LI><a href="#[36]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[bb]">Split_Conic</a> from raster.o(.text) referenced from raster.o(.text)
 <LI><a href="#[bc]">Split_Cubic</a> from raster.o(.text) referenced from raster.o(.text)
 <LI><a href="#[39]">SysTick_Handler</a> from systick.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[81]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[239]">T1_Driver_Done</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[238]">T1_Driver_Init</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[23c]">T1_Face_Done</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[23b]">T1_Face_Init</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[232]">T1_Get_MM_Var</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[22f]">T1_Get_Multi_Master</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[237]">T1_Get_Track_Kerning</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[240]">T1_GlyphSlot_Done</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[23f]">T1_GlyphSlot_Init</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[241]">T1_Load_Glyph</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[ce]">T1_Parse_Glyph</a> from type1.o(.text) referenced 2 times from type1.o(.text)
 <LI><a href="#[243]">T1_Read_Metrics</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[231]">T1_Set_MM_Blend</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[230]">T1_Set_MM_Design</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[233]">T1_Set_Var_Design</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[23e]">T1_Size_Done</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[23d]">T1_Size_Init</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[244]">T1_Size_Request</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[25f]">T42_Driver_Done</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[25e]">T42_Driver_Init</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[262]">T42_Face_Done</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[261]">T42_Face_Init</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[260]">T42_Get_Interface</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[266]">T42_GlyphSlot_Done</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[265]">T42_GlyphSlot_Init</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[267]">T42_GlyphSlot_Load</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[264]">T42_Size_Done</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[263]">T42_Size_Init</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[268]">T42_Size_Request</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[269]">T42_Size_Select</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[3c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[70]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[71]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[65]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[68]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[67]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[66]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c9]">TT_Access_Glyph_Frame</a> from truetype.o(.text) referenced from truetype.o(.text)
 <LI><a href="#[cd]">TT_Forget_Glyph_Frame</a> from truetype.o(.text) referenced from truetype.o(.text)
 <LI><a href="#[cc]">TT_Load_Composite_Glyph</a> from truetype.o(.text) referenced from truetype.o(.text)
 <LI><a href="#[ca]">TT_Load_Glyph_Header</a> from truetype.o(.text) referenced from truetype.o(.text)
 <LI><a href="#[cb]">TT_Load_Simple_Glyph</a> from truetype.o(.text) referenced from truetype.o(.text)
 <LI><a href="#[6e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5f]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[60]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[61]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[64]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[bf]">Vertical_Sweep_Drop</a> from raster.o(.text) referenced from raster.o(.text)
 <LI><a href="#[bd]">Vertical_Sweep_Init</a> from raster.o(.text) referenced from raster.o(.text)
 <LI><a href="#[be]">Vertical_Sweep_Span</a> from raster.o(.text) referenced from raster.o(.text)
 <LI><a href="#[c0]">Vertical_Sweep_Step</a> from raster.o(.text) referenced from raster.o(.text)
 <LI><a href="#[2b0]">WIDGET_EFFECT_3D_DrawUp</a> from widget_effect_3d.o(i.WIDGET_EFFECT_3D_DrawUp) referenced from widget_effect_3d.o(.constdata)
 <LI><a href="#[db]">WM_HandlePID</a> from wm_touch.o(i.WM_HandlePID) referenced from gui_pid.o(i.GUI_PID_StoreState)
 <LI><a href="#[f8]">WM__Paint1</a> from wm.o(i.WM__Paint1) referenced from wm.o(i._Paint1)
 <LI><a href="#[3a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ee]">_CalcPositions</a> from scrollbar_skin.o(i._CalcPositions) referenced 2 times from scrollbar_skin.o(i._Create)
 <LI><a href="#[28f]">_CalcSizeOfChar</a> from gui_uc_encodenone.o(i._CalcSizeOfChar) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[278]">_Color2IndexBulk</a> from guicc_m565.o(i._Color2IndexBulk) referenced 2 times from guicc_m565.o(.constdata)
 <LI><a href="#[291]">_Color2Index_0</a> from guicc_0.o(i._Color2Index_0) referenced from guicc_0.o(.constdata)
 <LI><a href="#[2b8]">_Color2Index_8888</a> from guicc_8888.o(i._Color2Index_8888) referenced from guicc_8888.o(.constdata)
 <LI><a href="#[275]">_Color2Index_M565</a> from guicc_m565.o(i._Color2Index_M565) referenced from guicc_m565.o(.constdata)
 <LI><a href="#[299]">_Create</a> from button_skinclassic.o(i._Create) referenced 12 times from button_skinclassic.o(.constdata)
 <LI><a href="#[8]">_Create</a> from button_skin.o(i._Create) referenced 24 times from button_skin.o(.data)
 <LI><a href="#[aa]">_DispChar</a> from gui_ttf.o(.text) referenced from gui_ttf.o(.text)
 <LI><a href="#[ac]">_DispCharAA</a> from gui_ttf.o(.text) referenced from gui_ttf.o(.text)
 <LI><a href="#[161]">_DispLine</a> from gui_ttf.o(.text) referenced from gui_ttf.o(.constdata)
 <LI><a href="#[162]">_DispLineAA</a> from gui_ttf.o(.text) referenced from gui_ttf.o(.constdata)
 <LI><a href="#[e8]">_DrawBackgroundH</a> from scrollbar_skinflex.o(i._DrawBackgroundH) referenced from scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
 <LI><a href="#[e5]">_DrawBackgroundV</a> from scrollbar_skinflex.o(i._DrawBackgroundV) referenced from scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
 <LI><a href="#[f9]">_DrawBitmap</a> from guidrv_template.o(.text) referenced 3 times from guidrv_template.o(.constdata)
 <LI><a href="#[22]">_DrawBitmapCW</a> from lcd_rotatecw.o(i._DrawBitmapCW) referenced 2 times from lcd_rotatecw.o(.data)
 <LI><a href="#[2b2]">_DrawDown</a> from widget_effect_3d.o(i._DrawDown) referenced 2 times from widget_effect_3d.o(.constdata)
 <LI><a href="#[2b3]">_DrawDownRect</a> from widget_effect_3d.o(i._DrawDownRect) referenced 2 times from widget_effect_3d.o(.constdata)
 <LI><a href="#[ea]">_DrawGraspH</a> from scrollbar_skinflex.o(i._DrawGraspH) referenced from scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
 <LI><a href="#[e7]">_DrawGraspV</a> from scrollbar_skinflex.o(i._DrawGraspV) referenced from scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
 <LI><a href="#[fa]">_DrawHLine</a> from guidrv_template.o(.text) referenced 3 times from guidrv_template.o(.constdata)
 <LI><a href="#[2b4]">_DrawUp</a> from widget_effect_3d1l.o(i._DrawUp) referenced from widget_effect_3d1l.o(.constdata)
 <LI><a href="#[2b1]">_DrawUpRect</a> from widget_effect_3d.o(i._DrawUpRect) referenced 2 times from widget_effect_3d.o(.constdata)
 <LI><a href="#[fb]">_DrawVLine</a> from guidrv_template.o(.text) referenced 3 times from guidrv_template.o(.constdata)
 <LI><a href="#[290]">_Encode</a> from gui_uc_encodenone.o(i._Encode) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[fc]">_FillRect</a> from guidrv_template.o(.text) referenced 3 times from guidrv_template.o(.constdata)
 <LI><a href="#[2cb]">_GUI_USAGE_BM_Delete</a> from guidev_usagebm.o(i._GUI_USAGE_BM_Delete) referenced from guidev_usagebm.o(.constdata)
 <LI><a href="#[d]">_GetBorderSize</a> from framewin_skin.o(i._GetBorderSize) referenced 4 times from framewin_skin.o(.data)
 <LI><a href="#[2d]">_GetButtonSize</a> from checkbox_skinclassic.o(i._GetButtonSize) referenced 4 times from checkbox_skinclassic.o(.data)
 <LI><a href="#[28d]">_GetCharCode</a> from gui_uc_encodenone.o(i._GetCharCode) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[a9]">_GetCharDistX</a> from gui_ttf.o(.text) referenced from gui_ttf.o(.text)
 <LI><a href="#[ab]">_GetCharDistX_AA</a> from gui_ttf.o(.text) referenced from gui_ttf.o(.text)
 <LI><a href="#[28e]">_GetCharSize</a> from gui_uc_encodenone.o(i._GetCharSize) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[103]">_GetDevData</a> from guidrv_template.o(.text) referenced 3 times from guidrv_template.o(.constdata)
 <LI><a href="#[101]">_GetDevFunc</a> from guidrv_template.o(.text) referenced 3 times from guidrv_template.o(.constdata)
 <LI><a href="#[102]">_GetDevProp</a> from guidrv_template.o(.text) referenced 3 times from guidrv_template.o(.constdata)
 <LI><a href="#[a7]">_GetFontInfo</a> from gui_ttf.o(.text) referenced from gui_ttf.o(.text)
 <LI><a href="#[293]">_GetIndexMask_0</a> from guicc_0.o(i._GetIndexMask_0) referenced from guicc_0.o(.constdata)
 <LI><a href="#[2b9]">_GetIndexMask_8888</a> from guicc_8888.o(i._GetIndexMask_8888) referenced from guicc_8888.o(.constdata)
 <LI><a href="#[277]">_GetIndexMask_M565</a> from guicc_m565.o(i._GetIndexMask_M565) referenced from guicc_m565.o(.constdata)
 <LI><a href="#[fd]">_GetPixelIndex</a> from guidrv_template.o(.text) referenced 3 times from guidrv_template.o(.constdata)
 <LI><a href="#[104]">_GetRect</a> from guidrv_template.o(.text) referenced 3 times from guidrv_template.o(.constdata)
 <LI><a href="#[f0]">_GetTouchedPage</a> from multipage_skinclassic.o(i._GetTouchedPage) referenced from multipage_skinclassic.o(i._Create)
 <LI><a href="#[279]">_Index2ColorBulk</a> from guicc_m565.o(i._Index2ColorBulk) referenced 2 times from guicc_m565.o(.constdata)
 <LI><a href="#[292]">_Index2Color_0</a> from guicc_0.o(i._Index2Color_0) referenced from guicc_0.o(.constdata)
 <LI><a href="#[87]">_Init</a> from guidrv_template.o(.text) referenced from guidrv_template.o(.text)
 <LI><a href="#[a8]">_IsInFont</a> from gui_ttf.o(.text) referenced from gui_ttf.o(.text)
 <LI><a href="#[2b]">_Log2VisBuffered</a> from gui_charline.o(i._Log2VisBuffered) referenced 2 times from gui_charline.o(.data)
 <LI><a href="#[89]">_Off</a> from guidrv_template.o(.text) referenced from guidrv_template.o(.text)
 <LI><a href="#[88]">_On</a> from guidrv_template.o(.text) referenced from guidrv_template.o(.text)
 <LI><a href="#[d7]">_OnExit</a> from gui_task.o(i._OnExit) referenced from gui_task.o(i.GUITASK_Init)
 <LI><a href="#[dc]">_OnExit</a> from gui_core.o(i._OnExit) referenced from gui_core.o(i.GUI__Config)
 <LI><a href="#[de]">_OnExit</a> from gui__alpha.o(i._OnExit) referenced from gui__alpha.o(i.GUI__GetAlphaBuffer)
 <LI><a href="#[df]">_OnExit</a> from lcd_color.o(i._OnExit) referenced from lcd_color.o(i.LCD_InitColors)
 <LI><a href="#[ec]">_OnExit</a> from wm.o(i._OnExit) referenced from wm.o(i.WM_Init)
 <LI><a href="#[f4]">_OnExit</a> from gui_alloc.o(i._OnExit) referenced from gui_alloc.o(i._InitOnce)
 <LI><a href="#[25]">_OnTouchDefault</a> from button.o(i._OnTouchDefault) referenced 2 times from button.o(.data)
 <LI><a href="#[298]">_Paint</a> from button_skinclassic.o(i._Paint) referenced 12 times from button_skinclassic.o(.constdata)
 <LI><a href="#[7]">_Paint</a> from button_skin.o(i._Paint) referenced 24 times from button_skin.o(.data)
 <LI><a href="#[23]">_Rect2TextRect</a> from lcd_rotatecw.o(i._Rect2TextRect) referenced 2 times from lcd_rotatecw.o(.data)
 <LI><a href="#[27b]">_SetBkColor</a> from lcd.o(i._SetBkColor) referenced from lcd.o(.constdata)
 <LI><a href="#[27a]">_SetColor</a> from lcd.o(i._SetColor) referenced from lcd.o(.constdata)
 <LI><a href="#[27c]">_SetDrawMode</a> from lcd.o(i._SetDrawMode) referenced from lcd.o(.constdata)
 <LI><a href="#[8a]">_SetLUTEntry</a> from guidrv_template.o(.text) referenced from guidrv_template.o(.text)
 <LI><a href="#[100]">_SetOrg</a> from guidrv_template.o(.text) referenced 3 times from guidrv_template.o(.constdata)
 <LI><a href="#[fe]">_SetPixelIndex</a> from guidrv_template.o(.text) referenced 3 times from guidrv_template.o(.constdata)
 <LI><a href="#[86]">_SetSize</a> from guidrv_template.o(.text) referenced from guidrv_template.o(.text)
 <LI><a href="#[84]">_SetVRAMAddr</a> from guidrv_template.o(.text) referenced from guidrv_template.o(.text)
 <LI><a href="#[85]">_SetVSize</a> from guidrv_template.o(.text) referenced from guidrv_template.o(.text)
 <LI><a href="#[24]">_TransformRect</a> from lcd_rotatecw.o(i._TransformRect) referenced 2 times from lcd_rotatecw.o(.data)
 <LI><a href="#[ff]">_XorPixel</a> from guidrv_template.o(.text) referenced 3 times from guidrv_template.o(.constdata)
 <LI><a href="#[2ce]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[8d]">_bdf_parse_glyphs</a> from bdf.o(.text) referenced from bdf.o(.text)
 <LI><a href="#[8e]">_bdf_parse_properties</a> from bdf.o(.text) referenced from bdf.o(.text)
 <LI><a href="#[8f]">_bdf_parse_start</a> from bdf.o(.text) referenced from bdf.o(.text)
 <LI><a href="#[a6]">_cbFaceRequester</a> from gui_ttf.o(.text) referenced from gui_ttf.o(.text)
 <LI><a href="#[ed]">_cbPaintMemDev</a> from wm.o(i._cbPaintMemDev) referenced from wm.o(i.WM__Paint)
 <LI><a href="#[d2]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[d4]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[d3]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[9c]">adler32</a> from ftgzip.o(.text) referenced from ftgzip.o(.text)
 <LI><a href="#[111]">af_autofitter_done</a> from autofit.o(.text) referenced from autofit.o(.constdata)
 <LI><a href="#[110]">af_autofitter_init</a> from autofit.o(.text) referenced from autofit.o(.constdata)
 <LI><a href="#[10f]">af_autofitter_load_glyph</a> from autofit.o(.text) referenced from autofit.o(.constdata)
 <LI><a href="#[10e]">af_cjk_hints_apply</a> from autofit.o(.text) referenced from autofit.o(.constdata)
 <LI><a href="#[10d]">af_cjk_hints_init</a> from autofit.o(.text) referenced from autofit.o(.constdata)
 <LI><a href="#[10b]">af_cjk_metrics_init</a> from autofit.o(.text) referenced from autofit.o(.constdata)
 <LI><a href="#[10c]">af_cjk_metrics_scale</a> from autofit.o(.text) referenced from autofit.o(.constdata)
 <LI><a href="#[106]">af_dummy_hints_apply</a> from autofit.o(.text) referenced from autofit.o(.constdata)
 <LI><a href="#[105]">af_dummy_hints_init</a> from autofit.o(.text) referenced from autofit.o(.constdata)
 <LI><a href="#[8b]">af_face_globals_free</a> from autofit.o(.text) referenced from autofit.o(.text)
 <LI><a href="#[10a]">af_latin_hints_apply</a> from autofit.o(.text) referenced from autofit.o(.constdata)
 <LI><a href="#[109]">af_latin_hints_init</a> from autofit.o(.text) referenced from autofit.o(.constdata)
 <LI><a href="#[107]">af_latin_metrics_init</a> from autofit.o(.text) referenced from autofit.o(.constdata)
 <LI><a href="#[108]">af_latin_metrics_scale</a> from autofit.o(.text) referenced from autofit.o(.constdata)
 <LI><a href="#[ae]">afm_compare_kern_pairs</a> from psaux.o(.text) referenced from psaux.o(.text)
 <LI><a href="#[19e]">afm_parser_done</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[19d]">afm_parser_init</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[19f]">afm_parser_parse</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[114]">bdf_cmap_char_index</a> from bdf.o(.text) referenced from bdf.o(.constdata)
 <LI><a href="#[115]">bdf_cmap_char_next</a> from bdf.o(.text) referenced from bdf.o(.constdata)
 <LI><a href="#[113]">bdf_cmap_done</a> from bdf.o(.text) referenced from bdf.o(.constdata)
 <LI><a href="#[112]">bdf_cmap_init</a> from bdf.o(.text) referenced from bdf.o(.constdata)
 <LI><a href="#[118]">bdf_driver_requester</a> from bdf.o(.text) referenced from bdf.o(.constdata)
 <LI><a href="#[117]">bdf_get_bdf_property</a> from bdf.o(.text) referenced from bdf.o(.constdata)
 <LI><a href="#[116]">bdf_get_charset_id</a> from bdf.o(.text) referenced from bdf.o(.constdata)
 <LI><a href="#[8c]">by_encoding</a> from bdf.o(.text) referenced from bdf.o(.text)
 <LI><a href="#[eb]">cbBackWin</a> from wm.o(i.cbBackWin) referenced from wm.o(i.WM_Init)
 <LI><a href="#[137]">cff_cmap_encoding_char_index</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[138]">cff_cmap_encoding_char_next</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[136]">cff_cmap_encoding_done</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[135]">cff_cmap_encoding_init</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[13b]">cff_cmap_unicode_char_index</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[13c]">cff_cmap_unicode_char_next</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[13a]">cff_cmap_unicode_done</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[139]">cff_cmap_unicode_init</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[125]">cff_driver_done</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[124]">cff_driver_init</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[128]">cff_face_done</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[127]">cff_face_init</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[123]">cff_get_cmap_info</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[120]">cff_get_glyph_name</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[126]">cff_get_interface</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[12e]">cff_get_kerning</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[121]">cff_get_name_index</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[134]">cff_parse_cid_ros</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[132]">cff_parse_font_bbox</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[131]">cff_parse_font_matrix</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[133]">cff_parse_private_dict</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[122]">cff_ps_has_glyph_names</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[90]">cff_sid_to_glyph_name</a> from cff.o(.text) referenced from cff.o(.text)
 <LI><a href="#[12a]">cff_size_done</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[129]">cff_size_init</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[12f]">cff_size_request</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[130]">cff_size_select</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[12c]">cff_slot_done</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[12b]">cff_slot_init</a> from cff.o(.text) referenced from cff.o(.constdata)
 <LI><a href="#[24a]">cid_driver_done</a> from type1cid.o(.text) referenced from type1cid.o(.constdata)
 <LI><a href="#[249]">cid_driver_init</a> from type1cid.o(.text) referenced from type1cid.o(.constdata)
 <LI><a href="#[24d]">cid_face_done</a> from type1cid.o(.text) referenced from type1cid.o(.constdata)
 <LI><a href="#[24c]">cid_face_init</a> from type1cid.o(.text) referenced from type1cid.o(.constdata)
 <LI><a href="#[24b]">cid_get_interface</a> from type1cid.o(.text) referenced from type1cid.o(.constdata)
 <LI><a href="#[247]">cid_get_postscript_name</a> from type1cid.o(.text) referenced from type1cid.o(.constdata)
 <LI><a href="#[d1]">cid_load_glyph</a> from type1cid.o(.text) referenced from type1cid.o(.text)
 <LI><a href="#[248]">cid_ps_get_font_info</a> from type1cid.o(.text) referenced from type1cid.o(.constdata)
 <LI><a href="#[24f]">cid_size_done</a> from type1cid.o(.text) referenced from type1cid.o(.constdata)
 <LI><a href="#[24e]">cid_size_init</a> from type1cid.o(.text) referenced from type1cid.o(.constdata)
 <LI><a href="#[253]">cid_size_request</a> from type1cid.o(.text) referenced from type1cid.o(.constdata)
 <LI><a href="#[251]">cid_slot_done</a> from type1cid.o(.text) referenced from type1cid.o(.constdata)
 <LI><a href="#[250]">cid_slot_init</a> from type1cid.o(.text) referenced from type1cid.o(.constdata)
 <LI><a href="#[252]">cid_slot_load_glyph</a> from type1cid.o(.text) referenced from type1cid.o(.constdata)
 <LI><a href="#[cf]">compare_kern_pairs</a> from type1.o(.text) referenced from type1.o(.text)
 <LI><a href="#[92]">destroy_face</a> from ftbase.o(.text) referenced from ftbase.o(.text)
 <LI><a href="#[91]">destroy_size</a> from ftbase.o(.text) referenced from ftbase.o(.text)
 <LI><a href="#[2e9]">emwindemo_task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[26b]">fnt_cmap_char_index</a> from winfnt.o(.text) referenced from winfnt.o(.constdata)
 <LI><a href="#[26c]">fnt_cmap_char_next</a> from winfnt.o(.text) referenced from winfnt.o(.constdata)
 <LI><a href="#[26a]">fnt_cmap_init</a> from winfnt.o(.text) referenced from winfnt.o(.constdata)
 <LI><a href="#[d5]">fputc</a> from usart.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[a3]">ft_alloc</a> from ftsystem.o(.text) referenced from ftsystem.o(.text)
 <LI><a href="#[15a]">ft_bitmap_glyph_bbox</a> from ftglyph.o(.text) referenced from ftglyph.o(.constdata)
 <LI><a href="#[159]">ft_bitmap_glyph_copy</a> from ftglyph.o(.text) referenced from ftglyph.o(.constdata)
 <LI><a href="#[158]">ft_bitmap_glyph_done</a> from ftglyph.o(.text) referenced from ftglyph.o(.constdata)
 <LI><a href="#[157]">ft_bitmap_glyph_init</a> from ftglyph.o(.text) referenced from ftglyph.o(.constdata)
 <LI><a href="#[1ba]">ft_black_done</a> from raster.o(.text) referenced from raster.o(.constdata)
 <LI><a href="#[1b6]">ft_black_new</a> from raster.o(.text) referenced from raster.o(.constdata)
 <LI><a href="#[1b9]">ft_black_render</a> from raster.o(.text) referenced from raster.o(.constdata)
 <LI><a href="#[1b7]">ft_black_reset</a> from raster.o(.text) referenced from raster.o(.constdata)
 <LI><a href="#[1b8]">ft_black_set_mode</a> from raster.o(.text) referenced from raster.o(.constdata)
 <LI><a href="#[a5]">ft_free</a> from ftsystem.o(.text) referenced from ftsystem.o(.text)
 <LI><a href="#[9d]">ft_gzip_alloc</a> from ftgzip.o(.text) referenced from ftgzip.o(.text)
 <LI><a href="#[9e]">ft_gzip_free</a> from ftgzip.o(.text) referenced from ftgzip.o(.text)
 <LI><a href="#[a0]">ft_gzip_stream_close</a> from ftgzip.o(.text) referenced from ftgzip.o(.text)
 <LI><a href="#[9f]">ft_gzip_stream_io</a> from ftgzip.o(.text) referenced from ftgzip.o(.text)
 <LI><a href="#[a2]">ft_lzw_stream_close</a> from ftlzw.o(.text) referenced from ftlzw.o(.text)
 <LI><a href="#[a1]">ft_lzw_stream_io</a> from ftlzw.o(.text) referenced from ftlzw.o(.text)
 <LI><a href="#[15f]">ft_outline_glyph_bbox</a> from ftglyph.o(.text) referenced from ftglyph.o(.constdata)
 <LI><a href="#[15d]">ft_outline_glyph_copy</a> from ftglyph.o(.text) referenced from ftglyph.o(.constdata)
 <LI><a href="#[15c]">ft_outline_glyph_done</a> from ftglyph.o(.text) referenced from ftglyph.o(.constdata)
 <LI><a href="#[15b]">ft_outline_glyph_init</a> from ftglyph.o(.text) referenced from ftglyph.o(.constdata)
 <LI><a href="#[160]">ft_outline_glyph_prepare</a> from ftglyph.o(.text) referenced from ftglyph.o(.constdata)
 <LI><a href="#[15e]">ft_outline_glyph_transform</a> from ftglyph.o(.text) referenced from ftglyph.o(.constdata)
 <LI><a href="#[1be]">ft_raster1_get_cbox</a> from raster.o(.text) referenced 2 times from raster.o(.constdata)
 <LI><a href="#[1bb]">ft_raster1_init</a> from raster.o(.text) referenced 2 times from raster.o(.constdata)
 <LI><a href="#[1bc]">ft_raster1_render</a> from raster.o(.text) referenced 2 times from raster.o(.constdata)
 <LI><a href="#[1bf]">ft_raster1_set_mode</a> from raster.o(.text) referenced 2 times from raster.o(.constdata)
 <LI><a href="#[1bd]">ft_raster1_transform</a> from raster.o(.text) referenced 2 times from raster.o(.constdata)
 <LI><a href="#[a4]">ft_realloc</a> from ftsystem.o(.text) referenced from ftsystem.o(.text)
 <LI><a href="#[210]">ft_smooth_get_cbox</a> from smooth.o(.text) referenced 3 times from smooth.o(.constdata)
 <LI><a href="#[20d]">ft_smooth_init</a> from smooth.o(.text) referenced 3 times from smooth.o(.constdata)
 <LI><a href="#[20e]">ft_smooth_render</a> from smooth.o(.text) referenced from smooth.o(.constdata)
 <LI><a href="#[212]">ft_smooth_render_lcd</a> from smooth.o(.text) referenced from smooth.o(.constdata)
 <LI><a href="#[213]">ft_smooth_render_lcd_v</a> from smooth.o(.text) referenced from smooth.o(.constdata)
 <LI><a href="#[211]">ft_smooth_set_mode</a> from smooth.o(.text) referenced 3 times from smooth.o(.constdata)
 <LI><a href="#[20f]">ft_smooth_transform</a> from smooth.o(.text) referenced 3 times from smooth.o(.constdata)
 <LI><a href="#[11b]">ft_stub_set_char_sizes</a> from ftbase.o(.text) referenced 9 times from bdf.o(.constdata)
 <LI><a href="#[11c]">ft_stub_set_pixel_sizes</a> from ftbase.o(.text) referenced 9 times from bdf.o(.constdata)
 <LI><a href="#[97]">ftc_basic_family_compare</a> from ftcache.o(.text) referenced 2 times from ftcache.o(.constdata)
 <LI><a href="#[97]">ftc_basic_family_compare</a> from ftcache.o(.text) referenced from ftcache.o(.text)
 <LI><a href="#[151]">ftc_basic_family_get_count</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[148]">ftc_basic_family_init</a> from ftcache.o(.text) referenced 2 times from ftcache.o(.constdata)
 <LI><a href="#[152]">ftc_basic_family_load_bitmap</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[149]">ftc_basic_family_load_glyph</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[14d]">ftc_basic_gnode_compare_faceid</a> from ftcache.o(.text) referenced 2 times from ftcache.o(.constdata)
 <LI><a href="#[147]">ftc_cache_done</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[146]">ftc_cache_init</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[96]">ftc_cmap_node_compare</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[96]">ftc_cmap_node_compare</a> from ftcache.o(.text) referenced from ftcache.o(.text)
 <LI><a href="#[145]">ftc_cmap_node_free</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[142]">ftc_cmap_node_new</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[144]">ftc_cmap_node_remove_faceid</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[143]">ftc_cmap_node_weight</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[93]">ftc_face_node_compare</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[93]">ftc_face_node_compare</a> from ftcache.o(.text) referenced from ftcache.o(.text)
 <LI><a href="#[141]">ftc_face_node_done</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[140]">ftc_face_node_init</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[150]">ftc_gcache_done</a> from ftcache.o(.text) referenced 2 times from ftcache.o(.constdata)
 <LI><a href="#[14f]">ftc_gcache_init</a> from ftcache.o(.text) referenced 2 times from ftcache.o(.constdata)
 <LI><a href="#[14c]">ftc_gnode_compare</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[14e]">ftc_inode_free</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[14a]">ftc_inode_new</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[14b]">ftc_inode_weight</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[94]">ftc_size_node_compare</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[94]">ftc_size_node_compare</a> from ftcache.o(.text) referenced from ftcache.o(.text)
 <LI><a href="#[95]">ftc_size_node_compare_faceid</a> from ftcache.o(.text) referenced from ftcache.o(.text)
 <LI><a href="#[13f]">ftc_size_node_done</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[13d]">ftc_size_node_init</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[13e]">ftc_size_node_reset</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[155]">ftc_snode_compare</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[156]">ftc_snode_free</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[153]">ftc_snode_new</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[154]">ftc_snode_weight</a> from ftcache.o(.text) referenced from ftcache.o(.constdata)
 <LI><a href="#[1e0]">get_sfnt_table</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[216]">gray_conic_to</a> from smooth.o(.text) referenced from smooth.o(.constdata)
 <LI><a href="#[217]">gray_cubic_to</a> from smooth.o(.text) referenced from smooth.o(.constdata)
 <LI><a href="#[215]">gray_line_to</a> from smooth.o(.text) referenced from smooth.o(.constdata)
 <LI><a href="#[214]">gray_move_to</a> from smooth.o(.text) referenced from smooth.o(.constdata)
 <LI><a href="#[20c]">gray_raster_done</a> from smooth.o(.text) referenced from smooth.o(.constdata)
 <LI><a href="#[209]">gray_raster_new</a> from smooth.o(.text) referenced from smooth.o(.constdata)
 <LI><a href="#[20b]">gray_raster_render</a> from smooth.o(.text) referenced from smooth.o(.constdata)
 <LI><a href="#[20a]">gray_raster_reset</a> from smooth.o(.text) referenced from smooth.o(.constdata)
 <LI><a href="#[c8]">gray_render_span</a> from smooth.o(.text) referenced from smooth.o(.text)
 <LI><a href="#[2e5]">led1_task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[4]">my_mem_init</a> from malloc.o(.text) referenced 2 times from malloc.o(.data)
 <LI><a href="#[5]">my_mem_perused</a> from malloc.o(.text) referenced 2 times from malloc.o(.data)
 <LI><a href="#[22a]">parse_blend_axis_types</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[229]">parse_blend_design_map</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[228]">parse_blend_design_positions</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[227]">parse_charstrings</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[225]">parse_encoding</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[245]">parse_fd_array</a> from type1cid.o(.text) referenced from type1cid.o(.constdata)
 <LI><a href="#[224]">parse_font_matrix</a> from type1.o(.text) referenced 2 times from type1.o(.constdata)
 <LI><a href="#[226]">parse_subrs</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[22b]">parse_weight_vector</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[165]">pcf_cmap_char_index</a> from pcf.o(.text) referenced from pcf.o(.constdata)
 <LI><a href="#[166]">pcf_cmap_char_next</a> from pcf.o(.text) referenced from pcf.o(.constdata)
 <LI><a href="#[164]">pcf_cmap_done</a> from pcf.o(.text) referenced from pcf.o(.constdata)
 <LI><a href="#[163]">pcf_cmap_init</a> from pcf.o(.text) referenced from pcf.o(.constdata)
 <LI><a href="#[169]">pcf_driver_requester</a> from pcf.o(.text) referenced from pcf.o(.constdata)
 <LI><a href="#[168]">pcf_get_bdf_property</a> from pcf.o(.text) referenced from pcf.o(.constdata)
 <LI><a href="#[167]">pcf_get_charset_id</a> from pcf.o(.text) referenced from pcf.o(.constdata)
 <LI><a href="#[175]">pfr_cmap_char_index</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[176]">pfr_cmap_char_next</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[174]">pfr_cmap_done</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[173]">pfr_cmap_init</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[16f]">pfr_extra_item_load_bitmap_info</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[170]">pfr_extra_item_load_font_id</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[172]">pfr_extra_item_load_kerning_pairs</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[171]">pfr_extra_item_load_stem_snaps</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[17c]">pfr_face_done</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[178]">pfr_face_get_kerning</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[17b]">pfr_face_init</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[179]">pfr_get_advance</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[180]">pfr_get_kerning</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[177]">pfr_get_metrics</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[17a]">pfr_get_service</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[17e]">pfr_slot_done</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[17d]">pfr_slot_init</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[17f]">pfr_slot_load</a> from pfr.o(.text) referenced from pfr.o(.constdata)
 <LI><a href="#[1b3]">ps_get_macintosh_name</a> from psnames.o(.text) referenced from psnames.o(.constdata)
 <LI><a href="#[1b4]">ps_get_standard_strings</a> from psnames.o(.text) referenced from psnames.o(.constdata)
 <LI><a href="#[1b2]">ps_hinter_done</a> from pshinter.o(.text) referenced from pshinter.o(.constdata)
 <LI><a href="#[1b1]">ps_hinter_init</a> from pshinter.o(.text) referenced from pshinter.o(.constdata)
 <LI><a href="#[71e]">ps_hints_apply</a> from pshinter.o(.text) referenced 2 times from pshinter.o(.text)
 <LI><a href="#[b0]">ps_hints_close</a> from pshinter.o(.text) referenced from pshinter.o(.text)
 <LI><a href="#[b3]">ps_hints_t1reset</a> from pshinter.o(.text) referenced from pshinter.o(.text)
 <LI><a href="#[b2]">ps_hints_t1stem3</a> from pshinter.o(.text) referenced from pshinter.o(.text)
 <LI><a href="#[b7]">ps_hints_t2counter</a> from pshinter.o(.text) referenced from pshinter.o(.text)
 <LI><a href="#[b6]">ps_hints_t2mask</a> from pshinter.o(.text) referenced from pshinter.o(.text)
 <LI><a href="#[186]">ps_parser_done</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[185]">ps_parser_init</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[190]">ps_parser_load_field</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[191]">ps_parser_load_field_table</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[188]">ps_parser_skip_PS_token</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[187]">ps_parser_skip_spaces</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[18b]">ps_parser_to_bytes</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[18c]">ps_parser_to_coord_array</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[18a]">ps_parser_to_fixed</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[18d]">ps_parser_to_fixed_array</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[189]">ps_parser_to_int</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[18e]">ps_parser_to_token</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[18f]">ps_parser_to_token_array</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[183]">ps_table_add</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[182]">ps_table_done</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[181]">ps_table_new</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[184]">ps_table_release</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[ba]">psh_globals_destroy</a> from pshinter.o(.text) referenced from pshinter.o(.text)
 <LI><a href="#[b8]">psh_globals_new</a> from pshinter.o(.text) referenced from pshinter.o(.text)
 <LI><a href="#[b9]">psh_globals_set_scale</a> from pshinter.o(.text) referenced from pshinter.o(.text)
 <LI><a href="#[1ae]">pshinter_get_globals_funcs</a> from pshinter.o(.text) referenced from pshinter.o(.constdata)
 <LI><a href="#[1af]">pshinter_get_t1_funcs</a> from pshinter.o(.text) referenced from pshinter.o(.constdata)
 <LI><a href="#[1b0]">pshinter_get_t2_funcs</a> from pshinter.o(.text) referenced from pshinter.o(.constdata)
 <LI><a href="#[1b5]">psnames_get_service</a> from psnames.o(.text) referenced from psnames.o(.constdata)
 <LI><a href="#[1e7]">sfnt_done_face</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1e8]">sfnt_get_interface</a> from sfnt.o(.text) referenced 2 times from sfnt.o(.constdata)
 <LI><a href="#[1e2]">sfnt_get_ps_name</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1e5]">sfnt_init_face</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1e6]">sfnt_load_face</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1e1]">sfnt_table_info</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[2f7]">start_task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[197]">t1_builder_add_contour</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[195]">t1_builder_add_point</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[196]">t1_builder_add_point1</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[194]">t1_builder_check_points</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[199]">t1_builder_close_contour</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[193]">t1_builder_done</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[192]">t1_builder_init</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[198]">t1_builder_start_point</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[1a8]">t1_cmap_custom_char_index</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[1a9]">t1_cmap_custom_char_next</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[1a7]">t1_cmap_custom_done</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[1a6]">t1_cmap_custom_init</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[1a5]">t1_cmap_expert_init</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[1a1]">t1_cmap_standard_init</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[1a3]">t1_cmap_std_char_index</a> from psaux.o(.text) referenced 2 times from psaux.o(.constdata)
 <LI><a href="#[1a4]">t1_cmap_std_char_next</a> from psaux.o(.text) referenced 2 times from psaux.o(.constdata)
 <LI><a href="#[1a2]">t1_cmap_std_done</a> from psaux.o(.text) referenced 2 times from psaux.o(.constdata)
 <LI><a href="#[1ac]">t1_cmap_unicode_char_index</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[1ad]">t1_cmap_unicode_char_next</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[1ab]">t1_cmap_unicode_done</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[1aa]">t1_cmap_unicode_init</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[19b]">t1_decoder_done</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[19a]">t1_decoder_init</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[19c]">t1_decoder_parse_charstrings</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[1a0]">t1_decrypt</a> from psaux.o(.text) referenced from psaux.o(.constdata)
 <LI><a href="#[22c]">t1_get_glyph_name</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[ad]">t1_get_glyph_name</a> from psaux.o(.text) referenced from psaux.o(.text)
 <LI><a href="#[d0]">t1_get_index</a> from type1.o(.text) referenced from type1.o(.text)
 <LI><a href="#[22d]">t1_get_name_index</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[22e]">t1_get_ps_name</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[af]">t1_hints_open</a> from pshinter.o(.text) referenced from pshinter.o(.text)
 <LI><a href="#[b1]">t1_hints_stem</a> from pshinter.o(.text) referenced from pshinter.o(.text)
 <LI><a href="#[234]">t1_ps_get_font_info</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[236]">t1_ps_get_font_private</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[235]">t1_ps_has_glyph_names</a> from type1.o(.text) referenced from type1.o(.constdata)
 <LI><a href="#[b4]">t2_hints_open</a> from pshinter.o(.text) referenced from pshinter.o(.text)
 <LI><a href="#[b5]">t2_hints_stems</a> from pshinter.o(.text) referenced from pshinter.o(.text)
 <LI><a href="#[258]">t42_get_glyph_name</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[259]">t42_get_name_index</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[25a]">t42_get_ps_font_name</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[256]">t42_parse_charstrings</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[255]">t42_parse_encoding</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[254]">t42_parse_font_matrix</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[257]">t42_parse_sfnts</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[25b]">t42_ps_get_font_info</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[25d]">t42_ps_get_font_private</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[25c]">t42_ps_has_glyph_names</a> from type42.o(.text) referenced from type42.o(.constdata)
 <LI><a href="#[2e7]">touch_task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[1c1]">tt_cmap0_char_index</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1c2]">tt_cmap0_char_next</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1c4]">tt_cmap0_get_info</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1c3]">tt_cmap0_validate</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1d6]">tt_cmap10_char_index</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1d7]">tt_cmap10_char_next</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1d9]">tt_cmap10_get_info</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1d8]">tt_cmap10_validate</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1db]">tt_cmap12_char_index</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1dc]">tt_cmap12_char_next</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1de]">tt_cmap12_get_info</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1da]">tt_cmap12_init</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1dd]">tt_cmap12_validate</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1c5]">tt_cmap2_char_index</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1c6]">tt_cmap2_char_next</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1c8]">tt_cmap2_get_info</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1c7]">tt_cmap2_validate</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1ca]">tt_cmap4_char_index</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1cb]">tt_cmap4_char_next</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1cd]">tt_cmap4_get_info</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1c9]">tt_cmap4_init</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1cc]">tt_cmap4_validate</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1ce]">tt_cmap6_char_index</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1cf]">tt_cmap6_char_next</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1d1]">tt_cmap6_get_info</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1d0]">tt_cmap6_validate</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1d2]">tt_cmap8_char_index</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1d3]">tt_cmap8_char_next</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1d5]">tt_cmap8_get_info</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1d4]">tt_cmap8_validate</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1c0]">tt_cmap_init</a> from sfnt.o(.text) referenced 5 times from sfnt.o(.constdata)
 <LI><a href="#[219]">tt_driver_done</a> from truetype.o(.text) referenced from truetype.o(.constdata)
 <LI><a href="#[218]">tt_driver_init</a> from truetype.o(.text) referenced from truetype.o(.constdata)
 <LI><a href="#[21c]">tt_face_done</a> from truetype.o(.text) referenced from truetype.o(.constdata)
 <LI><a href="#[200]">tt_face_free_charmap_stub</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[205]">tt_face_free_eblc</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1f4]">tt_face_free_hdmx_stub</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1f2]">tt_face_free_name</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1fe]">tt_face_free_sbit_stub</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[201]">tt_face_get_kerning</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[208]">tt_face_get_metrics</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1e4]">tt_face_goto_table</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[21b]">tt_face_init</a> from truetype.o(.text) referenced from truetype.o(.constdata)
 <LI><a href="#[1df]">tt_face_load_any</a> from sfnt.o(.text) referenced 2 times from sfnt.o(.constdata)
 <LI><a href="#[1f8]">tt_face_load_bhed</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1ff]">tt_face_load_charmap_stub</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1ed]">tt_face_load_cmap</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1ea]">tt_face_load_directory_stub</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[204]">tt_face_load_eblc</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[202]">tt_face_load_font_dir</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1f6]">tt_face_load_gasp</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1f3]">tt_face_load_hdmx_stub</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1eb]">tt_face_load_head</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1ec]">tt_face_load_hhea</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[203]">tt_face_load_hmtx</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1f5]">tt_face_load_kern</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1ee]">tt_face_load_maxp</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1f1]">tt_face_load_name</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1ef]">tt_face_load_os2</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1f7]">tt_face_load_pclt</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1f0]">tt_face_load_post</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1fd]">tt_face_load_sbit_image</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1fa]">tt_face_load_sbit_stub</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1e9]">tt_face_load_sfnt_header_stub</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[207]">tt_face_load_strike_metrics</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[206]">tt_face_set_sbit_strike</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1f9]">tt_face_set_sbit_strike_stub</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1fb]">tt_find_sbit_image</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[1e3]">tt_get_cmap_info</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[21a]">tt_get_interface</a> from truetype.o(.text) referenced from truetype.o(.constdata)
 <LI><a href="#[221]">tt_get_kerning</a> from truetype.o(.text) referenced from truetype.o(.constdata)
 <LI><a href="#[1fc]">tt_load_sbit_metrics</a> from sfnt.o(.text) referenced from sfnt.o(.constdata)
 <LI><a href="#[c7]">tt_name_entry_ascii_from_other</a> from sfnt.o(.text) referenced from sfnt.o(.text)
 <LI><a href="#[c6]">tt_name_entry_ascii_from_ucs4</a> from sfnt.o(.text) referenced from sfnt.o(.text)
 <LI><a href="#[c5]">tt_name_entry_ascii_from_utf16</a> from sfnt.o(.text) referenced from sfnt.o(.text)
 <LI><a href="#[21e]">tt_size_done</a> from truetype.o(.text) referenced from truetype.o(.constdata)
 <LI><a href="#[21d]">tt_size_init</a> from truetype.o(.text) referenced from truetype.o(.constdata)
 <LI><a href="#[222]">tt_size_request</a> from truetype.o(.text) referenced from truetype.o(.constdata)
 <LI><a href="#[223]">tt_size_select</a> from truetype.o(.text) referenced from truetype.o(.constdata)
 <LI><a href="#[21f]">tt_slot_init</a> from truetype.o(.text) referenced from truetype.o(.constdata)
 <LI><a href="#[26d]">winfnt_get_header</a> from winfnt.o(.text) referenced from winfnt.o(.constdata)
 <LI><a href="#[26e]">winfnt_get_service</a> from winfnt.o(.text) referenced from winfnt.o(.constdata)
 <LI><a href="#[9a]">zcalloc</a> from ftgzip.o(.text) referenced from ftgzip.o(.text)
 <LI><a href="#[9b]">zcfree</a> from ftgzip.o(.text) referenced from ftgzip.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2ce]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2d0]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2d2]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[9b3]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9b4]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9b5]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[9b6]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[9b7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2d3]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7b8]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2d5]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[9b8]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[2dd]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9b9]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[9ba]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2d7]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[9bb]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[9bc]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[9bd]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[9be]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2d9]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[9bf]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[9c0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[9c1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[9c2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[9c3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[9c4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[9c5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[9c6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[9c7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[9c8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[9c9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[9ca]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[9cb]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[9cc]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[9cd]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2e2]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[9ce]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[9cf]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[9d0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[9d1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[9d2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[9d3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2d1]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[9d4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2da]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2dc]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[9d5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2de]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[9d6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[7c7]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2e1]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[9d7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2e3]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2e5]"></a>led1_task</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = led1_task &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2e7]"></a>touch_task</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = touch_task &rArr; GUI_TOUCH_Exec &rArr; GUI_TOUCH_X_MeasureY &rArr; TOUCH_ReadData &rArr; SPI1_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2e9]"></a>emwindemo_task</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + Unknown Stack Size
<LI>Call Chain = emwindemo_task &rArr; STemWin_TTFFont_Demo &rArr; GUI_Delay &rArr; GUI_Exec &rArr; GUI_Exec1 &rArr; WM_Exec &rArr; _DrawNext &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STemWin_TTFFont_Demo
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX_SetDefaultSkin
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLIDER_SetDefaultSkin
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_SetDefaultSkin
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetDefaultSkin
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_SetDefaultSkin
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SetDefaultSkin
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_SetDefaultSkin
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEADER_SetDefaultSkin
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetDefaultSkin
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DROPDOWN_SetDefaultSkin
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_SetDefaultSkin
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetDefaultSkin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2f7]"></a>start_task</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = start_task &rArr; GUI_Init &rArr; WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinCfg
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2df]"></a>main</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = main &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_Init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[31]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2cd]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))

<P><STRONG><a name="[4c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2cf]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[81]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[9d8]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[394]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[9d9]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[9da]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[391]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[315]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[317]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[331]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_GPIO_Init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>

<P><STRONG><a name="[9db]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[9dc]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[9dd]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[9de]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[9df]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Init
</UL>

<P><STRONG><a name="[9e0]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[9e1]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[9e2]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[9e3]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[9e4]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[9e5]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[9e6]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[9e7]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[9e8]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[9e9]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9ea]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[318]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[9eb]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9ec]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9ed]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9ee]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9ef]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9f0]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9f1]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9f2]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9f3]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9f4]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9f5]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9f6]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9f7]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9f8]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9f9]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9fa]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
</UL>

<P><STRONG><a name="[2fb]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_FSMC_Init
</UL>

<P><STRONG><a name="[330]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_GPIO_Init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>

<P><STRONG><a name="[34f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[316]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[31b]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[9fb]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9fc]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9fd]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9fe]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9ff]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[a00]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[31c]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[a01]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a02]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a03]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[395]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[a04]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a05]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a06]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a07]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a08]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a09]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[398]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a0a]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a0b]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a0c]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a0d]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a0e]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a0f]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a10]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a11]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a12]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a13]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[399]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[397]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a14]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[a15]"></a>FSMC_NORSRAMDeInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[a16]"></a>FSMC_NANDDeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[a17]"></a>FSMC_PCCARDDeInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[351]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_FSMC_Init
</UL>

<P><STRONG><a name="[a18]"></a>FSMC_NANDInit</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[a19]"></a>FSMC_PCCARDInit</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[a1a]"></a>FSMC_NORSRAMStructInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[a1b]"></a>FSMC_NANDStructInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[a1c]"></a>FSMC_PCCARDStructInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[352]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_FSMC_Init
</UL>

<P><STRONG><a name="[a1d]"></a>FSMC_NANDCmd</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[a1e]"></a>FSMC_PCCARDCmd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[a1f]"></a>FSMC_NANDECCCmd</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[a20]"></a>FSMC_GetECC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[a21]"></a>FSMC_ITConfig</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[a22]"></a>FSMC_GetFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[a23]"></a>FSMC_ClearFlag</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[a24]"></a>FSMC_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[a25]"></a>FSMC_ClearITPendingBit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[34c]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[31f]"></a>I2S_Init</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[a26]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[a27]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[a28]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[a29]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[a2a]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[34a]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[a2b]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[a2c]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[a2d]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[a2e]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[a2f]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[a30]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[a31]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[a32]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[a33]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[a34]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[a35]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>AT24CXX_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT24CXX_Init &rArr; IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Init
</UL>

<P><STRONG><a name="[322]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
</UL>

<P><STRONG><a name="[328]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = AT24CXX_WriteOneByte &rArr; delay_ms &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
</UL>

<P><STRONG><a name="[329]"></a>AT24CXX_WriteLenByte</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[32a]"></a>AT24CXX_ReadLenByte</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[32b]"></a>AT24CXX_Check</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[32c]"></a>AT24CXX_Read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Init
</UL>

<P><STRONG><a name="[32d]"></a>AT24CXX_Write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; delay_ms &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Adjust
</UL>

<P><STRONG><a name="[32e]"></a>EN25QXX_ReadID</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EN25QXX_ReadID &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Init
</UL>

<P><STRONG><a name="[30a]"></a>EN25QXX_Init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EN25QXX_Init &rArr; SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[334]"></a>EN25QXX_ReadSR</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EN25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[335]"></a>EN25QXX_Write_SR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[336]"></a>EN25QXX_Write_Enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EN25QXX_Write_Enable &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Erase_Chip
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Erase_Sector
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Write_Page
</UL>

<P><STRONG><a name="[337]"></a>EN25QXX_Write_Disable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[338]"></a>EN25QXX_Read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EN25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Write
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[339]"></a>EN25QXX_Wait_Busy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EN25QXX_Wait_Busy &rArr; EN25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Erase_Chip
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Erase_Sector
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Write_Page
</UL>

<P><STRONG><a name="[33a]"></a>EN25QXX_Write_Page</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EN25QXX_Write_Page &rArr; EN25QXX_Wait_Busy &rArr; EN25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Wait_Busy
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Write_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Write_NoCheck
</UL>

<P><STRONG><a name="[33b]"></a>EN25QXX_Write_NoCheck</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EN25QXX_Write_NoCheck &rArr; EN25QXX_Write_Page &rArr; EN25QXX_Wait_Busy &rArr; EN25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Write
</UL>

<P><STRONG><a name="[33c]"></a>EN25QXX_Erase_Sector</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Wait_Busy
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Write_Enable
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Write
</UL>

<P><STRONG><a name="[33e]"></a>EN25QXX_Write</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Erase_Sector
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Write_NoCheck
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[33f]"></a>EN25QXX_Erase_Chip</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Wait_Busy
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Write_Enable
</UL>

<P><STRONG><a name="[340]"></a>EN25QXX_PowerDown</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[342]"></a>EN25QXX_WAKEUP</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[321]"></a>IIC_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>

<P><STRONG><a name="[343]"></a>SDA_OUT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>

<P><STRONG><a name="[344]"></a>SDA_IN</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[323]"></a>IIC_Start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = IIC_Start &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[327]"></a>IIC_Stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = IIC_Stop &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[325]"></a>IIC_Wait_Ack</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[345]"></a>IIC_Ack</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = IIC_Ack &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[346]"></a>IIC_NAck</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = IIC_NAck &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[324]"></a>IIC_Send_Byte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = IIC_Send_Byte &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[326]"></a>IIC_Read_Byte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[305]"></a>LED_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[347]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadData
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[34b]"></a>SPI1_Init</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Init
</UL>

<P><STRONG><a name="[34e]"></a>SPI1_SetSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadData
</UL>

<P><STRONG><a name="[32f]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendBlock
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RecvData
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_ReadWriteByte
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_WAKEUP
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_PowerDown
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Erase_Chip
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Erase_Sector
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Write_Page
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Read
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Write_Disable
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Write_Enable
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Write_SR
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_ReadSR
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_ReadID
</UL>

<P><STRONG><a name="[333]"></a>SPI2_Init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Init
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Init
</UL>

<P><STRONG><a name="[350]"></a>SPI2_SetSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_SpeedHigh
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_SpeedLow
</UL>

<P><STRONG><a name="[309]"></a>FSMC_SRAM_Init</STRONG> (Thumb, 226 bytes, Stack size 96 bytes, sram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FSMC_SRAM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a36]"></a>FSMC_SRAM_WriteBuffer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sram.o(.text), UNUSED)

<P><STRONG><a name="[a37]"></a>FSMC_SRAM_ReadBuffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sram.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>TFTLCD_GPIO_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, tftlcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TFTLCD_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
</UL>

<P><STRONG><a name="[354]"></a>TFTLCD_FSMC_Init</STRONG> (Thumb, 126 bytes, Stack size 120 bytes, tftlcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TFTLCD_FSMC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
</UL>

<P><STRONG><a name="[356]"></a>LCD_WriteCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tftlcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmdData
</UL>

<P><STRONG><a name="[357]"></a>LCD_WriteData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tftlcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmdData
</UL>

<P><STRONG><a name="[355]"></a>LCD_WriteCmdData</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, tftlcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
</UL>

<P><STRONG><a name="[a38]"></a>LCD_RGBColor_Change</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tftlcd.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>LCD_WriteData_Color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tftlcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrowSign
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFRONT_COLOR
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine16BPP
</UL>

<P><STRONG><a name="[35f]"></a>LCD_ReadData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tftlcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
</UL>

<P><STRONG><a name="[358]"></a>LCD_Display_Dir</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, tftlcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_Display_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
</UL>

<P><STRONG><a name="[359]"></a>LCD_Set_Window</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, tftlcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowPicture
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrowSign
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFRONT_COLOR
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine16BPP
</UL>

<P><STRONG><a name="[35a]"></a>LCD_Clear</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tftlcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Clear &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadAdjust
</UL>

<P><STRONG><a name="[307]"></a>TFTLCD_Init</STRONG> (Thumb, 720 bytes, Stack size 8 bytes, tftlcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = TFTLCD_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_FSMC_Init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_GPIO_Init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30f]"></a>LCD_Fill</STRONG> (Thumb, 92 bytes, Stack size 28 bytes, tftlcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_Fill &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>

<P><STRONG><a name="[35c]"></a>LCD_DrawPoint</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, tftlcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Circle
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[35d]"></a>LCD_DrawFRONT_COLOR</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tftlcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_DrawFRONT_COLOR &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowFontHZ
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine_Color
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>

<P><STRONG><a name="[35e]"></a>LCD_ReadPoint</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tftlcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_ReadPoint &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadData
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
</UL>

<P><STRONG><a name="[360]"></a>LCD_DrawLine</STRONG> (Thumb, 176 bytes, Stack size 68 bytes, tftlcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>

<P><STRONG><a name="[361]"></a>LCD_DrawLine_Color</STRONG> (Thumb, 172 bytes, Stack size 68 bytes, tftlcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFRONT_COLOR
</UL>

<P><STRONG><a name="[362]"></a>LCD_DrowSign</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, tftlcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_DrowSign &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadAdjust
</UL>

<P><STRONG><a name="[363]"></a>LCD_DrawRectangle</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, tftlcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[364]"></a>LCD_Draw_Circle</STRONG> (Thumb, 152 bytes, Stack size 28 bytes, tftlcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[365]"></a>LCD_ShowChar</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, tftlcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_ShowChar &rArr; LCD_DrawFRONT_COLOR &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFRONT_COLOR
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[367]"></a>LCD_Pow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tftlcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[366]"></a>LCD_ShowNum</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, tftlcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[368]"></a>LCD_ShowxNum</STRONG> (Thumb, 190 bytes, Stack size 60 bytes, tftlcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[30d]"></a>LCD_ShowString</STRONG> (Thumb, 102 bytes, Stack size 36 bytes, tftlcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawFRONT_COLOR &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[369]"></a>LCD_ShowFontHZ</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, tftlcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFRONT_COLOR
</UL>

<P><STRONG><a name="[36a]"></a>LCD_ShowPicture</STRONG> (Thumb, 92 bytes, Stack size 36 bytes, tftlcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData_Color
</UL>

<P><STRONG><a name="[36b]"></a>TOUCH_ReadData</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TOUCH_ReadData &rArr; SPI1_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadXY
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_X_MeasureY
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_X_MeasureX
</UL>

<P><STRONG><a name="[36c]"></a>TOUCH_ReadXY</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TOUCH_ReadXY &rArr; TOUCH_ReadData &rArr; SPI1_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadAdjust
</UL>

<P><STRONG><a name="[36d]"></a>TOUCH_ReadAdjust</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TOUCH_ReadAdjust &rArr; TOUCH_ReadXY &rArr; TOUCH_ReadData &rArr; SPI1_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadXY
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrowSign
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Adjust
</UL>

<P><STRONG><a name="[36e]"></a>TOUCH_Adjust</STRONG> (Thumb, 424 bytes, Stack size 56 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TOUCH_Adjust &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; delay_ms &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadAdjust
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Init
</UL>

<P><STRONG><a name="[308]"></a>TOUCH_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = TOUCH_Init &rArr; TOUCH_Adjust &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; delay_ms &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Adjust
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[375]"></a>TOUCH_Scan</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, touch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadXY
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[306]"></a>BEEP_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BEEP_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[378]"></a>SD_SPI_ReadWriteByte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_SPI_ReadWriteByte &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendBlock
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RecvData
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetResponse
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReady
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
</UL>

<P><STRONG><a name="[379]"></a>SD_SPI_SpeedLow</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_SPI_SpeedLow &rArr; SPI2_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[37a]"></a>SD_SPI_SpeedHigh</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_SPI_SpeedHigh &rArr; SPI2_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[37b]"></a>SD_SPI_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_SPI_Init &rArr; SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[37c]"></a>SD_DisSelect</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_DisSelect &rArr; SD_SPI_ReadWriteByte &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCSD
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCID
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Select
</UL>

<P><STRONG><a name="[37d]"></a>SD_WaitReady</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendBlock
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Select
</UL>

<P><STRONG><a name="[37e]"></a>SD_Select</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_Select &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReady
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>

<P><STRONG><a name="[37f]"></a>SD_GetResponse</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_GetResponse &rArr; SD_SPI_ReadWriteByte &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RecvData
</UL>

<P><STRONG><a name="[380]"></a>SD_RecvData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_RecvData &rArr; SD_GetResponse &rArr; SD_SPI_ReadWriteByte &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetResponse
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_ReadWriteByte
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCSD
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCID
</UL>

<P><STRONG><a name="[381]"></a>SD_SendBlock</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_SendBlock &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReady
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_ReadWriteByte
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[382]"></a>SD_SendCmd</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Select
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCSD
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCID
</UL>

<P><STRONG><a name="[383]"></a>SD_GetCID</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RecvData
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
</UL>

<P><STRONG><a name="[384]"></a>SD_GetCSD</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SD_GetCSD &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RecvData
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetSectorCount
</UL>

<P><STRONG><a name="[385]"></a>SD_GetSectorCount</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_GetSectorCount &rArr; SD_GetCSD &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[310]"></a>SD_Init</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_Init &rArr; SD_SPI_Init &rArr; SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_SpeedHigh
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_SpeedLow
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[386]"></a>SD_ReadDisk</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_ReadDisk &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RecvData
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[387]"></a>SD_WriteDisk</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_WriteDisk &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendBlock
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[388]"></a>delay_osschedlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = delay_osschedlock &rArr; OSSchedLock &rArr; OS_SchedLockTimeMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[38a]"></a>delay_osschedunlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[38c]"></a>delay_ostimedly</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = delay_ostimedly &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[39]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick &rArr; OS_IntQPost &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[302]"></a>SysTick_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[341]"></a>delay_us</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_osschedunlock
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_osschedlock
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_WAKEUP
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_PowerDown
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[30e]"></a>delay_ms</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = delay_ms &rArr; delay_us &rArr; delay_osschedunlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ostimedly
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Adjust
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[2e4]"></a>_sys_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[d5]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[304]"></a>USART1_Init</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART1_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>USART1_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a0]"></a>mymemcpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mymemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
</UL>

<P><STRONG><a name="[39a]"></a>mymemset</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
</UL>

<P><STRONG><a name="[4]"></a>my_mem_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = my_mem_init &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>my_mem_perused</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_mem_perused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[39e]"></a>my_mem_malloc</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>

<P><STRONG><a name="[39c]"></a>my_mem_free</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>

<P><STRONG><a name="[39b]"></a>myfree</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_free
</UL>

<P><STRONG><a name="[39d]"></a>mymalloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_Init
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_TTFFont
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_alloc
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_Memory
</UL>

<P><STRONG><a name="[39f]"></a>myrealloc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, malloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_realloc
</UL>

<P><STRONG><a name="[3a1]"></a>BSP_CPU_ClkFreq</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS32_to_uSec
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>

<P><STRONG><a name="[3a2]"></a>CPU_TS_TmrInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrFreqSet
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
</UL>

<P><STRONG><a name="[3de]"></a>CPU_TS_TmrRd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStop
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStart
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Get32
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPendAbort
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPendAbort
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPendAbort
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendAbort
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[3a4]"></a>CPU_TS32_to_uSec</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[a39]"></a>ASCII_IsAlpha</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)

<P><STRONG><a name="[3d2]"></a>ASCII_IsAlphaNum</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32
</UL>

<P><STRONG><a name="[3d4]"></a>ASCII_IsLower</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32
</UL>

<P><STRONG><a name="[a3a]"></a>ASCII_IsUpper</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)

<P><STRONG><a name="[3d3]"></a>ASCII_IsDig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32
</UL>

<P><STRONG><a name="[a3b]"></a>ASCII_IsDigOct</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)

<P><STRONG><a name="[3d1]"></a>ASCII_IsDigHex</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32
</UL>

<P><STRONG><a name="[a3c]"></a>ASCII_IsBlank</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)

<P><STRONG><a name="[3d0]"></a>ASCII_IsSpace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32
</UL>

<P><STRONG><a name="[3cc]"></a>ASCII_IsPrint</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_FmtNbr_Int32
</UL>

<P><STRONG><a name="[a3d]"></a>ASCII_IsGraph</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)

<P><STRONG><a name="[a3e]"></a>ASCII_IsPunct</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)

<P><STRONG><a name="[a3f]"></a>ASCII_IsCtrl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)

<P><STRONG><a name="[3c1]"></a>ASCII_ToLower</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_CmpIgnoreCase_N
</UL>

<P><STRONG><a name="[3a7]"></a>ASCII_ToUpper</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_Cmp
</UL>

<P><STRONG><a name="[3a6]"></a>ASCII_Cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_ToUpper
</UL>

<P><STRONG><a name="[a40]"></a>Mem_Init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lib_mem.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>Mem_Set</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lib_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mem_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Clr
</UL>

<P><STRONG><a name="[3a8]"></a>Mem_Clr</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, lib_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
</UL>

<P><STRONG><a name="[3aa]"></a>Mem_Move</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Copy
</UL>

<P><STRONG><a name="[a41]"></a>Mem_Cmp</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, lib_mem.o(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>Mem_HeapAlloc</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegCalcTotSize
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegAlloc
</UL>

<P><STRONG><a name="[3af]"></a>Mem_SegGetSizeRem</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_HeapGetSizeRem
</UL>

<P><STRONG><a name="[3b0]"></a>Mem_HeapGetSizeRem</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegGetSizeRem
</UL>

<P><STRONG><a name="[3b2]"></a>Mem_PoolClr</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_PoolCreate
</UL>

<P><STRONG><a name="[3b1]"></a>Mem_PoolCreate</STRONG> (Thumb, 838 bytes, Stack size 120 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_PoolClr
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegCalcTotSize
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegAlloc
</UL>

<P><STRONG><a name="[3b3]"></a>Mem_PoolBlkGetNbrAvail</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[3b4]"></a>Mem_PoolBlkGet</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[3b5]"></a>Mem_PoolBlkGetUsedAtIx</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[3b6]"></a>Mem_PoolBlkFree</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[3b7]"></a>Mem_PoolBlkIxGet</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[3b9]"></a>Str_Len_N</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameSet
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Str_N
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Char_Last_N
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Len
</UL>

<P><STRONG><a name="[3b8]"></a>Str_Len</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Len_N
</UL>

<P><STRONG><a name="[3bb]"></a>Str_Copy_N</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameSet
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameGet
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Copy
</UL>

<P><STRONG><a name="[3ba]"></a>Str_Copy</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Copy_N
</UL>

<P><STRONG><a name="[3bd]"></a>Str_Cat_N</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Cat
</UL>

<P><STRONG><a name="[3bc]"></a>Str_Cat</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Cat_N
</UL>

<P><STRONG><a name="[3bf]"></a>Str_Cmp_N</STRONG> (Thumb, 156 bytes, Stack size 28 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Str_N
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Cmp
</UL>

<P><STRONG><a name="[3be]"></a>Str_Cmp</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Cmp_N
</UL>

<P><STRONG><a name="[3c0]"></a>Str_CmpIgnoreCase_N</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_ToLower
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_CmpIgnoreCase
</UL>

<P><STRONG><a name="[3c2]"></a>Str_CmpIgnoreCase</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_CmpIgnoreCase_N
</UL>

<P><STRONG><a name="[3c4]"></a>Str_Char_N</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Char
</UL>

<P><STRONG><a name="[3c3]"></a>Str_Char</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Char_N
</UL>

<P><STRONG><a name="[3c5]"></a>Str_Char_Last_N</STRONG> (Thumb, 76 bytes, Stack size 28 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Len_N
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Char_Last
</UL>

<P><STRONG><a name="[3c6]"></a>Str_Char_Last</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Char_Last_N
</UL>

<P><STRONG><a name="[3c8]"></a>Str_Char_Replace_N</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Char_Replace
</UL>

<P><STRONG><a name="[3c7]"></a>Str_Char_Replace</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Char_Replace_N
</UL>

<P><STRONG><a name="[3c9]"></a>Str_Str_N</STRONG> (Thumb, 182 bytes, Stack size 52 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Cmp_N
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Len_N
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Str
</UL>

<P><STRONG><a name="[3ca]"></a>Str_Str</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Str_N
</UL>

<P><STRONG><a name="[3cd]"></a>Str_FmtNbr_Int32U</STRONG> (Thumb, 46 bytes, Stack size 56 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_FmtNbr_Int32
</UL>

<P><STRONG><a name="[3ce]"></a>Str_FmtNbr_Int32S</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_FmtNbr_Int32
</UL>

<P><STRONG><a name="[3d5]"></a>Str_ParseNbr_Int32U</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32
</UL>

<P><STRONG><a name="[3d6]"></a>Str_ParseNbr_Int32S</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32
</UL>

<P><STRONG><a name="[3ab]"></a>Mem_Copy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, lib_mem_a.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Move
</UL>

<P><STRONG><a name="[3d7]"></a>CPU_NameClr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cpu_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = CPU_NameClr &rArr; Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Clr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameInit
</UL>

<P><STRONG><a name="[2f8]"></a>CPU_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpu_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = CPU_Init &rArr; CPU_TS_Init &rArr; CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[3db]"></a>CPU_SW_Exception</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrFreqGet
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameSet
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameGet
</UL>

<P><STRONG><a name="[3da]"></a>CPU_NameGet</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SW_Exception
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Copy_N
</UL>

<P><STRONG><a name="[3dc]"></a>CPU_NameSet</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SW_Exception
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Copy_N
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Len_N
</UL>

<P><STRONG><a name="[3dd]"></a>CPU_TS_Get32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>

<P><STRONG><a name="[a42]"></a>CPU_TS_Update</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpu_core.o(.text), UNUSED)

<P><STRONG><a name="[3df]"></a>CPU_TS_TmrFreqGet</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SW_Exception
</UL>

<P><STRONG><a name="[3a3]"></a>CPU_TS_TmrFreqSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>

<P><STRONG><a name="[3e0]"></a>CPU_CntLeadZeros08</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>

<P><STRONG><a name="[3e2]"></a>CPU_CntLeadZeros16</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>

<P><STRONG><a name="[3e3]"></a>CPU_CntLeadZeros32</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>

<P><STRONG><a name="[3e9]"></a>CPU_CntLeadZeros64</STRONG> (Thumb, 188 bytes, Stack size 12 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros64
</UL>

<P><STRONG><a name="[3e4]"></a>CPU_CntTrailZeros08</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros
</UL>

<P><STRONG><a name="[3e6]"></a>CPU_CntTrailZeros16</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros
</UL>

<P><STRONG><a name="[3e7]"></a>CPU_CntTrailZeros32</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros
</UL>

<P><STRONG><a name="[3e8]"></a>CPU_CntTrailZeros64</STRONG> (Thumb, 62 bytes, Stack size 28 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros64
</UL>

<P><STRONG><a name="[a43]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[a44]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinCfg
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinYield
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameSet
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameGet
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_PoolBlkIxGet
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_PoolBlkFree
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_PoolBlkGetUsedAtIx
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_PoolBlkGet
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_PoolBlkGetNbrAvail
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_PoolCreate
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegGetSizeRem
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_HeapAlloc
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_TTFFont
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskTimeQuantaSet
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemSet
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPendAbort
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGetID
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPendAbort
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQFlush
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPendAbort
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendAbort
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
</UL>

<P><STRONG><a name="[2fe]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinCfg
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinYield
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameSet
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameGet
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_PoolBlkIxGet
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_PoolBlkFree
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_PoolBlkGetUsedAtIx
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_PoolBlkGet
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_PoolBlkGetNbrAvail
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_PoolCreate
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_SegGetSizeRem
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_HeapAlloc
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_TTFFont
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskTimeQuantaSet
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemSet
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPendAbort
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGetID
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPendAbort
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQFlush
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPendAbort
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendAbort
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
</UL>

<P><STRONG><a name="[a45]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[a46]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[3e1]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros32
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros16
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros08
</UL>

<P><STRONG><a name="[3e5]"></a>CPU_CntTrailZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros32
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros16
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros08
</UL>

<P><STRONG><a name="[a47]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[3fc]"></a>OSCfg_Init</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, os_cfg_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3ea]"></a>OS_IdleTask</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_IdleTask &rArr; OSIdleTaskHook
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIdleTaskHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[3ec]"></a>OS_IdleTaskInit</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_IdleTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3ef]"></a>OS_RdyListInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[311]"></a>OSInit</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_TmrInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInit
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemInit
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInit
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexInit
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgPoolInit
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTaskInit
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dbg_Init
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHook
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInit
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCfg_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38e]"></a>OSIntEnter</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[390]"></a>OSIntExit</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[3fe]"></a>OSSched</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinYield
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPendAbort
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPendAbort
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPendAbort
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendAbort
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[3ff]"></a>OS_SchedLockTimeMeasStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_SchedLockTimeMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[389]"></a>OSSchedLock</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSchedLock &rArr; OS_SchedLockTimeMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStart
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_osschedlock
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[400]"></a>OS_SchedLockTimeMeasStop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_SchedLockTimeMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[38b]"></a>OSSchedUnlock</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedLockTimeMeasStop
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_osschedunlock
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[2fa]"></a>OSSchedRoundRobinCfg</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSchedRoundRobinCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[402]"></a>OS_RdyListMoveHeadToTail</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListMoveHeadToTail
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedRoundRobinYield
</UL>

<P><STRONG><a name="[401]"></a>OSSchedRoundRobinYield</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListMoveHeadToTail
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[312]"></a>OSStart</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSStart &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a48]"></a>OSVersion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[40b]"></a>OS_PendDbgNameAdd</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PendDbgNameAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[40a]"></a>OS_PendListInsertPrio</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[409]"></a>OS_PendDataInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[404]"></a>OS_RdyListRemove</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[406]"></a>OS_TaskBlock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[408]"></a>OS_Pend</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDataInit
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
</UL>

<P><STRONG><a name="[40d]"></a>OS_PendListRemove1</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>

<P><STRONG><a name="[40c]"></a>OS_PendListRemove</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[415]"></a>OS_PendAbort1</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
</UL>

<P><STRONG><a name="[411]"></a>OS_RdyListInsertHead</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>

<P><STRONG><a name="[410]"></a>OS_RdyListInsertTail</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertTail
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[40e]"></a>OS_RdyListInsert</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
</UL>

<P><STRONG><a name="[412]"></a>OS_TaskRdy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OS_TaskRdy &rArr; OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[414]"></a>OS_PendAbort</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort1
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPendAbort
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPendAbort
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPendAbort
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendAbort
</UL>

<P><STRONG><a name="[41b]"></a>OS_PendDbgNameRemove</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PendDbgNameRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[416]"></a>OS_PendListChangePrio</STRONG> (Thumb, 70 bytes, Stack size 28 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove1
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[41e]"></a>OS_PendListInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemClr
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QClr
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexClr
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagClr
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
</UL>

<P><STRONG><a name="[a49]"></a>OS_PendListInsertHead</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[418]"></a>OS_PendObjDel1</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
</UL>

<P><STRONG><a name="[417]"></a>OS_PendObjDel</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel1
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[41a]"></a>OS_Post1</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_Post1
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[419]"></a>OS_Post</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post1
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameRemove
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
</UL>

<P><STRONG><a name="[301]"></a>OS_Sched0</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched0
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_TTFFont
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQFlush
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[41c]"></a>OS_SchedRoundRobin</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OS_SchedRoundRobin &rArr; OS_RdyListMoveHeadToTail
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListMoveHeadToTail
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[3fb]"></a>OS_Dbg_Init</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, os_dbg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[41f]"></a>OS_FlagDbgListAdd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
</UL>

<P><STRONG><a name="[41d]"></a>OSFlagCreate</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagDbgListAdd
</UL>

<P><STRONG><a name="[420]"></a>OS_FlagClr</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[422]"></a>OS_FlagDbgListRemove</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[421]"></a>OSFlagDel</STRONG> (Thumb, 594 bytes, Stack size 48 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagDbgListRemove
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagClr
</UL>

<P><STRONG><a name="[423]"></a>OS_FlagBlock</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[424]"></a>OSFlagPend</STRONG> (Thumb, 1488 bytes, Stack size 80 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
</UL>

<P><STRONG><a name="[425]"></a>OSFlagPendAbort</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>

<P><STRONG><a name="[426]"></a>OSFlagPendGetFlagsRdy</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[427]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OS_FlagTaskRdy &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
</UL>

<P><STRONG><a name="[428]"></a>OS_FlagPost</STRONG> (Thumb, 570 bytes, Stack size 56 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OS_FlagPost &rArr; OS_FlagTaskRdy &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>

<P><STRONG><a name="[429]"></a>OSFlagPost</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
</UL>

<P><STRONG><a name="[3f0]"></a>OS_FlagInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_flag.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[42a]"></a>OS_IntQPost</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, os_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OS_IntQPost &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>

<P><STRONG><a name="[42b]"></a>OS_IntQRePost</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, os_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_IntQRePost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagPost
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
</UL>

<P><STRONG><a name="[431]"></a>OS_IntQTask</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, os_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_IntQTask &rArr; OS_IntQRePost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioRemove
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_int.o(.text)
</UL>
<P><STRONG><a name="[3f7]"></a>OS_IntQTaskInit</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, os_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OS_IntQTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[433]"></a>OS_MemDbgListAdd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
</UL>

<P><STRONG><a name="[432]"></a>OSMemCreate</STRONG> (Thumb, 288 bytes, Stack size 64 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemDbgListAdd
</UL>

<P><STRONG><a name="[434]"></a>OSMemGet</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[435]"></a>OSMemPut</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[3f1]"></a>OS_MemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[436]"></a>OS_MsgPoolCreate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MsgPoolCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgPoolInit
</UL>

<P><STRONG><a name="[3f2]"></a>OS_MsgPoolInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, os_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_MsgPoolInit &rArr; OS_MsgPoolCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgPoolCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[443]"></a>OS_MsgQFreeAll</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_MsgQFreeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQFlush
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QClr
</UL>

<P><STRONG><a name="[440]"></a>OS_MsgQInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_msg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QClr
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[448]"></a>OS_MsgQGet</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, os_msg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[44a]"></a>OS_MsgQPut</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, os_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_MsgQPut
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
</UL>

<P><STRONG><a name="[438]"></a>OS_MutexDbgListAdd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>

<P><STRONG><a name="[437]"></a>OSMutexCreate</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexDbgListAdd
</UL>

<P><STRONG><a name="[439]"></a>OS_MutexClr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[43b]"></a>OS_MutexDbgListRemove</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[43a]"></a>OSMutexDel</STRONG> (Thumb, 842 bytes, Stack size 48 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexDbgListRemove
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexClr
</UL>

<P><STRONG><a name="[43c]"></a>OSMutexPend</STRONG> (Thumb, 706 bytes, Stack size 64 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[43d]"></a>OSMutexPendAbort</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>

<P><STRONG><a name="[43e]"></a>OSMutexPost</STRONG> (Thumb, 564 bytes, Stack size 40 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>

<P><STRONG><a name="[3f3]"></a>OS_MutexInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3ee]"></a>OS_PrioInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_prio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3fd]"></a>OS_PrioGetHighest</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_prio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[40f]"></a>OS_PrioInsert</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_prio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PrioInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
</UL>

<P><STRONG><a name="[405]"></a>OS_PrioRemove</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, os_prio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTask
</UL>

<P><STRONG><a name="[441]"></a>OS_QDbgListAdd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[43f]"></a>OSQCreate</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QDbgListAdd
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
</UL>

<P><STRONG><a name="[442]"></a>OS_QClr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQFreeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
</UL>

<P><STRONG><a name="[445]"></a>OS_QDbgListRemove</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
</UL>

<P><STRONG><a name="[444]"></a>OSQDel</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QDbgListRemove
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QClr
</UL>

<P><STRONG><a name="[446]"></a>OSQFlush</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQFreeAll
</UL>

<P><STRONG><a name="[447]"></a>OSQPend</STRONG> (Thumb, 538 bytes, Stack size 72 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQGet
</UL>

<P><STRONG><a name="[449]"></a>OSQPendAbort</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>

<P><STRONG><a name="[42c]"></a>OS_QPost</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_QPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQPut
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[44b]"></a>OSQPost</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QPost
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
</UL>

<P><STRONG><a name="[3f4]"></a>OS_QInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_q.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[44d]"></a>OS_SemDbgListAdd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_sem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[44c]"></a>OSSemCreate</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemDbgListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
</UL>

<P><STRONG><a name="[44e]"></a>OS_SemClr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>

<P><STRONG><a name="[450]"></a>OS_SemDbgListRemove</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>

<P><STRONG><a name="[44f]"></a>OSSemDel</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemDbgListRemove
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemClr
</UL>

<P><STRONG><a name="[451]"></a>OSSemPend</STRONG> (Thumb, 504 bytes, Stack size 64 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_WaitKey
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_WaitEvent
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
</UL>

<P><STRONG><a name="[452]"></a>OSSemPendAbort</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>

<P><STRONG><a name="[42d]"></a>OS_SemPost</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[453]"></a>OSSemPost</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_StoreKey
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_SignalEvent
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
</UL>

<P><STRONG><a name="[454]"></a>OSSemSet</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[3f5]"></a>OS_SemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_sem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[455]"></a>OSStatReset</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, os_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSStatReset
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrResetPeak
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListResetPeak
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[2f9]"></a>OSStatTaskCPUUsageInit</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, os_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = OSStatTaskCPUUsageInit &rArr; OSTaskSuspend &rArr; OS_TaskSuspend &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[45a]"></a>OS_StatTask</STRONG> (Thumb, 888 bytes, Stack size 24 bytes, os_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = OS_StatTask &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskHook
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_stat.o(.text)
</UL>
<P><STRONG><a name="[3f9]"></a>OS_StatTaskInit</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, os_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_StatTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[45d]"></a>OSTaskChangePrio</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[461]"></a>OS_TaskDbgListAdd</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[45e]"></a>OS_TaskInitTCB</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_TaskInitTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[2ff]"></a>OSTaskCreate</STRONG> (Thumb, 616 bytes, Stack size 80 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskDbgListAdd
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQTaskInit
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
</UL>

<P><STRONG><a name="[464]"></a>OS_TaskDbgListRemove</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[462]"></a>OSTaskDel</STRONG> (Thumb, 424 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskDbgListRemove
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQFreeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[465]"></a>OSTaskQFlush</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQFreeAll
</UL>

<P><STRONG><a name="[466]"></a>OSTaskQPend</STRONG> (Thumb, 554 bytes, Stack size 40 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQGet
</UL>

<P><STRONG><a name="[467]"></a>OSTaskQPendAbort</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>

<P><STRONG><a name="[42e]"></a>OS_TaskQPost</STRONG> (Thumb, 526 bytes, Stack size 40 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OS_TaskQPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQPut
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[468]"></a>OSTaskQPost</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskQPost
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
</UL>

<P><STRONG><a name="[469]"></a>OSTaskRegGet</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[46a]"></a>OSTaskRegGetID</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[46b]"></a>OSTaskRegSet</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[42f]"></a>OS_TaskResume</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OS_TaskResume &rArr; OS_TaskRdy &rArr; OS_RdyListInsert &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[459]"></a>OSTaskResume</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = OSTaskResume &rArr; OS_IntQPost &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
</UL>

<P><STRONG><a name="[46c]"></a>OSTaskSemPend</STRONG> (Thumb, 550 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[46d]"></a>OSTaskSemPendAbort</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>

<P><STRONG><a name="[430]"></a>OS_TaskSemPost</STRONG> (Thumb, 1224 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[46e]"></a>OSTaskSemPost</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
</UL>

<P><STRONG><a name="[46f]"></a>OSTaskSemSet</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[45c]"></a>OSTaskStkChk</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[300]"></a>OS_TaskSuspend</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OS_TaskSuspend &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQRePost
</UL>

<P><STRONG><a name="[458]"></a>OSTaskSuspend</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_TaskSuspend &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
</UL>

<P><STRONG><a name="[470]"></a>OSTaskTimeQuantaSet</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[3f6]"></a>OS_TaskInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[83]"></a>OS_TaskReturn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_RdyListRemove &rArr; OS_PrioRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(.text)
</UL>
<P><STRONG><a name="[413]"></a>OS_TickListRemove</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_TickListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendAbort
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[472]"></a>OS_TickListUpdate</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OS_TickListUpdate &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskRdy
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[473]"></a>OS_TickTask</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = OS_TickTask &rArr; OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tick.o(.text)
</UL>
<P><STRONG><a name="[474]"></a>OS_TickListInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_tick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
</UL>

<P><STRONG><a name="[3f8]"></a>OS_TickTaskInit</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_TickTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[407]"></a>OS_TickListInsert</STRONG> (Thumb, 502 bytes, Stack size 36 bytes, os_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OS_TickListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[456]"></a>OS_TickListResetPeak</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_tick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[38d]"></a>OSTimeDly</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ostimedly
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Delay
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[2e6]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 480 bytes, Stack size 56 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led1_task
</UL>

<P><STRONG><a name="[475]"></a>OSTimeDlyResume</STRONG> (Thumb, 466 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[476]"></a>OSTimeGet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
</UL>

<P><STRONG><a name="[477]"></a>OSTimeSet</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[38f]"></a>OSTimeTick</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OS_IntQPost &rArr; OS_PrioInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IntQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[47a]"></a>OS_TmrDbgListAdd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
</UL>

<P><STRONG><a name="[479]"></a>OSTmrCreate</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrDbgListAdd
</UL>

<P><STRONG><a name="[47e]"></a>OS_TmrClr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[47d]"></a>OS_TmrUnlink</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_TmrUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[47c]"></a>OS_TmrDbgListRemove</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[47b]"></a>OSTmrDel</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrDbgListRemove
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrClr
</UL>

<P><STRONG><a name="[47f]"></a>OSTmrRemainGet</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[481]"></a>OS_TmrLink</STRONG> (Thumb, 196 bytes, Stack size 20 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_TmrLink
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
</UL>

<P><STRONG><a name="[480]"></a>OSTmrStart</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLink
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
</UL>

<P><STRONG><a name="[482]"></a>OSTmrStateGet</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[483]"></a>OSTmrStop</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
</UL>

<P><STRONG><a name="[484]"></a>OS_TmrTask</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = OS_TmrTask &rArr; OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLink
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(.text)
</UL>
<P><STRONG><a name="[3fa]"></a>OS_TmrInit</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OS_TmrInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[457]"></a>OS_TmrResetPeak</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[3eb]"></a>OSIdleTaskHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSIdleTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
</UL>

<P><STRONG><a name="[3ed]"></a>OSInitHook</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[45b]"></a>OSStatTaskHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSStatTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[460]"></a>OSTaskCreateHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[463]"></a>OSTaskDelHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskDelHook
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[471]"></a>OSTaskReturnHook</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskReturnHook
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[45f]"></a>OSTaskStkInit</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[d6]"></a>OSTaskSwHook</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(CODE)
</UL>
<P><STRONG><a name="[478]"></a>OSTimeTickHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[485]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[a4a]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)

<P><STRONG><a name="[8af]"></a>GUI_TOUCH_X_ActivateX</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x_touch_analog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[8b0]"></a>GUI_TOUCH_X_ActivateY</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x_touch_analog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[486]"></a>GUI_TOUCH_X_MeasureX</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gui_x_touch_analog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_TOUCH_X_MeasureX &rArr; TOUCH_ReadData &rArr; SPI1_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[487]"></a>GUI_TOUCH_X_MeasureY</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gui_x_touch_analog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_TOUCH_X_MeasureY &rArr; TOUCH_ReadData &rArr; SPI1_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[488]"></a>GUI_X_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, guiconf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_X_Config &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefaultFont
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_SetAvBlockSize
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AssignMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[496]"></a>LCD_X_Config</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, lcdconf_flexcolor_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = LCD_X_Config &rArr; GUI_DEVICE_CreateAndLink &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_SetOrientation
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Calibrate
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
</UL>
<BR>[Called By]<UL><LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[495]"></a>LCD_X_DisplayDriver</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcdconf_flexcolor_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_X_DisplayDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetLUTEntry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Off
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_On
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
</UL>

<P><STRONG><a name="[49c]"></a>GUI_X_GetTime</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gui_x_ucosiii.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GUI_X_GetTime &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
</UL>

<P><STRONG><a name="[49d]"></a>GUI_X_Delay</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gui_x_ucosiii.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = GUI_X_Delay &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_ExecIdle
</UL>

<P><STRONG><a name="[2c]"></a>GUI_X_ExecIdle</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gui_x_ucosiii.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = GUI_X_ExecIdle &rArr; GUI_X_Delay &rArr; OSTimeDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_waitevent.o(.data)
</UL>
<P><STRONG><a name="[49e]"></a>GUI_X_InitOS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_x_ucosiii.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = GUI_X_InitOS &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
</UL>

<P><STRONG><a name="[49f]"></a>GUI_X_Lock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gui_x_ucosiii.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[4a0]"></a>GUI_X_Unlock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_x_ucosiii.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GUI_X_Unlock &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
</UL>

<P><STRONG><a name="[871]"></a>GUI_X_GetTaskId</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_x_ucosiii.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[4a1]"></a>GUI_X_WaitEvent</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gui_x_ucosiii.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[4a2]"></a>GUI_X_SignalEvent</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_x_ucosiii.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[4a3]"></a>GUI_X_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui_x_ucosiii.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = GUI_X_Init &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInit
</UL>

<P><STRONG><a name="[4a5]"></a>GUI_X_GetKey</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_x_ucosiii.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInit
</UL>

<P><STRONG><a name="[4a6]"></a>GUI_X_WaitKey</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gui_x_ucosiii.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInit
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[4a7]"></a>GUI_X_StoreKey</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gui_x_ucosiii.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[a4b]"></a>GUI_X_Log</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x_ucosiii.o(.text), UNUSED)

<P><STRONG><a name="[a4c]"></a>GUI_X_Warn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x_ucosiii.o(.text), UNUSED)

<P><STRONG><a name="[854]"></a>GUI_X_ErrorOut</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_x_ucosiii.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ErrorOut
</UL>

<P><STRONG><a name="[4a8]"></a>Create_TTFFont</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, ttffontcreate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = Create_TTFFont &rArr; GUI_TTF_CreateFont &rArr; _CreateFont &rArr; FTC_ImageCache_Lookup &rArr; FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched0
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TTF_CreateFont
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STemWin_TTFFont_Demo
</UL>

<P><STRONG><a name="[2f6]"></a>STemWin_TTFFont_Demo</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, ttffontcreate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + Unknown Stack Size
<LI>Call Chain = STemWin_TTFFont_Demo &rArr; GUI_Delay &rArr; GUI_Exec &rArr; GUI_Exec1 &rArr; WM_Exec &rArr; _DrawNext &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_TTFFont
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emwindemo_task
</UL>

<P><STRONG><a name="[4da]"></a>disk_status</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[4b3]"></a>disk_initialize</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[4b4]"></a>disk_read</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = disk_read &rArr; SD_Init &rArr; SD_SPI_Init &rArr; SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[4b5]"></a>disk_write</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[4b6]"></a>disk_ioctl</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = disk_ioctl &rArr; SD_GetSectorCount &rArr; SD_GetCSD &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetSectorCount
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[4dc]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4b7]"></a>ff_memalloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ff_memalloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4b8]"></a>ff_memfree</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ff_memfree &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4c2]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[4bd]"></a>get_fat</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[4be]"></a>put_fat</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[30c]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a9]"></a>f_open</STRONG> (Thumb, 406 bytes, Stack size 96 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_TTFFont
</UL>

<P><STRONG><a name="[4aa]"></a>f_read</STRONG> (Thumb, 448 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_TTFFont
</UL>

<P><STRONG><a name="[4df]"></a>f_write</STRONG> (Thumb, 490 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[4e0]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[4ab]"></a>f_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_TTFFont
</UL>

<P><STRONG><a name="[4e1]"></a>f_lseek</STRONG> (Thumb, 684 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[4e2]"></a>f_opendir</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_ScanFiles
</UL>

<P><STRONG><a name="[4e3]"></a>f_closedir</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[4e4]"></a>f_readdir</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_ScanFiles
</UL>

<P><STRONG><a name="[4e5]"></a>f_stat</STRONG> (Thumb, 84 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[4e6]"></a>f_getfree</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_GetFree
</UL>

<P><STRONG><a name="[4e7]"></a>f_truncate</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[4e8]"></a>f_unlink</STRONG> (Thumb, 190 bytes, Stack size 112 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[4e9]"></a>f_mkdir</STRONG> (Thumb, 380 bytes, Stack size 88 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[4ea]"></a>f_chmod</STRONG> (Thumb, 112 bytes, Stack size 88 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[4eb]"></a>f_rename</STRONG> (Thumb, 290 bytes, Stack size 144 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[4ec]"></a>f_utime</STRONG> (Thumb, 110 bytes, Stack size 80 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[4ed]"></a>f_getlabel</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[4ee]"></a>f_setlabel</STRONG> (Thumb, 482 bytes, Stack size 88 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[4ef]"></a>f_mkfs</STRONG> (Thumb, 1578 bytes, Stack size 112 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[4f0]"></a>f_gets</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[4f2]"></a>f_putc</STRONG> (Thumb, 64 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[4f3]"></a>f_puts</STRONG> (Thumb, 74 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[4f4]"></a>f_printf</STRONG> (Thumb, 674 bytes, Stack size 160 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[30b]"></a>FATFS_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, fatfs_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FATFS_Init &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f7]"></a>char_upper</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fatfs_app.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_ScanFilesType
</UL>

<P><STRONG><a name="[4f5]"></a>FATFS_ScanFilesType</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, fatfs_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_upper
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[4f9]"></a>FATFS_ScanFiles</STRONG> (Thumb, 176 bytes, Stack size 96 bytes, fatfs_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[4fa]"></a>FATFS_GetFree</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, fatfs_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[4d2]"></a>ff_convert</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cc936.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[4c6]"></a>ff_wtoupper</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, cc936.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[5af]"></a>ft_mem_qalloc</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft_mem_qalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Copy
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_QAlloc
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_read_vals
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_OpenGzip
</UL>

<P><STRONG><a name="[505]"></a>ft_mem_alloc</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_qalloc
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_face_globals_get_metrics
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_face_globals_new
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SNode_New
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_sbit_copy_bitmap
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_INode_New
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_cmap_node_new
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_RegisterCache
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_New
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_Library
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Add_Module
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Open_Face
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_Size
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_GlyphSlot
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_alloc_bitmap
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_New
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Alloc
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_qrealloc
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_add_renderer
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_face
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_face_init
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_strcpy
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_sid_string
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_name
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_CMap_New
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_interpret_style
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_load_font
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_start
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_insert
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_New
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_load_field
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_table_done
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallocate_t1_table
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_aux_name_load
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_extra_item_load_kerning_pairs
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_extra_item_load_font_id
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_interpret_style
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_OpenLZW
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_alloc
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_new_glyph
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_New
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNT_Face_Init
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_face_get_dll_font
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Open_Face
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parser_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_load_glyph
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_face_open
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_read_subrs
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Read_Metrics
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_charstrings
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_subrs
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_blend_axis_types
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_MM_Var
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_allocate_blend
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_Private_Dict
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_New_Parser
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_smooth_render_generic
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_raster_new
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_get_ps_name
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_open_font
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_black_new
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_globals_new
</UL>

<P><STRONG><a name="[503]"></a>ft_mem_free</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_done
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_face_globals_get_metrics
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_face_globals_free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_snode_free
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_inode_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_cmap_node_free
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_cache_done
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_RegisterCache
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_New
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_Remove
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Done
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_bitmap_assure_buffer
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Raccess_Get_DataOffsets
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Library
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_Library
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Add_Module
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Size
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_Size
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Face
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_GlyphSlot
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_GlyphSlot
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_alloc_bitmap
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_free_bitmap
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Free
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_New
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Reset
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Done_Internal
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Free
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_List_Finalize
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_qrealloc
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_Module
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_remove_renderer
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_add_renderer
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_face
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_face
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_charmaps
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_cmap_done_internal
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_size
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_done
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReleaseFrame
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_cmap_unicode_done
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_face_done
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_face_init
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_done
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_load
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_subfont_done
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_charset_load
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_charset_done
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_done_index
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_new_index
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_name_index
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_glyph_name
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Face_Done
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_free_font
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_load_font
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_glyphs
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_add_property
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_readstream
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_done
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_free
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_rehash
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Done
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_done
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_done
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hint_table_done
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_parse
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_done
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_cmap_unicode_done
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_table_release
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_table_done
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallocate_t1_table
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_table_new
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_face_done
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_done
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_phy_font_done
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_extra_item_load_kerning_pairs
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_Face_Done
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_encodings
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_bitmaps
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_metrics
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_properties
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_read_TOC
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_OpenLZW
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_done
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_stream_close
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_OpenGzip
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_stream_close
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_free
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Glyph
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_Done
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNT_Face_Done
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_font_done
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parse_sfnts
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Face_Done
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parser_init
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parser_done
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_load_glyph
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_face_done
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_read_subrs
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Read_Metrics
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Read_PFM
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Face_Done
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Done_Metrics
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_charstrings
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_subrs
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Done_Blend
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Finalize_Parser
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_New_Parser
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_done
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_free_hdmx
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_smooth_render_generic
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_raster_done
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Image
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_free_eblc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_get_ps_name
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_done_face
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_get_name
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_free_name
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_raster1_render
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_black_done
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_globals_destroy
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_done
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_table_done
</UL>

<P><STRONG><a name="[5b0]"></a>ft_mem_qrealloc</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Convert
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Copy
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_bitmap_assure_buffer
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_QRealloc
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>

<P><STRONG><a name="[508]"></a>ft_mem_realloc</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_qrealloc
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_reload
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_axis_hints_new_edge
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_axis_hints_new_segment
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_cache_init
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_cache_resize
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Raccess_Get_DataOffsets
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_CMap_Done
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CreateExtra
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_New_Internal
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Realloc
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_load
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_charset_load
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_pointers
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_new_index
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_CMap_New
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Face_Init
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_load_font
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_start
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_glyphs
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_add_property
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_add_comment
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_create_property
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_readstream
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_ensure
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_init
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_rehash
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckSubGlyphs
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckPoints
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_ensure
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_ensure
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hint_table_ensure
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_kern_pairs
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_track_kern
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_table_new
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_face_init
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_compound
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_simple
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_phy_font_load
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_extra_item_load_stem_snaps
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_extra_item_load_bitmap_info
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_load_font
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_encodings
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_bitmaps
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_metrics
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_properties
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_read_TOC
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_stack_grow
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_prefix_grow
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNT_Load_Glyph
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNT_Face_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parse_sfnts
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parse_encoding
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_read_subrs
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_fd_array
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Read_PFM
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_encoding
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_blend_design_map
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_allocate_blend
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_hdmx
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Image
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_eblc
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Range
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Range_Codes
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_load_face
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_open_font
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_get_name
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_name_entry_ascii_from_other
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_name_entry_ascii_from_ucs4
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_name_entry_ascii_from_utf16
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_hmtx
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_gasp
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_name
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_font_dir
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_raster1_render
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_table_init
</UL>

<P><STRONG><a name="[5cf]"></a>FT_List_Find</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ftbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Size
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Face
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Set_Renderer
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_remove_renderer
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Size_Done
</UL>

<P><STRONG><a name="[5f8]"></a>FT_List_Add</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ftbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Open_Face
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_Size
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_add_renderer
</UL>

<P><STRONG><a name="[a4d]"></a>FT_List_Insert</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[5f6]"></a>FT_List_Remove</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FT_List_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Size
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Face
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_remove_renderer
</UL>

<P><STRONG><a name="[5d0]"></a>FT_List_Up</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FT_List_Up
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Set_Renderer
</UL>

<P><STRONG><a name="[a4e]"></a>FT_List_Iterate</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[5b1]"></a>FT_List_Finalize</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FT_List_Finalize &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_Driver
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_face
</UL>

<P><STRONG><a name="[6cb]"></a>ft_highpow2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ftbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_face_get_kerning
</UL>

<P><STRONG><a name="[5b2]"></a>FT_Alloc</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>

<P><STRONG><a name="[5b3]"></a>FT_QAlloc</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_qalloc
</UL>

<P><STRONG><a name="[5b4]"></a>FT_Realloc</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>

<P><STRONG><a name="[5b5]"></a>FT_QRealloc</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_qrealloc
</UL>

<P><STRONG><a name="[5b6]"></a>FT_Free</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>

<P><STRONG><a name="[5df]"></a>FT_Stream_OpenMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ftbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_New
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_face_open
</UL>

<P><STRONG><a name="[5e2]"></a>FT_Stream_Close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FT_Stream_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Free
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_Face_Done
</UL>

<P><STRONG><a name="[568]"></a>FT_Stream_Seek</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT_Stream_Seek
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Raccess_Get_DataOffsets
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Raccess_Get_HeaderInfo
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Skip
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_face_init
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_load
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_subfont_load
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_encoding_load
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_charset_load
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFF_Load_FD_Select
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_access_element
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Face_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_face_get_kerning
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_slot_load_bitmap
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_rec
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_phy_font_load
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_log_font_load
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_log_font_count
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_header_load
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_Glyph_Load
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_read_TOC
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_io
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_file_reset
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_check_header
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_reset
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_check_header
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_face_get_dll_font
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_font_load
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parser_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_load_glyph
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_face_init
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_hex_to_binary
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_read_subrs
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parser_new
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_Private_Dict
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_New_Parser
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_type1_format
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Access_Glyph_Frame
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Image
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_eblc
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_get_ps_name
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_init_face
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_get_name
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_font_dir
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_table_dir
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_goto_table
</UL>

<P><STRONG><a name="[599]"></a>FT_Stream_Skip</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FT_Stream_Skip &rArr; FT_Stream_Seek
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Raccess_Get_DataOffsets
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Raccess_Get_HeaderInfo
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_load
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_new_index
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_log_font_load
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_properties
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_seek_to_table_type
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_check_header
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parser_init
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_Private_Dict
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_New_Parser
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Image
</UL>

<P><STRONG><a name="[598]"></a>FT_Stream_Pos</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ftbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_load
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_new_index
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_phy_font_load
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_init
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_face_get_dll_font
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_hex_to_binary
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parser_new
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_Private_Dict
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_loader_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_sbit_image
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_eblc
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_open_font
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_name
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_font_dir
</UL>

<P><STRONG><a name="[5b7]"></a>FT_Stream_ReadAt</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FT_Stream_ReadAt
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Read
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_load_glyph
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_any
</UL>

<P><STRONG><a name="[5b8]"></a>FT_Stream_Read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FT_Stream_Read &rArr; FT_Stream_ReadAt
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadAt
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Raccess_Get_HeaderInfo
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_Glyph_Load
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_properties
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_check_header
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_check_header
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parser_init
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_hex_to_binary
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_read_subrs
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parser_new
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_Private_Dict
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_New_Parser
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_get_ps_name
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_get_name
</UL>

<P><STRONG><a name="[553]"></a>FT_Stream_TryRead</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT_Stream_TryRead
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_readstream
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_io
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_refill
</UL>

<P><STRONG><a name="[595]"></a>FT_Stream_EnterFrame</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_qalloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExtractFrame
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_subfont_load
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_encoding_load
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_charset_load
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_new_index
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_face_get_kerning
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_slot_load_bitmap
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_rec
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_phy_font_load
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_log_font_load
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_encodings
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_bitmaps
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_face_get_dll_font
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parser_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_load_glyph
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_read_subrs
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parser_new
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Read_Metrics
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_type1_format
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Access_Glyph_Frame
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Image
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Single
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_eblc
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Range
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Range_Codes
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_get_ps_name
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_open_font
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_hmtx
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_gasp
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_name
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_font_dir
</UL>

<P><STRONG><a name="[573]"></a>FT_Stream_ExtractFrame</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FT_Stream_ExtractFrame &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFF_Load_FD_Select
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_new_index
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_access_element
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_font_load
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parser_new
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_hdmx
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_loca
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_kern
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_cmap
</UL>

<P><STRONG><a name="[570]"></a>FT_Stream_ReleaseFrame</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FT_Stream_ReleaseFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFF_Done_FD_Select
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_done_index
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_forget_element
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_font_done
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parser_done
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parser_new
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_done
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_free_hdmx
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_hdmx
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_done_loca
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_done_face
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_done_kern
</UL>

<P><STRONG><a name="[597]"></a>FT_Stream_ExitFrame</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FT_Stream_ExitFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_subfont_load
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_encoding_load
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_charset_load
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_new_index
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_face_get_kerning
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_slot_load_bitmap
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_rec
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_phy_font_load
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_log_font_load
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_encodings
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_bitmaps
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_face_get_dll_font
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parser_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_load_glyph
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_read_subrs
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parser_new
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Read_Metrics
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_type1_format
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Forget_Glyph_Frame
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Image
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Single
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_eblc
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Range
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Range_Codes
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_get_ps_name
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_open_font
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_hmtx
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_gasp
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_name
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_font_dir
</UL>

<P><STRONG><a name="[756]"></a>FT_Stream_GetChar</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ftbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Load_Composite_Glyph
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Load_Simple_Glyph
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Image
</UL>

<P><STRONG><a name="[5a0]"></a>FT_Stream_GetShort</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FT_Stream_GetShort
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_charset_load
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_encodings
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Load_Composite_Glyph
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Load_Simple_Glyph
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Load_Glyph_Header
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Image
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_eblc
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Range
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Range_Codes
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_hmtx
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_gasp
</UL>

<P><STRONG><a name="[6a5]"></a>FT_Stream_GetShortLE</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FT_Stream_GetShortLE
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_encodings
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_face_get_dll_font
</UL>

<P><STRONG><a name="[a4f]"></a>FT_Stream_GetOffset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[6a3]"></a>FT_Stream_GetLong</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FT_Stream_GetLong
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_bitmaps
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_eblc
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Range
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_open_font
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_font_dir
</UL>

<P><STRONG><a name="[6a2]"></a>FT_Stream_GetLongLE</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FT_Stream_GetLongLE
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_encodings
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_bitmaps
</UL>

<P><STRONG><a name="[594]"></a>FT_Stream_ReadChar</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT_Stream_ReadChar
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_encoding_load
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_charset_load
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFF_Load_FD_Select
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_new_index
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_check_header
</UL>

<P><STRONG><a name="[593]"></a>FT_Stream_ReadShort</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT_Stream_ReadShort
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Raccess_Get_DataOffsets
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Raccess_Get_HeaderInfo
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_encoding_load
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_charset_load
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFF_Load_FD_Select
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_new_index
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_log_font_load
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_log_font_count
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_metrics
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pfb_tag
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Image
</UL>

<P><STRONG><a name="[66a]"></a>FT_Stream_ReadShortLE</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT_Stream_ReadShortLE
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_metrics
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_check_header
</UL>

<P><STRONG><a name="[6b2]"></a>FT_Stream_ReadOffset</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT_Stream_ReadOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_log_font_load
</UL>

<P><STRONG><a name="[614]"></a>FT_Stream_ReadLong</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT_Stream_ReadLong
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Raccess_Get_DataOffsets
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_bitmaps
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_metrics
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_properties
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Range_Codes
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Const_Metrics
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_open_font
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_font_dir
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_table_dir
</UL>

<P><STRONG><a name="[69f]"></a>FT_Stream_ReadLongLE</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT_Stream_ReadLongLE
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_accel
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_bitmaps
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_metrics
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_properties
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pfb_tag
</UL>

<P><STRONG><a name="[5a6]"></a>FT_Stream_ReadFields</STRONG> (Thumb, 436 bytes, Stack size 48 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_load
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_header_load
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_accel
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_properties
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_metric
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_read_TOC
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_face_get_dll_font
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_font_load
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_load_sbit_metrics
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_eblc
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Const_Metrics
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_open_font
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_hhea
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_pclt
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_post
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_os2
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_name
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_maxp
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_generic_header
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_font_dir
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_table_dir
</UL>

<P><STRONG><a name="[590]"></a>FT_RoundFix</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ftbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_font_bbox
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_load_field
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Set_Var_Design
</UL>

<P><STRONG><a name="[a50]"></a>FT_CeilFix</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[a51]"></a>FT_FloorFix</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[a52]"></a>FT_Sqrt32</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[515]"></a>FT_MulDiv</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Add64
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_div64by32
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_multo64
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_iup_interp
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Kerning
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Request_Metrics
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_glyphs
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Load_Glyph
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hint_edges
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_scale_dim
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_get_kerning
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_slot_load
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_slot_load_bitmap
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNT_Face_Init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_Track_Kerning
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Set_MM_Design
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mm_axis_unmap
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_size_reset
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Up
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_apply
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_interpolate_strong_points
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_interpolate_normal_points
</UL>

<P><STRONG><a name="[511]"></a>FT_MulFix</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FT_MulFix
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_align_strong_points
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_reload
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Kerning
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_recompute_scaled_metrics
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Request_Metrics
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Matrix_Multiply
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_fixed_thousand
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_slot_load
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_parse_charstrings
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Transform
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Matrix_Invert
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_g
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_compute_edges
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_compute_blue_edges
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_compute_edges
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_scale_dim
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_decoder_parse_charstrings
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_slot_load
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_rec
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_slot_load_glyph
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Load_Glyph
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Set_MM_Blend
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_truetype_glyph
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Process_Simple_Glyph
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Process_Composite_Component
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_glyph_metrics
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_size_reset
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_apply
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_globals_scale_widths
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_blues_scale_zones
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_align
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_interpolate_strong_points
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_interpolate_normal_points
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_interpolate_other_points
</UL>

<P><STRONG><a name="[4fc]"></a>FT_DivFix</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Add64
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_div64by32
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_align_strong_points
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_angle_atan
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Embolden
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Tan
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Request_Metrics
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_face_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_font_matrix
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_real
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_parse_charstrings
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Select_Metrics
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Matrix_Invert
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_compute_edges
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_link_segments
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_compute_edges
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Conv_ToFixed
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_get_metrics
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parse_font_matrix
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_font_matrix
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_font_matrix
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_glyph_metrics
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_size_reset
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_find_strong_points
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_interpolate_other_points
</UL>

<P><STRONG><a name="[771]"></a>FT_SqrtFixed</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FT_SqrtFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Process_Composite_Component
</UL>

<P><STRONG><a name="[5bc]"></a>FT_Cos</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_trig_pseudo_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Embolden
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Sin
</UL>

<P><STRONG><a name="[5be]"></a>FT_Sin</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Cos
</UL>

<P><STRONG><a name="[5bf]"></a>FT_Tan</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_trig_pseudo_rotate
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
</UL>

<P><STRONG><a name="[5c0]"></a>FT_Atan2</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FT_Atan2 &rArr; ft_trig_pseudo_polarize
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_trig_pseudo_polarize
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_trig_prenorm
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Embolden
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Get_Orientation
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_init
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_compute_inflections
</UL>

<P><STRONG><a name="[5c3]"></a>FT_Vector_Unit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_trig_pseudo_rotate
</UL>

<P><STRONG><a name="[5c4]"></a>FT_Vector_Rotate</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_trig_pseudo_rotate
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_trig_prenorm
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_trig_downscale
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_From_Polar
</UL>

<P><STRONG><a name="[5c6]"></a>FT_Vector_Length</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_trig_pseudo_polarize
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_trig_prenorm
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_trig_downscale
</UL>

<P><STRONG><a name="[5c7]"></a>FT_Vector_Polarize</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_trig_pseudo_polarize
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_trig_prenorm
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_trig_downscale
</UL>

<P><STRONG><a name="[5c8]"></a>FT_Vector_From_Polar</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Embolden
</UL>

<P><STRONG><a name="[5d5]"></a>FT_Angle_Diff</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FT_Angle_Diff
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Embolden
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_compute_inflections
</UL>

<P><STRONG><a name="[763]"></a>FT_Outline_Decompose</STRONG> (Thumb, 684 bytes, Stack size 112 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FT_Outline_Decompose
</UL>
<BR>[Called By]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_convert_glyph_inner
</UL>

<P><STRONG><a name="[5c9]"></a>FT_Outline_Done_Internal</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FT_Outline_Done_Internal &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Done
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_New_Internal
</UL>

<P><STRONG><a name="[5ca]"></a>FT_Outline_New_Internal</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FT_Outline_New_Internal &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Done_Internal
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_New
</UL>

<P><STRONG><a name="[5cb]"></a>FT_Outline_New</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FT_Outline_New &rArr; FT_Outline_New_Internal &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_New_Internal
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_outline_glyph_copy
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_outline_glyph_init
</UL>

<P><STRONG><a name="[5ed]"></a>FT_Outline_Check</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FT_Outline_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Load_Glyph
</UL>

<P><STRONG><a name="[5cc]"></a>FT_Outline_Copy</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT_Outline_Copy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_outline_glyph_copy
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_outline_glyph_init
</UL>

<P><STRONG><a name="[5cd]"></a>FT_Outline_Done</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FT_Outline_Done &rArr; FT_Outline_Done_Internal &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Done_Internal
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_outline_glyph_done
</UL>

<P><STRONG><a name="[546]"></a>FT_Outline_Get_CBox</STRONG> (Thumb, 100 bytes, Stack size 28 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FT_Outline_Get_CBox
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_slot_load
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_g
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_slot_load
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_outline_glyph_bbox
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_slot_load_glyph
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Load_Glyph
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_glyph_metrics
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_smooth_render_generic
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_smooth_get_cbox
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_raster1_render
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_raster1_get_cbox
</UL>

<P><STRONG><a name="[540]"></a>FT_Outline_Translate</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FT_Outline_Translate
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_slot_load
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_g
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_outline_glyph_transform
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_slot_load_glyph
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Load_Glyph
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Load_Glyph
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_smooth_render_generic
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_smooth_transform
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_raster1_render
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_raster1_transform
</UL>

<P><STRONG><a name="[a53]"></a>FT_Outline_Reverse</STRONG> (Thumb, 122 bytes, Stack size 28 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[5ce]"></a>FT_Set_Renderer</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FT_Set_Renderer &rArr; FT_List_Up
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_List_Up
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_List_Find
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Render_Glyph_Internal
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Render
</UL>

<P><STRONG><a name="[5d2]"></a>FT_Lookup_Renderer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FT_Lookup_Renderer
</UL>
<BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Renderer
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Render_Glyph_Internal
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Render
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_set_current_renderer
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lookup_glyph_renderer
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Glyph
</UL>

<P><STRONG><a name="[5d1]"></a>FT_Outline_Render</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Lookup_Renderer
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Set_Renderer
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Get_Bitmap
</UL>

<P><STRONG><a name="[5d3]"></a>FT_Outline_Get_Bitmap</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Render
</UL>

<P><STRONG><a name="[53f]"></a>FT_Vector_Transform</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FT_Vector_Transform &rArr; FT_MulFix
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_face_init
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_slot_load
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Transform
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Load_Glyph
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_g
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Glyph_Transform
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_slot_load_glyph
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Load_Glyph
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Process_Composite_Component
</UL>

<P><STRONG><a name="[545]"></a>FT_Outline_Transform</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FT_Outline_Transform &rArr; FT_Vector_Transform &rArr; FT_MulFix
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_slot_load
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_g
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_outline_glyph_transform
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_slot_load_glyph
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Load_Glyph
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_smooth_transform
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_raster1_transform
</UL>

<P><STRONG><a name="[510]"></a>FT_Outline_Get_Orientation</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FT_Outline_Get_Orientation &rArr; FT_Atan2 &rArr; ft_trig_pseudo_polarize
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_reload
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Embolden
</UL>

<P><STRONG><a name="[5d4]"></a>FT_Outline_Embolden</STRONG> (Thumb, 370 bytes, Stack size 112 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Angle_Diff
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_From_Polar
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Atan2
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Cos
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Get_Orientation
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
</UL>

<P><STRONG><a name="[538]"></a>FT_GlyphLoader_New</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FT_GlyphLoader_New &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Add_Module
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_init
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_init
</UL>

<P><STRONG><a name="[53a]"></a>FT_GlyphLoader_Rewind</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Reset
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_builder_init
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_g
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_reset
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_init
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_init
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_loader_init
</UL>

<P><STRONG><a name="[5d6]"></a>FT_GlyphLoader_Reset</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Rewind
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Done
</UL>

<P><STRONG><a name="[53c]"></a>FT_GlyphLoader_Done</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Reset
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Add_Module
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_Driver
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_done
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_done
</UL>

<P><STRONG><a name="[5d7]"></a>FT_GlyphLoader_CreateExtra</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FT_GlyphLoader_CreateExtra &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Adjust_Points
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_slot_init
</UL>

<P><STRONG><a name="[541]"></a>FT_GlyphLoader_CheckPoints</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FT_GlyphLoader_CheckPoints &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Adjust_Points
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_builder_add_contour
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_points
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CopyPoints
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_g
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_add_contour
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_check_points
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_move_to
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_curve_to
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_line_to
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Load_Simple_Glyph
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Process_Composite_Glyph
</UL>

<P><STRONG><a name="[544]"></a>FT_GlyphLoader_CheckSubGlyphs</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FT_GlyphLoader_CheckSubGlyphs &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Adjust_Subglyphs
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_operator_seac
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_g
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1operator_seac
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Load_Composite_Glyph
</UL>

<P><STRONG><a name="[578]"></a>FT_GlyphLoader_Prepare</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT_GlyphLoader_Prepare &rArr; FT_GlyphLoader_Adjust_Subglyphs
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Adjust_Subglyphs
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Adjust_Points
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_operator_seac
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Add
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1operator_seac
</UL>

<P><STRONG><a name="[543]"></a>FT_GlyphLoader_Add</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FT_GlyphLoader_Add &rArr; FT_GlyphLoader_Prepare &rArr; FT_GlyphLoader_Adjust_Subglyphs
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_parse_charstrings
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_g
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_decoder_parse_charstrings
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_end
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_truetype_glyph
</UL>

<P><STRONG><a name="[547]"></a>FT_GlyphLoader_CopyPoints</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = FT_GlyphLoader_CopyPoints &rArr; FT_GlyphLoader_CheckPoints &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Adjust_Points
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckPoints
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_g
</UL>

<P><STRONG><a name="[56d]"></a>ft_service_list_lookup</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft_service_list_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_interface
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_driver_requester
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_get_service
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_driver_requester
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winfnt_get_service
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Get_Interface
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_get_interface
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Interface
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_get_interface
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_get_interface
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psnames_get_service
</UL>

<P><STRONG><a name="[749]"></a>ft_validator_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ft_validator_init
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_build_cmaps
</UL>

<P><STRONG><a name="[5da]"></a>ft_validator_run</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
</UL>

<P><STRONG><a name="[5dc]"></a>ft_validator_error</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ftbase.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap12_validate
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap10_validate
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap8_validate
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap6_validate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap4_validate
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap2_validate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap0_validate
</UL>

<P><STRONG><a name="[5de]"></a>FT_Stream_New</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FT_Stream_New &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Open
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_OpenMemory
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Attach_Stream
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Open_Face
</UL>

<P><STRONG><a name="[5e1]"></a>FT_Stream_Free</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FT_Stream_Free &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Close
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Attach_Stream
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Open_Face
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_face
</UL>

<P><STRONG><a name="[5e4]"></a>ft_glyphslot_free_bitmap</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ft_glyphslot_free_bitmap &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_done
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_clear
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_set_bitmap
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_glyphslot_clear
</UL>

<P><STRONG><a name="[56b]"></a>ft_glyphslot_set_bitmap</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ft_glyphslot_set_bitmap &rArr; ft_glyphslot_free_bitmap &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_free_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Glyph_Load
</UL>

<P><STRONG><a name="[5e5]"></a>ft_glyphslot_alloc_bitmap</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ft_glyphslot_alloc_bitmap &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_slot_load_bitmap
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_Glyph_Load
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Image
</UL>

<P><STRONG><a name="[5e8]"></a>FT_New_GlyphSlot</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FT_New_GlyphSlot &rArr; ft_glyphslot_init &rArr; FT_GlyphLoader_New &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_done
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_init
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Open_Face
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_GlyphSlot_Init
</UL>

<P><STRONG><a name="[5e9]"></a>FT_Done_GlyphSlot</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FT_Done_GlyphSlot &rArr; ft_glyphslot_done &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_done
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_face
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_GlyphSlot_Done
</UL>

<P><STRONG><a name="[a54]"></a>FT_Set_Transform</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[5ea]"></a>FT_Render_Glyph_Internal</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FT_Render_Glyph_Internal &rArr; FT_Set_Renderer &rArr; FT_List_Up
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Lookup_Renderer
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Set_Renderer
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Render_Glyph
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Glyph_To_Bitmap
</UL>

<P><STRONG><a name="[5eb]"></a>FT_Render_Glyph</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FT_Render_Glyph &rArr; FT_Render_Glyph_Internal &rArr; FT_Set_Renderer &rArr; FT_List_Up
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Render_Glyph_Internal
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Load_Glyph
</UL>

<P><STRONG><a name="[51b]"></a>FT_Load_Glyph</STRONG> (Thumb, 540 bytes, Stack size 48 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FT_Load_Glyph &rArr; FT_Render_Glyph &rArr; FT_Render_Glyph_Internal &rArr; FT_Set_Renderer &rArr; FT_List_Up
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Render_Glyph
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Check
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lookup_glyph_renderer
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_grid_fit_metrics
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_clear
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Transform
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_basic_family_load_glyph
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_basic_family_load_bitmap
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Load_Char
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_g
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init_blues
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init_widths
</UL>

<P><STRONG><a name="[500]"></a>FT_Get_Char_Index</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT_Get_Char_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_face_globals_compute_script_coverage
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_First_Char
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Load_Char
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init_blues
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init_widths
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_CMapCache_Lookup
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Read_PFM
</UL>

<P><STRONG><a name="[5ef]"></a>FT_Load_Char</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Load_Glyph
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Char_Index
</UL>

<P><STRONG><a name="[5f5]"></a>FT_Done_Face</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FT_Done_Face &rArr; destroy_face &rArr; FT_Done_GlyphSlot &rArr; ft_glyphslot_done &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_List_Remove
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_List_Find
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_face
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_face_node_done
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Open_Face
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Face_Done
</UL>

<P><STRONG><a name="[5f7]"></a>FT_New_Size</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FT_New_Size &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_List_Add
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_scaler_lookup_size
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Open_Face
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Size_Init
</UL>

<P><STRONG><a name="[5f9]"></a>FT_Open_Face</STRONG> (Thumb, 640 bytes, Stack size 72 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = FT_Open_Face &rArr; FT_Done_Face &rArr; destroy_face &rArr; FT_Done_GlyphSlot &rArr; ft_glyphslot_done &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_Size
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Face
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_GlyphSlot
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Free
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_New
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_List_Add
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_face
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_Memory_Face
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_Face
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Face_Init
</UL>

<P><STRONG><a name="[5fa]"></a>FT_New_Face</STRONG> (Thumb, 40 bytes, Stack size 56 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Open_Face
</UL>

<P><STRONG><a name="[5fb]"></a>FT_New_Memory_Face</STRONG> (Thumb, 50 bytes, Stack size 56 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FT_New_Memory_Face &rArr; FT_Open_Face &rArr; FT_Done_Face &rArr; destroy_face &rArr; FT_Done_GlyphSlot &rArr; ft_glyphslot_done &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Open_Face
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbFaceRequester
</UL>

<P><STRONG><a name="[5fc]"></a>FT_Attach_Stream</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Free
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_New
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Attach_File
</UL>

<P><STRONG><a name="[5fd]"></a>FT_Attach_File</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Attach_Stream
</UL>

<P><STRONG><a name="[5fe]"></a>FT_Done_Size</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FT_Done_Size &rArr; destroy_size &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_List_Remove
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_List_Find
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_size
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_face_node_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_size_node_reset
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_size_node_done
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_scaler_lookup_size
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Size_Done
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Face_Init
</UL>

<P><STRONG><a name="[602]"></a>FT_Match_Size</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FT_Match_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Request_Size
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_set_sbit_strike
</UL>

<P><STRONG><a name="[56c]"></a>ft_synthesize_vertical_metrics</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ftbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_slot_load
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Glyph_Load
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_Glyph_Load
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNT_Load_Glyph
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_slot_load_glyph
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Load_Glyph
</UL>

<P><STRONG><a name="[56a]"></a>FT_Select_Metrics</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = FT_Select_Metrics &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_recompute_scaled_metrics
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Select_Size
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_size_select
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Size_Select
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_Size_Select
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNT_Size_Select
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_size_select
</UL>

<P><STRONG><a name="[5aa]"></a>FT_Request_Metrics</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FT_Request_Metrics &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_recompute_scaled_metrics
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Request_Size
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_size_request
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_size_request
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Size_Request
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_size_request
</UL>

<P><STRONG><a name="[600]"></a>FT_Select_Size</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = FT_Select_Size &rArr; FT_Select_Metrics &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Select_Metrics
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Request_Size
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Size_Select
</UL>

<P><STRONG><a name="[601]"></a>FT_Request_Size</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FT_Request_Size &rArr; FT_Request_Metrics &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Select_Size
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Match_Size
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Request_Metrics
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Set_Pixel_Sizes
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Set_Char_Size
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Size_Request
</UL>

<P><STRONG><a name="[603]"></a>FT_Set_Char_Size</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FT_Set_Char_Size &rArr; FT_Request_Size &rArr; FT_Request_Metrics &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Request_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_scaler_lookup_size
</UL>

<P><STRONG><a name="[604]"></a>FT_Set_Pixel_Sizes</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FT_Set_Pixel_Sizes &rArr; FT_Request_Size &rArr; FT_Request_Metrics &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Request_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_scaler_lookup_size
</UL>

<P><STRONG><a name="[605]"></a>FT_Get_Kerning</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
</UL>

<P><STRONG><a name="[a55]"></a>FT_Get_Track_Kerning</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[4ff]"></a>FT_Select_Charmap</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FT_Select_Charmap &rArr; find_unicode_charmap
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_unicode_charmap
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_face_globals_compute_script_coverage
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_metrics_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_CMapCache_Lookup
</UL>

<P><STRONG><a name="[502]"></a>FT_Set_Charmap</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FT_Set_Charmap
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_face_globals_compute_script_coverage
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_metrics_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_CMapCache_Lookup
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Read_PFM
</UL>

<P><STRONG><a name="[a56]"></a>FT_Get_Charmap_Index</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[606]"></a>FT_CMap_Done</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_cmap_done_internal
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>

<P><STRONG><a name="[569]"></a>FT_CMap_New</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FT_CMap_New &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_cmap_done_internal
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_face_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Face_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_face_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_Face_Init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNT_Face_Init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Face_Init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Face_Init
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_build_cmaps
</UL>

<P><STRONG><a name="[501]"></a>FT_Get_Next_Char</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FT_Get_Next_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_face_globals_compute_script_coverage
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_First_Char
</UL>

<P><STRONG><a name="[607]"></a>FT_Get_First_Char</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Next_Char
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Char_Index
</UL>

<P><STRONG><a name="[a57]"></a>FT_Get_Name_Index</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[a58]"></a>FT_Get_Glyph_Name</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[a59]"></a>FT_Get_Postscript_Name</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[a5a]"></a>FT_Get_Sfnt_Table</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[a5b]"></a>FT_Load_Sfnt_Table</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[a5c]"></a>FT_Sfnt_Table_Info</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[a5d]"></a>FT_Get_CMap_Language_ID</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[626]"></a>FT_Activate_Size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ftbase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_size_node_compare
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_scaler_lookup_size
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Size_Select
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Size_Request
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Size_Init
</UL>

<P><STRONG><a name="[60b]"></a>FT_Get_Renderer</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Lookup_Renderer
</UL>

<P><STRONG><a name="[60d]"></a>FT_Remove_Module</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FT_Remove_Module &rArr; Destroy_Module &rArr; Destroy_Driver &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_Module
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Library
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Add_Module
</UL>

<P><STRONG><a name="[60e]"></a>FT_Add_Module</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FT_Add_Module &rArr; FT_Remove_Module &rArr; Destroy_Module &rArr; Destroy_Driver &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Remove_Module
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_add_renderer
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_New
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Done
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Add_Default_Modules
</UL>

<P><STRONG><a name="[589]"></a>FT_Get_Module</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT_Get_Module
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_TrueType_Engine_Type
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module_Interface
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_slot_init
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_size_get_globals_funcs
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_interface
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_cmap_info
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Driver_Init
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_size_get_globals_funcs
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_slot_init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_GlyphSlot_Init
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Size_Get_Globals_Funcs
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_get_interface
</UL>

<P><STRONG><a name="[5ac]"></a>FT_Get_Module_Interface</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FT_Get_Module_Interface &rArr; FT_Get_Module
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_face_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Face_Init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_face_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Face_Init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_init_face
</UL>

<P><STRONG><a name="[588]"></a>ft_module_get_service</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ft_module_get_service
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_TrueType_Engine_Type
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_face_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_cmap_info
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_name_index
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_glyph_name
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_decoder_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Face_Init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Face_Init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_init_face
</UL>

<P><STRONG><a name="[60f]"></a>FT_New_Library</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FT_New_Library &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Init_FreeType
</UL>

<P><STRONG><a name="[a5e]"></a>FT_Library_Version</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[610]"></a>FT_Done_Library</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Remove_Module
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TTF_Done
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_FreeType
</UL>

<P><STRONG><a name="[a5f]"></a>FT_Set_Debug_Hook</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[611]"></a>FT_Get_TrueType_Engine_Type</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_module_get_service
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module
</UL>

<P><STRONG><a name="[11b]"></a>ft_stub_set_char_sizes</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ft_stub_set_char_sizes
</UL>
<BR>[Address Reference Count : 9]<UL><LI> bdf.o(.constdata)
<LI> cff.o(.constdata)
<LI> pcf.o(.constdata)
<LI> pfr.o(.constdata)
<LI> winfnt.o(.constdata)
<LI> truetype.o(.constdata)
<LI> type1.o(.constdata)
<LI> type42.o(.constdata)
<LI> type1cid.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>ft_stub_set_pixel_sizes</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ft_stub_set_pixel_sizes
</UL>
<BR>[Address Reference Count : 9]<UL><LI> bdf.o(.constdata)
<LI> cff.o(.constdata)
<LI> pcf.o(.constdata)
<LI> pfr.o(.constdata)
<LI> winfnt.o(.constdata)
<LI> truetype.o(.constdata)
<LI> type1.o(.constdata)
<LI> type42.o(.constdata)
<LI> type1cid.o(.constdata)
</UL>
<P><STRONG><a name="[a60]"></a>FT_Get_SubGlyph_Info</STRONG> (Thumb, 94 bytes, Stack size 36 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[612]"></a>FT_Raccess_Get_HeaderInfo</STRONG> (Thumb, 346 bytes, Stack size 88 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Read
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Skip
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadShort
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
</UL>

<P><STRONG><a name="[613]"></a>FT_Raccess_Get_DataOffsets</STRONG> (Thumb, 342 bytes, Stack size 80 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadLong
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Skip
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadShort
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>

<P><STRONG><a name="[a61]"></a>FT_Raccess_Guess</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, ftbase.o(.text), UNUSED)

<P><STRONG><a name="[615]"></a>FT_Bitmap_New</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ftbitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FT_Bitmap_New &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Embolden
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_bitmap_glyph_init
</UL>

<P><STRONG><a name="[616]"></a>FT_Bitmap_Copy</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, ftbitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FT_Bitmap_Copy &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_qrealloc
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_qalloc
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_bitmap_glyph_copy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_bitmap_glyph_init
</UL>

<P><STRONG><a name="[618]"></a>FT_Bitmap_Done</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ftbitmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FT_Bitmap_Done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Embolden
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_bitmap_glyph_done
</UL>

<P><STRONG><a name="[619]"></a>FT_Bitmap_Convert</STRONG> (Thumb, 680 bytes, Stack size 56 bytes, ftbitmap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_qrealloc
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Embolden
</UL>

<P><STRONG><a name="[61a]"></a>FT_Bitmap_Embolden</STRONG> (Thumb, 464 bytes, Stack size 88 bytes, ftbitmap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Convert
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Done
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_New
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_bitmap_assure_buffer
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[624]"></a>FTC_Manager_LookupFace</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FTC_Manager_LookupFace &rArr; FTC_MruList_New &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_New
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruNode_Up
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_basic_family_get_count
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_scaler_lookup_size
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFont
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetName
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsInFont
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RequestGlyphAA
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RequestGlyph
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_CMapCache_Lookup
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_Lookup_Face
</UL>

<P><STRONG><a name="[627]"></a>FTC_Manager_LookupSize</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FTC_Manager_LookupSize &rArr; FTC_MruList_New &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_New
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruNode_Up
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_basic_family_load_glyph
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_basic_family_load_bitmap
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFont
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RequestGlyphAA
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RequestGlyph
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_Lookup_Size
</UL>

<P><STRONG><a name="[628]"></a>FTC_Manager_New</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FTC_Manager_New &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_Init
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckInit
</UL>

<P><STRONG><a name="[629]"></a>FTC_Manager_Done</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ftcache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_Done
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TTF_DestroyCache
</UL>

<P><STRONG><a name="[62a]"></a>FTC_Manager_Reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ftcache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_Reset
</UL>

<P><STRONG><a name="[62e]"></a>ftc_node_destroy</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_node_mru_unlink
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_node_hash_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_FlushN
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_Compress
</UL>

<P><STRONG><a name="[633]"></a>FTC_Manager_RemoveFaceID</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ftcache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Cache_RemoveFaceID
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_RemoveSelection
</UL>

<P><STRONG><a name="[a62]"></a>FTC_Node_Unref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ftcache.o(.text), UNUSED)

<P><STRONG><a name="[634]"></a>FTC_Manager_Lookup_Face</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ftcache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupFace
</UL>

<P><STRONG><a name="[635]"></a>FTC_Manager_Lookup_Size</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, ftcache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupSize
</UL>

<P><STRONG><a name="[63d]"></a>FTC_CMapCache_New</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FTC_CMapCache_New &rArr; FTC_Manager_RegisterCache &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_RegisterCache
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckInit
</UL>

<P><STRONG><a name="[63e]"></a>FTC_CMapCache_Lookup</STRONG> (Thumb, 508 bytes, Stack size 96 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = FTC_CMapCache_Lookup &rArr; FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Cache_NewNode
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruNode_Up
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Set_Charmap
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Select_Charmap
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Char_Index
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupFace
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFont
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsInFont
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RequestGlyphAA
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RequestGlyph
</UL>

<P><STRONG><a name="[64c]"></a>FTC_ImageCache_New</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FTC_ImageCache_New &rArr; FTC_GCache_New &rArr; FTC_Manager_RegisterCache &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_GCache_New
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckInit
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Image_Cache_New
</UL>

<P><STRONG><a name="[64d]"></a>FTC_ImageCache_Lookup</STRONG> (Thumb, 538 bytes, Stack size 128 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = FTC_ImageCache_Lookup &rArr; FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Cache_NewNode
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_New
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_Remove
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruNode_Up
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFont
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Image_Cache_Lookup
</UL>

<P><STRONG><a name="[64e]"></a>FTC_Image_Cache_New</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ftcache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ImageCache_New
</UL>

<P><STRONG><a name="[64f]"></a>FTC_Image_Cache_Lookup</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, ftcache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_image_type_from_old_desc
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ImageCache_Lookup
</UL>

<P><STRONG><a name="[651]"></a>FTC_SBitCache_New</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FTC_SBitCache_New &rArr; FTC_GCache_New &rArr; FTC_Manager_RegisterCache &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_GCache_New
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckInit
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SBit_Cache_New
</UL>

<P><STRONG><a name="[652]"></a>FTC_SBitCache_Lookup</STRONG> (Thumb, 582 bytes, Stack size 128 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = FTC_SBitCache_Lookup &rArr; FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Cache_NewNode
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_New
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_Remove
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruNode_Up
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RequestGlyphAA
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RequestGlyph
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SBit_Cache_Lookup
</UL>

<P><STRONG><a name="[653]"></a>FTC_SBit_Cache_New</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ftcache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SBitCache_New
</UL>

<P><STRONG><a name="[654]"></a>FTC_SBit_Cache_Lookup</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, ftcache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_image_type_from_old_desc
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SBitCache_Lookup
</UL>

<P><STRONG><a name="[5ae]"></a>FT_Matrix_Multiply</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ftglyph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FT_Matrix_Multiply &rArr; FT_MulFix
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_face_init
</UL>

<P><STRONG><a name="[53e]"></a>FT_Matrix_Invert</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ftglyph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = FT_Matrix_Invert &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_g
</UL>

<P><STRONG><a name="[642]"></a>FT_Done_Glyph</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ftglyph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FT_Done_Glyph &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_inode_free
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Glyph_To_Bitmap
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Glyph_Copy
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Glyph
</UL>

<P><STRONG><a name="[656]"></a>FT_Glyph_Copy</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ftglyph.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_new_glyph
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Glyph
</UL>

<P><STRONG><a name="[64b]"></a>FT_Get_Glyph</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ftglyph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FT_Get_Glyph &rArr; ft_new_glyph &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Lookup_Renderer
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_new_glyph
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_basic_family_load_glyph
</UL>

<P><STRONG><a name="[657]"></a>FT_Glyph_Transform</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ftglyph.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Glyph_To_Bitmap
</UL>

<P><STRONG><a name="[a63]"></a>FT_Glyph_Get_CBox</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ftglyph.o(.text), UNUSED)

<P><STRONG><a name="[658]"></a>FT_Glyph_To_Bitmap</STRONG> (Thumb, 238 bytes, Stack size 248 bytes, ftglyph.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Render_Glyph_Internal
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Glyph_Transform
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_new_glyph
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_bitmap_glyph_init
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Glyph
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[672]"></a>FT_Stream_OpenGzip</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FT_Stream_OpenGzip &rArr; ft_gzip_file_init &rArr; inflateInit2_ &rArr; inflateEnd &rArr; inflate_blocks_free &rArr; inflate_blocks_reset &rArr; inflate_codes_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_qalloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_init
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_check_header
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_Face_Init
</UL>

<P><STRONG><a name="[673]"></a>FT_Add_Default_Modules</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ftinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FT_Add_Default_Modules &rArr; FT_Add_Module &rArr; FT_Remove_Module &rArr; Destroy_Module &rArr; Destroy_Driver &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Add_Module
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Init_FreeType
</UL>

<P><STRONG><a name="[674]"></a>FT_Init_FreeType</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ftinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FT_Init_FreeType &rArr; FT_Add_Default_Modules &rArr; FT_Add_Module &rArr; FT_Remove_Module &rArr; Destroy_Module &rArr; Destroy_Driver &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_Library
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_Memory
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Add_Default_Modules
</UL>
<BR>[Called By]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckInit
</UL>

<P><STRONG><a name="[676]"></a>FT_Done_FreeType</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ftinit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Library
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Memory
</UL>

<P><STRONG><a name="[67a]"></a>ft_lzwstate_reset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ftlzw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_done
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_init
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_file_reset
</UL>

<P><STRONG><a name="[679]"></a>ft_lzwstate_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ftlzw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ft_lzwstate_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_reset
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_file_init
</UL>

<P><STRONG><a name="[67c]"></a>ft_lzwstate_done</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ftlzw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ft_lzwstate_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_reset
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_file_done
</UL>

<P><STRONG><a name="[684]"></a>ft_lzwstate_io</STRONG> (Thumb, 616 bytes, Stack size 64 bytes, ftlzw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ft_lzwstate_io &rArr; ft_lzwstate_stack_grow &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_TryRead
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_get_code
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_stack_grow
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_prefix_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_file_skip_output
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_file_fill_output
</UL>

<P><STRONG><a name="[688]"></a>FT_Stream_OpenLZW</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ftlzw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FT_Stream_OpenLZW &rArr; ft_lzw_file_init &rArr; ft_lzw_check_header &rArr; FT_Stream_Read &rArr; FT_Stream_ReadAt
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_file_init
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_check_header
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_Face_Init
</UL>

<P><STRONG><a name="[5e0]"></a>FT_Stream_Open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ftsystem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_New
</UL>

<P><STRONG><a name="[675]"></a>FT_New_Memory</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ftsystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FT_New_Memory &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Init_FreeType
</UL>

<P><STRONG><a name="[677]"></a>FT_Done_Memory</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ftsystem.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_FreeType
</UL>

<P><STRONG><a name="[4ac]"></a>GUI_TTF_CreateFont</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, gui_ttf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = GUI_TTF_CreateFont &rArr; _CreateFont &rArr; FTC_ImageCache_Lookup &rArr; FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFont
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_TTFFont
</UL>

<P><STRONG><a name="[695]"></a>GUI_TTF_CreateFontAA</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, gui_ttf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFont
</UL>

<P><STRONG><a name="[696]"></a>GUI_TTF_GetFamilyName</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gui_ttf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetName
</UL>

<P><STRONG><a name="[697]"></a>GUI_TTF_GetStyleName</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gui_ttf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetName
</UL>

<P><STRONG><a name="[a64]"></a>GUI_TTF_SetCacheSize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_ttf.o(.text), UNUSED)

<P><STRONG><a name="[698]"></a>GUI_TTF_DestroyCache</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_ttf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_Done
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TTF_Done
</UL>

<P><STRONG><a name="[699]"></a>GUI_TTF_Done</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_ttf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Library
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TTF_DestroyCache
</UL>

<P><STRONG><a name="[71e]"></a>ps_hints_apply</STRONG> (Thumb, 332 bytes, Stack size 200 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ps_hints_apply &rArr; psh_glyph_init &rArr; psh_hint_table_init &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_globals_set_scale
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_load_points
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_compute_extrema
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_table_align_hints
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_find_strong_points
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_find_blue_points
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_interpolate_strong_points
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_interpolate_normal_points
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_interpolate_other_points
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_save_points
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.text)
</UL>
<P><STRONG><a name="[787]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parse_charstrings
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parse_sfnts
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parse_encoding
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_hex_to_binary
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_dict
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_encoding
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_binary_data
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_Private_Dict
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3a5]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS32_to_uSec
</UL>

<P><STRONG><a name="[a65]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STemWin_TTFFont_Demo
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EN25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[564]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_properties
</UL>

<P><STRONG><a name="[7b4]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7b5]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2d4]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[2d6]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[a66]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[7b7]"></a>__printf</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, __printf_ss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[79b]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_get_name_index
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parser_new
</UL>

<P><STRONG><a name="[55f]"></a>qsort</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, qsortnoex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_partition_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_glyphs
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_kern_pairs
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Read_PFM
</UL>

<P><STRONG><a name="[55e]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_properties
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_glyphs
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_add_property
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parser_init
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parse_dict
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_dict
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_type1_format
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreStateEx
</UL>

<P><STRONG><a name="[4f6]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_ScanFilesType
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Face_Init
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_interpret_style
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_load_font
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_interpret_style
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_properties
</UL>

<P><STRONG><a name="[555]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_strcpy
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_glyph_name
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_sid_string
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Face_Init
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_interpret_style
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_add_property
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_set_default_spacing
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_create_property
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_load_font
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_interpret_style
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_properties
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetName
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNT_Face_Init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_get_glyph_name
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parse_dict
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parse_dict
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_get_index
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_get_glyph_name
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_dict
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ErrorOut1
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[5ad]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_face_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_parse
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_tokenize
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_read_vals
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parse_encoding
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parse_dict
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parse_dict
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parser_new
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_get_index
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_dict
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_subrs
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_encoding
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_Private_Dict
</UL>

<P><STRONG><a name="[542]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_sbit_copy_bitmap
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Convert
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Copy
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_bitmap_assure_buffer
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Copy
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadAt
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_strcpy
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_encoding_load
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_charset_load
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_glyph_name
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_sid_string
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_name
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_TryRead
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_start
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_glyphs
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_add_property
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_set_default_spacing
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_add_comment
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_create_property
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_readstream
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CopyPoints
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_g
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_read_vals
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_load_field
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_table_done
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_table_add
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallocate_t1_table
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_aux_name_load
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_extra_item_load_font_id
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_file_io
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_io
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_fill_input
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_flush
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawCharAA8_Trans
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNT_Face_Init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_get_glyph_name
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_get_glyph_name
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_charstrings
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_subrs
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_blend_axis_types
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7bc]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[a67]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[680]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_prefix_grow
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parser_new
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_Private_Dict
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crop_bitmap
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
</UL>

<P><STRONG><a name="[7bd]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[a68]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[50b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_axis_hints_new_edge
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_basic_family_init
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_RegisterCache
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_size_node_reset
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_size_node_init
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_Init
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Embolden
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Done
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Copy
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_New
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Copy
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_New_Internal
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Done_Internal
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_slot_load
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_builder_done
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Glyph_Load
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Rewind
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CopyPoints
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_glyph
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_g
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_metrics_scale
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_done
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_load_field_table
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_slot_load
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_outline_glyph_prepare
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_bitmap_glyph_init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;winfnt_get_header
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_ps_get_font_private
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_ps_get_font_info
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_GlyphSlot_Load
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Size_Select
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Size_Request
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_ps_get_font_info
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_face_open
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_ps_get_font_private
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_ps_get_font_info
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Load_Glyph
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_size_reset
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_raster_render
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_hhea
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_os2
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_maxp
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_black_render
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_blues_set_zones_0
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawSpinEffect
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine32BPP_DDB
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[a69]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a6a]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a6b]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[6f6]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_merge
</UL>

<P><STRONG><a name="[a6c]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[7bf]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[7be]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[a6d]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[4fe]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_face_globals_compute_script_coverage
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_render_span
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_AddHLine
</UL>

<P><STRONG><a name="[5a1]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_bitmap_assure_buffer
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_charset_load
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[7c1]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[7c0]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[509]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_init
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_axis_hints_new_edge
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_axis_hints_new_segment
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_clear
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Request_Metrics
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_size_init
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_load
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_subfont_load
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_done_index
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_new_index
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parser_init
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_init
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_split
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_glyph
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_init
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_compute_edges
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_compute_edges
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init_widths
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_decoder_init
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_init
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_OpenLZW
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_done
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_init
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_OpenGzip
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Glyph_To_Bitmap
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_glyphslot_clear
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_loader_init
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_init_loader
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parser_new
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_init_loader
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_loader_init
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t2_hints_funcs_init
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_hints_funcs_init
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_init
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX__GetButtonSize
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Clear
</UL>

<P><STRONG><a name="[a6e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[a6f]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[7c2]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[693]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetName
</UL>

<P><STRONG><a name="[4f8]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_ScanFilesType
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Add_Module
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_face_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_name_index
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_service_list_lookup
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Face_Init
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_bucket
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_cmap_std_char_index
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_lookup_glyph_by_stdcharcode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_Face_Init
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_find_property
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_get_name_index
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parse_charstrings
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Open_Face
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_face_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_get_name_index
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Face_Init
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Open_Face
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_dict
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_charstrings
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_MM_Var
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[a70]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a71]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a72]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5db]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_validator_run
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_convert_glyph_inner
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_build_cmaps
</UL>

<P><STRONG><a name="[5dd]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_validator_error
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_record_cell
</UL>

<P><STRONG><a name="[2d8]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[7b9]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[a73]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[a74]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[7b6]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7b3]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[d3]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[7b2]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[7ba]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>

<P><STRONG><a name="[a75]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7c6]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a76]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7c4]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[7c3]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[2db]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[7c5]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[2e0]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[403]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[38]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>BUTTON_DrawSkinFlex</STRONG> (Thumb, 562 bytes, Stack size 56 bytes, button_skinflex.o(i.BUTTON_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = BUTTON_DrawSkinFlex &rArr; GUI__DrawTwinArc4 &rArr; _DrawTwinArc4 &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2ea]"></a>BUTTON_SetDefaultSkin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, button_skin.o(i.BUTTON_SetDefaultSkin))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emwindemo_task
</UL>

<P><STRONG><a name="[77]"></a>CHECKBOX_DrawSkinFlex</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, checkbox_skinflex.o(i.CHECKBOX_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = CHECKBOX_DrawSkinFlex &rArr; _DrawBitmap &rArr; _GenCheck &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_GetSkinFlexButtonSize
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFocus
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[7d8]"></a>CHECKBOX_GetSkinFlexButtonSize</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, checkbox_skinflex.o(i.CHECKBOX_GetSkinFlexButtonSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = CHECKBOX_GetSkinFlexButtonSize &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_DrawSkinFlex
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFocus
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
</UL>

<P><STRONG><a name="[2eb]"></a>CHECKBOX_SetDefaultSkin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, checkbox_skin.o(i.CHECKBOX_SetDefaultSkin))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emwindemo_task
</UL>

<P><STRONG><a name="[26]"></a>CHECKBOX__GetButtonSize</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, checkbox.o(i.CHECKBOX__GetButtonSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CHECKBOX__GetButtonSize &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> checkbox.o(.data)
</UL>
<P><STRONG><a name="[915]"></a>DIALOG_GetBkColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dialog.o(i.DIALOG_GetBkColor))
<BR><BR>[Called By]<UL><LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetBkColor
</UL>

<P><STRONG><a name="[78]"></a>DROPDOWN_DrawSkinFlex</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, dropdown_skinflex.o(i.DROPDOWN_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = DROPDOWN_DrawSkinFlex &rArr; _DrawBackground &rArr; GUI__DrawTwinArc4 &rArr; _DrawTwinArc4 &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawText
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2ec]"></a>DROPDOWN_SetDefaultSkin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dropdown_skin.o(i.DROPDOWN_SetDefaultSkin))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emwindemo_task
</UL>

<P><STRONG><a name="[7df]"></a>DROPDOWN__GetpItemLocked</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dropdown.o(i.DROPDOWN__GetpItemLocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DROPDOWN__GetpItemLocked &rArr; GUI_ARRAY_GethItem &rArr; GUI_ARRAY__GethItem
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GethItem
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[7e1]"></a>EDIT_SetBkColor</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, edit.o(i.EDIT_SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = EDIT_SetBkColor &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__ApplyProps
</UL>

<P><STRONG><a name="[7e3]"></a>EDIT_SetTextColor</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, edit.o(i.EDIT_SetTextColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = EDIT_SetTextColor &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__ApplyProps
</UL>

<P><STRONG><a name="[e]"></a>FRAMEWIN_DrawSkinFlex</STRONG> (Thumb, 888 bytes, Stack size 104 bytes, framewin_skinflex.o(i.FRAMEWIN_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = FRAMEWIN_DrawSkinFlex &rArr; GUI_DrawGradientV &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectEx
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_GetActive
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> framewin_skin.o(.data)
</UL>
<P><STRONG><a name="[7e4]"></a>FRAMEWIN_GetActive</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, framewin_get.o(i.FRAMEWIN_GetActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = FRAMEWIN_GetActive &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[ef]"></a>FRAMEWIN_OwnerDraw</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, framewin_skinclassic.o(i.FRAMEWIN_OwnerDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = FRAMEWIN_OwnerDraw &rArr; WIDGET__FillStringInRect &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CalcTextRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewin_skinclassic.o(i._Create)
</UL>
<P><STRONG><a name="[2ed]"></a>FRAMEWIN_SetDefaultSkin</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, framewin_skin.o(i.FRAMEWIN_SetDefaultSkin))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emwindemo_task
</UL>

<P><STRONG><a name="[7ec]"></a>FRAMEWIN_SetOwnerDraw</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, framewin_setownerdraw.o(i.FRAMEWIN_SetOwnerDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = FRAMEWIN_SetOwnerDraw &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
</UL>

<P><STRONG><a name="[7ed]"></a>FRAMEWIN__CalcPositions</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, framewin.o(i.FRAMEWIN__CalcPositions))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = FRAMEWIN__CalcPositions &rArr; FRAMEWIN__GetTitleLimits &rArr; WM_GetNextSibling &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcTitleHeight
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetWindowSizeX
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetWindowSizeY
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[7f0]"></a>FRAMEWIN__CalcTitleHeight</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, framewin.o(i.FRAMEWIN__CalcTitleHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FRAMEWIN__CalcTitleHeight
</UL>
<BR>[Calls]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYSizeOfFont
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
</UL>

<P><STRONG><a name="[27]"></a>FRAMEWIN__GetBorderSize</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, framewin.o(i.FRAMEWIN__GetBorderSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FRAMEWIN__GetBorderSize
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewin.o(.data)
</UL>
<P><STRONG><a name="[7f2]"></a>FRAMEWIN__GetTitleLimits</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, framewin.o(i.FRAMEWIN__GetTitleLimits))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = FRAMEWIN__GetTitleLimits &rArr; WM_GetNextSibling &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetNextSibling
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
</UL>

<P><STRONG><a name="[7f6]"></a>GL_DrawBitmap</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, gui_drawbitmap.o(i.GL_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = GL_DrawBitmap &rArr; GUI_SetDrawMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawCharAA8_NoTrans
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
</UL>

<P><STRONG><a name="[7f8]"></a>GL_DrawLine</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gui_drawline.o(i.GL_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GL_DrawLine &rArr; GL_DrawLineEx &rArr; GL_DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
</UL>

<P><STRONG><a name="[7fa]"></a>GL_DrawLine1Ex</STRONG> (Thumb, 456 bytes, Stack size 64 bytes, gui_drawline.o(i.GL_DrawLine1Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GL_DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetLineColor
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[7f9]"></a>GL_DrawLineEx</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, gui_drawline.o(i.GL_DrawLineEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GL_DrawLineEx &rArr; GL_DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_sin
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_cos
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atan2
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawLineEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>

<P><STRONG><a name="[7fc]"></a>GL_DrawPoint</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gui_drawpoint.o(i.GL_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawLineEnd
</UL>

<P><STRONG><a name="[803]"></a>GL_FillCircle</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, gui_circ.o(i.GL_FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GL_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
</UL>

<P><STRONG><a name="[801]"></a>GL_FillPolygon</STRONG> (Thumb, 464 bytes, Stack size 64 bytes, gui_fillpolygon.o(i.GL_FillPolygon))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GL_FillPolygon &rArr; _Add
</UL>
<BR>[Calls]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[805]"></a>GL_SetDefault</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gui_setdefault.o(i.GL_SetDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = GL_SetDefault &rArr; GUI_SetFont &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLineStyle
</UL>
<BR>[Called By]<UL><LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetDefault
</UL>

<P><STRONG><a name="[27d]"></a>GUIMONO_DispChar</STRONG> (Thumb, 304 bytes, Stack size 104 bytes, gui_charm.o(i.GUIMONO_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GUIMONO_DispChar &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[27e]"></a>GUIMONO_GetCharDistX</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_charm.o(i.GUIMONO_GetCharDistX))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[27f]"></a>GUIMONO_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_charm.o(i.GUIMONO_GetFontInfo))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[280]"></a>GUIMONO_IsInFont</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gui_charm.o(i.GUIMONO_IsInFont))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.constdata)
</UL>
<P><STRONG><a name="[294]"></a>GUIPROP_DispChar</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, gui_charp.o(i.GUIPROP_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = GUIPROP_DispChar &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP__FindChar
</UL>
<BR>[Address Reference Count : 2]<UL><LI> f08_1.o(.constdata)
<LI> f13_1.o(.constdata)
</UL>
<P><STRONG><a name="[21]"></a>GUIPROP_EXT__ClearLine</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, gui_encext.o(i.GUIPROP_EXT__ClearLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = GUIPROP_EXT__ClearLine &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetOverlap
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__FindChar
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearTextBackground
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_encext.o(.data)
</UL>
<P><STRONG><a name="[80e]"></a>GUIPROP_EXT__FindChar</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_charpext.o(i.GUIPROP_EXT__FindChar))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__ClearLine
</UL>

<P><STRONG><a name="[295]"></a>GUIPROP_GetCharDistX</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, gui_charp.o(i.GUIPROP_GetCharDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUIPROP_GetCharDistX
</UL>
<BR>[Calls]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP__FindChar
</UL>
<BR>[Address Reference Count : 2]<UL><LI> f08_1.o(.constdata)
<LI> f13_1.o(.constdata)
</UL>
<P><STRONG><a name="[296]"></a>GUIPROP_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_charp.o(i.GUIPROP_GetFontInfo))
<BR>[Address Reference Count : 2]<UL><LI> f08_1.o(.constdata)
<LI> f13_1.o(.constdata)
</UL>
<P><STRONG><a name="[297]"></a>GUIPROP_IsInFont</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gui_charp.o(i.GUIPROP_IsInFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUIPROP_IsInFont
</UL>
<BR>[Calls]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP__FindChar
</UL>
<BR>[Address Reference Count : 2]<UL><LI> f08_1.o(.constdata)
<LI> f13_1.o(.constdata)
</UL>
<P><STRONG><a name="[80b]"></a>GUIPROP__FindChar</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_charp.o(i.GUIPROP__FindChar))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_IsInFont
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_GetCharDistX
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[811]"></a>GUITASK_CopyContext</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gui_task.o(i.GUITASK_CopyContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUITASK_CopyContext &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[812]"></a>GUITASK_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gui_task.o(i.GUITASK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = GUITASK_Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[68d]"></a>GUI_AA__DrawCharAA8</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, guiaa_char8.o(i.GUI_AA__DrawCharAA8))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = GUI_AA__DrawCharAA8 &rArr; _DrawCharAA8_Trans &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawCharAA8_Trans
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawCharAA8_NoTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RequestGlyphAA
</UL>

<P><STRONG><a name="[817]"></a>GUI_ALLOC_AllocNoInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gui_alloc.o(i.GUI_ALLOC_AllocNoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawCharAA8_Trans
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer
</UL>

<P><STRONG><a name="[819]"></a>GUI_ALLOC_AllocZero</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gui_alloc_alloczero.o(i.GUI_ALLOC_AllocZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[489]"></a>GUI_ALLOC_AssignMemory</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_AssignMemory))
<BR><BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[81a]"></a>GUI_ALLOC_Free</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gui_alloc.o(i.GUI_ALLOC_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PushFreeBlock
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawCharAA8_Trans
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GUI_USAGE_BM_Delete
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseBuffer
</UL>

<P><STRONG><a name="[833]"></a>GUI_ALLOC_FreeFixedBlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_FreeFixedBlock))
<BR><BR>[Called By]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
</UL>

<P><STRONG><a name="[493]"></a>GUI_ALLOC_GetFixedBlock</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, gui_alloc.o(i.GUI_ALLOC_GetFixedBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GenCheck
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>

<P><STRONG><a name="[820]"></a>GUI_ALLOC_GetMaxSize</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gui_alloc.o(i.GUI_ALLOC_GetMaxSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_GetMaxSize &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer
</UL>

<P><STRONG><a name="[985]"></a>GUI_ALLOC_GetSize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_GetSize))
<BR><BR>[Called By]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawCharAA8_Trans
</UL>

<P><STRONG><a name="[83b]"></a>GUI_ALLOC_Lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
</UL>

<P><STRONG><a name="[7cd]"></a>GUI_ALLOC_LockH</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_LockH))
<BR><BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_DrawSkinFlex
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_DrawSkinFlex
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_DrawSkinFlex
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DROPDOWN_DrawSkinFlex
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_DrawSkinFlex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawCharAA8_Trans
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR__GetTextLocked
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetFont
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetItemRect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetTouchedPage
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetItemWidth
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetItemHeight
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_SkinEnableArrow
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetYSize
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetXSize
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawText
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArrow
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_GetActive
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBorderSize
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawText
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DROPDOWN__GetpItemLocked
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_GetSkinFlexButtonSize
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFocus
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GethItem
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchDefault
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonPressed
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__DrawBk
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawButton
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArrow
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetTextColor
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetBkColor
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__ApplyProps
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLIDER_GetFlag
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO__GetButtonSize
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__GetButtonRect
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemWidth
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEnable
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetEffectSize
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__CalcMenuSizeY
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__CalcMenuSizeX
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsTopLevelMenu
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY__GetpItemLocked
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY__GethItem
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetBorderSize
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTriangle
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawSpinEffect
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetButtonSize
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTouchedPage
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetOwnerDraw
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_OwnerDraw
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBorderSize
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unlink
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFromLinList
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPosition
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer
</UL>

<P><STRONG><a name="[822]"></a>GUI_ALLOC_RequestSize</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gui_alloc.o(i.GUI_ALLOC_RequestSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = GUI_ALLOC_RequestSize &rArr; GUI_ALLOC_GetMaxSize &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
</UL>
<BR>[Called By]<UL><LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[48a]"></a>GUI_ALLOC_SetAvBlockSize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_SetAvBlockSize))
<BR><BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[83c]"></a>GUI_ALLOC_Unlock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
</UL>

<P><STRONG><a name="[7cf]"></a>GUI_ALLOC_UnlockH</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_UnlockH))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_DrawSkinFlex
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_DrawSkinFlex
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_DrawSkinFlex
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DROPDOWN_DrawSkinFlex
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_DrawSkinFlex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawCharAA8_Trans
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetFont
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetItemRect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetTouchedPage
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetItemWidth
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetItemHeight
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_SkinEnableArrow
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetYSize
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetXSize
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawText
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArrow
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_GetActive
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBorderSize
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawText
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DROPDOWN__GetpItemLocked
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_GetSkinFlexButtonSize
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFocus
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GethItem
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchDefault
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonPressed
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__DrawBk
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawButton
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArrow
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetTextColor
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetBkColor
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__ApplyProps
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLIDER_GetFlag
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO__GetButtonSize
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__GetButtonRect
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemWidth
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEnable
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetEffectSize
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__CalcMenuSizeY
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__CalcMenuSizeX
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsTopLevelMenu
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY__GethItem
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetBorderSize
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTriangle
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawSpinEffect
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetButtonSize
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTouchedPage
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetOwnerDraw
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_OwnerDraw
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBorderSize
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unlink
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFromLinList
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPosition
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseBuffer
</UL>

<P><STRONG><a name="[821]"></a>GUI_ALLOC_h2p</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_alloc.o(i.GUI_ALLOC_h2p))
<BR><BR>[Called By]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestor
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetNextSibling
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveWindowFromList
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveFromLinList
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
</UL>

<P><STRONG><a name="[823]"></a>GUI_ARRAY_GetNumItems</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_array.o(i.GUI_ARRAY_GetNumItems))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_ARRAY_GetNumItems
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_DrawSkinFlex
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetTouchedPage
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemWidth
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEnable
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetNumItems
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTouchedPage
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[7e0]"></a>GUI_ARRAY_GethItem</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gui_array.o(i.GUI_ARRAY_GethItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_ARRAY_GethItem &rArr; GUI_ARRAY__GethItem
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY__GethItem
</UL>
<BR>[Called By]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DROPDOWN__GetpItemLocked
</UL>

<P><STRONG><a name="[825]"></a>GUI_ARRAY_GetpItemLocked</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gui_array.o(i.GUI_ARRAY_GetpItemLocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_ARRAY_GetpItemLocked &rArr; GUI_ARRAY__GetpItemLocked &rArr; GUI_ARRAY__GethItem
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY__GetpItemLocked
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_DrawSkinFlex
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetItemWidth
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetItemHeight
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawText
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEnable
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[824]"></a>GUI_ARRAY__GethItem</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_array.o(i.GUI_ARRAY__GethItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_ARRAY__GethItem
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GethItem
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY__GetpItemLocked
</UL>

<P><STRONG><a name="[826]"></a>GUI_ARRAY__GetpItemLocked</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_array.o(i.GUI_ARRAY__GetpItemLocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_ARRAY__GetpItemLocked &rArr; GUI_ARRAY__GethItem
</UL>
<BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY__GethItem
</UL>
<BR>[Called By]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
</UL>

<P><STRONG><a name="[8b5]"></a>GUI_AddHex</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gui_addhex.o(i.GUI_AddHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_AddHex
</UL>
<BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AddSpaceHex
</UL>

<P><STRONG><a name="[827]"></a>GUI_CURSOR_SetPositionEx</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gui_curs1.o(i.GUI_CURSOR_SetPositionEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = GUI_CURSOR_SetPositionEx &rArr; GUI_SPRITE_SetPosition &rArr; _SetPosition &rArr; _CreateBuffer &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerPosEx
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCursorLayer
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[96e]"></a>GUI_CalcColorDist</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gui_calccolordist.o(i.GUI_CalcColorDist))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_CalcColorDist
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[4af]"></a>GUI_Clear</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_core.o(i.GUI_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = GUI_Clear &rArr; GUI_GotoXY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STemWin_TTFFont_Demo
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBackWin
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawPart
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[82c]"></a>GUI_ClearRect</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, gui_core.o(i.GUI_ClearRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = GUI_ClearRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRectEx
</UL>

<P><STRONG><a name="[82f]"></a>GUI_ClearRectEx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_clearrectex.o(i.GUI_ClearRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = GUI_ClearRectEx &rArr; GUI_ClearRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[830]"></a>GUI_DEVICE_Create</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gui_device.o(i.GUI_DEVICE_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[497]"></a>GUI_DEVICE_CreateAndLink</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_device.o(i.GUI_DEVICE_CreateAndLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = GUI_DEVICE_CreateAndLink &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[832]"></a>GUI_DEVICE_Delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_device.o(i.GUI_DEVICE_Delete))
<BR><BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>

<P><STRONG><a name="[831]"></a>GUI_DEVICE_Link</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, gui_device.o(i.GUI_DEVICE_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_DEVICE_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_LinkDevices
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
</UL>

<P><STRONG><a name="[834]"></a>GUI_DEVICE_LinkDevices</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gui_device.o(i.GUI_DEVICE_LinkDevices))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_DEVICE_LinkDevices &rArr; GUI_DEVICE_Link
</UL>
<BR>[Calls]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[835]"></a>GUI_DEVICE_Unlink</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_device.o(i.GUI_DEVICE_Unlink))
<BR><BR>[Calls]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UnlinkDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
</UL>

<P><STRONG><a name="[837]"></a>GUI_DEVICE_UnlinkTaskDevices</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gui_device.o(i.GUI_DEVICE_UnlinkTaskDevices))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_DEVICE_UnlinkTaskDevices
</UL>
<BR>[Calls]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UnlinkDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[879]"></a>GUI_DEVICE__GetpDriver</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui_device.o(i.GUI_DEVICE__GetpDriver))
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPosEx
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPosEx
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPaletteEx
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCacheEx
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer
</UL>

<P><STRONG><a name="[7d0]"></a>GUI_DRAW__Draw</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, gui_draw.o(i.GUI_DRAW__Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_DRAW__Draw
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[838]"></a>GUI_DRAW__GetXSize</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_draw.o(i.GUI_DRAW__GetXSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_DRAW__GetXSize
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[839]"></a>GUI_DRAW__GetYSize</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_draw.o(i.GUI_DRAW__GetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_DRAW__GetYSize
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[4b2]"></a>GUI_Delay</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, gui_time.o(i.GUI_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + Unknown Stack Size
<LI>Call Chain = GUI_Delay &rArr; GUI_Exec &rArr; GUI_Exec1 &rArr; WM_Exec &rArr; _DrawNext &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Delay
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Unlock
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STemWin_TTFFont_Demo
</UL>

<P><STRONG><a name="[83d]"></a>GUI_DispString</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, gui_dispstring.o(i.GUI_DispString))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawPart
</UL>

<P><STRONG><a name="[4b1]"></a>GUI_DispStringAt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_dispstringat.o(i.GUI_DispStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STemWin_TTFFont_Demo
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_DrawSkinFlex
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_DrawSkinFlex
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[7d4]"></a>GUI_DispStringInRect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_dispstringinrect.o(i.GUI_DispStringInRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = GUI_DispStringInRect &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_DrawSkinFlex
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_DrawSkinFlex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawText
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawText
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[845]"></a>GUI_DispStringInRectEx</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, gui_dispstringinrectex.o(i.GUI_DispStringInRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = GUI_DispStringInRectEx &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRotation
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[844]"></a>GUI_DispStringInRectMax</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, gui_dispstringinrect.o(i.GUI_DispStringInRectMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
</UL>

<P><STRONG><a name="[84a]"></a>GUI_DrawBitmap</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gui_drawbitmap.o(i.GUI_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; GUI_SetDrawMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[84b]"></a>GUI_DrawFocusRect</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, gui_drawfocusrect.o(i.GUI_DrawFocusRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_DrawFocusRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLIDER_DrawSkinFlex
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_DrawSkinFlex
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFocus
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawFocusRect
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[e6]"></a>GUI_DrawGradientH</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, gui_drawgradient.o(i.GUI_DrawGradientH))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = GUI_DrawGradientH &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradient
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawThumbV
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackgroundV
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
</UL>
<P><STRONG><a name="[84e]"></a>GUI_DrawGradientRoundedV</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, gui_drawgradientrounded.o(i.GUI_DrawGradientRoundedV))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradientRounded
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_DrawSkinFlex
</UL>

<P><STRONG><a name="[e9]"></a>GUI_DrawGradientV</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, gui_drawgradient.o(i.GUI_DrawGradientV))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = GUI_DrawGradientV &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradient
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_DrawSkinFlex
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawOverlap
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawButton
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawThumbH
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackgroundH
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
</UL>
<P><STRONG><a name="[7c9]"></a>GUI_DrawHLine</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, gui_drawhline.o(i.GUI_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLIDER_DrawSkinFlex
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_DrawSkinFlex
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_DrawSkinFlex
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DROPDOWN_DrawSkinFlex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawOverlap
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArrow
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFrame
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawButton
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArrow
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawThumbV
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawThumbH
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawShaftV
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawShaftH
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawTriangle
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGraspV
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFrame
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawVLine
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTriangle
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawSpinEffect
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTriangle
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[850]"></a>GUI_DrawLine</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gui_drawline.o(i.GUI_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = GUI_DrawLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawThumbV
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawThumbH
</UL>

<P><STRONG><a name="[7e6]"></a>GUI_DrawPixel</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gui_drawpixel.o(i.GUI_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = GUI_DrawPixel &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFrame
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFrame
</UL>

<P><STRONG><a name="[7cc]"></a>GUI_DrawRect</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, gui_2dlib.o(i.GUI_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = GUI_DrawRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[851]"></a>GUI_DrawRoundedRect</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, gui_drawroundedrect.o(i.GUI_DrawRoundedRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = GUI_DrawRoundedRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRoundedRect
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_DrawSkinFlex
</UL>

<P><STRONG><a name="[7ca]"></a>GUI_DrawVLine</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gui_drawvline.o(i.GUI_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = GUI_DrawVLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLIDER_DrawSkinFlex
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_DrawSkinFlex
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_DrawSkinFlex
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawOverlap
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFrame
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawButton
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawThumbV
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawThumbH
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawShaftV
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawShaftH
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawTriangle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGraspH
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFrame
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawVLine
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawSpinEffect
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[853]"></a>GUI_ErrorOut</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_errorout.o(i.GUI_ErrorOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_ErrorOut
</UL>
<BR>[Calls]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_ErrorOut
</UL>
<BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ErrorOut1
</UL>

<P><STRONG><a name="[855]"></a>GUI_ErrorOut1</STRONG> (Thumb, 64 bytes, Stack size 128 bytes, gui_errorout.o(i.GUI_ErrorOut1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_ErrorOut1 &rArr; GUI__AddSpaceHex &rArr; GUI_AddHex
</UL>
<BR>[Calls]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AddSpaceHex
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ErrorOut
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyString
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[83a]"></a>GUI_Exec</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_exec.o(i.GUI_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = GUI_Exec &rArr; GUI_Exec1 &rArr; WM_Exec &rArr; _DrawNext &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec1
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
</UL>

<P><STRONG><a name="[858]"></a>GUI_Exec1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_exec.o(i.GUI_Exec1))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = GUI_Exec1 &rArr; WM_Exec &rArr; _DrawNext &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>
<BR>[Called By]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec
</UL>

<P><STRONG><a name="[7cb]"></a>GUI_FillRect</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gui_fillrect.o(i.GUI_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = GUI_FillRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_DrawSkinFlex
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectEx
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawShaftV
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawShaftH
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[7e7]"></a>GUI_FillRectEx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_fillrectex.o(i.GUI_FillRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = GUI_FillRectEx &rArr; GUI_FillRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__DrawBk
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillRectEx
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawSpinEffect
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[85a]"></a>GUI_GetBitmapPixelIndex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_getbitmappixelindex.o(i.GUI_GetBitmapPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_GetBitmapPixelIndex &rArr; GUI_GetBitmapPixelIndexEx
</UL>
<BR>[Calls]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitmapPixelIndexEx
</UL>
<BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPosition
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBkPixel
</UL>

<P><STRONG><a name="[85b]"></a>GUI_GetBitmapPixelIndexEx</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, gui_getbitmappixelindex.o(i.GUI_GetBitmapPixelIndexEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_GetBitmapPixelIndexEx
</UL>
<BR>[Called By]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitmapPixelIndex
</UL>

<P><STRONG><a name="[8bb]"></a>GUI_GetBitsPerPixelEx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_getex.o(i.GUI_GetBitsPerPixelEx))
<BR><BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
</UL>

<P><STRONG><a name="[80d]"></a>GUI_GetBkColor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_getcolor.o(i.GUI_GetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = GUI_GetBkColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBkColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ClearTextBackground
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearTextBackground
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[85e]"></a>GUI_GetCharDistX</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_char.o(i.GUI_GetCharDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
</UL>

<P><STRONG><a name="[85f]"></a>GUI_GetCharDistXEx</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_char.o(i.GUI_GetCharDistXEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetOverlap
</UL>

<P><STRONG><a name="[7d1]"></a>GUI_GetClientRect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_getclientrect.o(i.GUI_GetClientRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = GUI_GetClientRect &rArr; WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[80c]"></a>GUI_GetColor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_getcolor.o(i.GUI_GetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ClearTextBackground
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearTextBackground
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradientRounded
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradient
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[828]"></a>GUI_GetCursorLayer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_selectlayer.o(i.GUI_GetCursorLayer))
<BR><BR>[Called By]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
</UL>

<P><STRONG><a name="[83e]"></a>GUI_GetFontDistY</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_char.o(i.GUI_GetFontDistY))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = GUI_GetFontDistY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CalcTextRect
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[861]"></a>GUI_GetFontInfo</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gui_getfontinfo.o(i.GUI_GetFontInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_GetFontInfo &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[862]"></a>GUI_GetFontSizeY</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_getfontsizey.o(i.GUI_GetFontSizeY))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = GUI_GetFontSizeY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetFontSizeY
</UL>
<BR>[Called By]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR__GetTextRect
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[864]"></a>GUI_GetLayerPosEx</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gui_selectlayer.o(i.GUI_GetLayerPosEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_GetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPosEx
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[866]"></a>GUI_GetOrg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_getorg.o(i.GUI_GetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_GetOrg &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetOrg
</UL>
<BR>[Called By]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[868]"></a>GUI_GetStringDistX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_getstringdistx.o(i.GUI_GetStringDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR__GetTextRect
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFocus
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CalcTextRect
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[83f]"></a>GUI_GetYAdjust</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gui_char.o(i.GUI_GetYAdjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = GUI_GetYAdjust &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[8e4]"></a>GUI_GetYDistOfFont</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_getysizeoffont.o(i.GUI_GetYDistOfFont))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetItemHeight
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__CalcMenuSizeX
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[7f3]"></a>GUI_GetYSizeOfFont</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_getysizeoffont.o(i.GUI_GetYSizeOfFont))
<BR><BR>[Called By]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetItemRect
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcTitleHeight
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFocus
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AdjustRect
</UL>

<P><STRONG><a name="[9a8]"></a>GUI_GetpfColor2IndexEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(i.GUI_GetpfColor2IndexEx))
<BR><BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>

<P><STRONG><a name="[8bc]"></a>GUI_GetpfIndex2ColorEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(i.GUI_GetpfIndex2ColorEx))
<BR><BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[82b]"></a>GUI_GotoXY</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_goto.o(i.GUI_GotoXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_GotoXY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GotoY
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GotoX
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawPart
</UL>

<P><STRONG><a name="[2fc]"></a>GUI_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, gui_core.o(i.GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = GUI_Init &rArr; WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[7db]"></a>GUI_Lock</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, gui_task.o(i.GUI_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_UnlinkTaskDevices
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_LinkDevices
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetFont
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_IsPageEnabled
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_GetActive
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_GetSkinFlexButtonSize
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRotation
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerPosEx
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetTextColor
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetBkColor
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarV
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarH
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__FillTrippleArc
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontInfo
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontSizeY
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetNextSibling
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLineStyle
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetOwnerDraw
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
</UL>

<P><STRONG><a name="[872]"></a>GUI_MEMDEV_Clear</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, guidev_clear.o(i.GUI_MEMDEV_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Clear &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[873]"></a>GUI_MEMDEV_CopyToLCD</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev.o(i.GUI_MEMDEV_CopyToLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>
<BR>[Called By]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[874]"></a>GUI_MEMDEV_CopyToLCDAt</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, guidev.o(i.GUI_MEMDEV_CopyToLCDAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCD
</UL>

<P><STRONG><a name="[878]"></a>GUI_MEMDEV_CreateEx</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, guidev.o(i.GUI_MEMDEV_CreateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[87b]"></a>GUI_MEMDEV_Delete</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, guidev.o(i.GUI_MEMDEV_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Delete &rArr; GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
</UL>

<P><STRONG><a name="[87e]"></a>GUI_MEMDEV_Draw</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, guidev_banding.o(i.GUI_MEMDEV_Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVYSizeEx
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeEx
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Min
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCD
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
</UL>

<P><STRONG><a name="[887]"></a>GUI_MEMDEV_GetBitsPerPixel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, guidev.o(i.GUI_MEMDEV_GetBitsPerPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_GetBitsPerPixel &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[889]"></a>GUI_MEMDEV_GetDataPtr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, guidev_getdataptr.o(i.GUI_MEMDEV_GetDataPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
</UL>

<P><STRONG><a name="[884]"></a>GUI_MEMDEV_GetYSize</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, guidev_getysize.o(i.GUI_MEMDEV_GetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_GetYSize &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[f7]"></a>GUI_MEMDEV_Paint1Static</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, guidev_staticdevices.o(i.GUI_MEMDEV_Paint1Static))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Paint1Static &rArr; _CreateStaticDevice &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr; WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i._Paint1)
</UL>
<P><STRONG><a name="[885]"></a>GUI_MEMDEV_ReduceYSize</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, guidev_reduceysize.o(i.GUI_MEMDEV_ReduceYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_ReduceYSize &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[877]"></a>GUI_MEMDEV_Select</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, guidev.o(i.GUI_MEMDEV_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Select &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPosition
</UL>

<P><STRONG><a name="[886]"></a>GUI_MEMDEV_SetOrg</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, guidev_setorg.o(i.GUI_MEMDEV_SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_SetOrg &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[88b]"></a>GUI_MEMDEV_Write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_write.o(i.GUI_MEMDEV_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_Write &rArr; GUI_MEMDEV_WriteAt &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[88f]"></a>GUI_MEMDEV_WriteAt</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, guidev_write.o(i.GUI_MEMDEV_WriteAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV_WriteAt &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
</UL>
<BR>[Called By]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
</UL>

<P><STRONG><a name="[87a]"></a>GUI_MEMDEV__CreateFixed</STRONG> (Thumb, 230 bytes, Stack size 64 bytes, guidev.o(i.GUI_MEMDEV__CreateFixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
</UL>

<P><STRONG><a name="[f3]"></a>GUI_MEMDEV__WriteToActiveAlpha</STRONG> (Thumb, 386 bytes, Stack size 104 bytes, guidev_writetoactivealpha.o(i.GUI_MEMDEV__WriteToActiveAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV__WriteToActiveAlpha &rArr; GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndicesEx
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[890]"></a>GUI_MEMDEV__WriteToActiveAt</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, guidev.o(i.GUI_MEMDEV__WriteToActiveAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_MEMDEV__WriteToActiveAt
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
</UL>

<P><STRONG><a name="[f2]"></a>GUI_MEMDEV__WriteToActiveOpaque</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, guidev_writetoactiveopaque.o(i.GUI_MEMDEV__WriteToActiveOpaque))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(i._GetDevFunc)
</UL>
<P><STRONG><a name="[94d]"></a>GUI_MergeRect</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gui_mergerect.o(i.GUI_MergeRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_MergeRect
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[7d2]"></a>GUI_MoveRect</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gui_moverect.o(i.GUI_MoveRect))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Screen2Client
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[897]"></a>GUI_PID_GetState</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gui_pid.o(i.GUI_PID_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_PID_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[937]"></a>GUI_PID_IsEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_pid.o(i.GUI_PID_IsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[899]"></a>GUI_PID_StoreState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_pid.o(i.GUI_PID_StoreState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_PID_StoreState &rArr; _StoreState
</UL>
<BR>[Calls]<UL><LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreState
</UL>
<BR>[Called By]<UL><LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreStateEx
</UL>

<P><STRONG><a name="[89c]"></a>GUI_PollKeyMsg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gui_onkey.o(i.GUI_PollKeyMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = GUI_PollKeyMsg &rArr; WM_OnKey &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncReadPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
</UL>

<P><STRONG><a name="[89f]"></a>GUI_ReadRectEx</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lcd_readrect.o(i.GUI_ReadRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUI_ReadRectEx &rArr; LCD_ReadRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[912]"></a>GUI_RectsIntersect</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gui_rectsintersect.o(i.GUI_RectsIntersect))
<BR><BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[8a1]"></a>GUI_RestoreContext</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_savecontext.o(i.GUI_RestoreContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_RestoreContext &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
</UL>

<P><STRONG><a name="[82a]"></a>GUI_SPRITE_SetPosition</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_sprite.o(i.GUI_SPRITE_SetPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = GUI_SPRITE_SetPosition &rArr; _SetPosition &rArr; _CreateBuffer &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
</UL>

<P><STRONG><a name="[8a3]"></a>GUI_SaveContext_W</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_savecontext.o(i.GUI_SaveContext_W))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_SaveContext_W &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
</UL>

<P><STRONG><a name="[87c]"></a>GUI_SelectLCD</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_selectlcd.o(i.GUI_SelectLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>

<P><STRONG><a name="[875]"></a>GUI_SelectLayer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gui_selectlayer.o(i.GUI_SelectLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SelectTopLevelLayer
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[4ad]"></a>GUI_SetBkColor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_setcolor.o(i.GUI_SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = GUI_SetBkColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STemWin_TTFFont_Demo
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBackWin
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPaintColors
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[4ae]"></a>GUI_SetColor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_setcolor.o(i.GUI_SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STemWin_TTFFont_Demo
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLIDER_DrawSkinFlex
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_DrawSkinFlex
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_DrawSkinFlex
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_DrawSkinFlex
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DROPDOWN_DrawSkinFlex
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_DrawSkinFlex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ClearTextBackground
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawText
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawOverlap
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArrow
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawText
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFocus
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearTextBackground
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillTrippleArc
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTwinArc4
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTwinArc2
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__DrawBk
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFrame
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawButton
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArrow
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawThumbV
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawThumbH
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawShaftV
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawShaftH
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGraspV
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGraspH
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFrame
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTriangle
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawSpinEffect
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPaintColors
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[48b]"></a>GUI_SetDefaultFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_core.o(i.GUI_SetDefaultFont))
<BR><BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[7f7]"></a>GUI_SetDrawMode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_setdrawmode.o(i.GUI_SetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = GUI_SetDrawMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>

<P><STRONG><a name="[4b0]"></a>GUI_SetFont</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_setfont.o(i.GUI_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_SetFont &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STemWin_TTFFont_Demo
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_DrawSkinFlex
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_DrawSkinFlex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFont
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawText
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawText
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_OwnerDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[829]"></a>GUI_SetLayerPosEx</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gui_selectlayer.o(i.GUI_SetLayerPosEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_SetLayerPosEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPosEx
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
</UL>

<P><STRONG><a name="[808]"></a>GUI_SetLineStyle</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_setlinestyle.o(i.GUI_SetLineStyle))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_SetLineStyle &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>

<P><STRONG><a name="[86f]"></a>GUI_SetOrg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gui_setorg.o(i.GUI_SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_SetOrg &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[806]"></a>GUI_SetPenSize</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_pen.o(i.GUI_SetPenSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_SetPenSize &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>

<P><STRONG><a name="[807]"></a>GUI_SetTextAlign</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_settextalign.o(i.GUI_SetTextAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_SetTextAlign &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>

<P><STRONG><a name="[7d3]"></a>GUI_SetTextMode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_settextmode.o(i.GUI_SetTextMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_SetTextMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_DrawSkinFlex
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_DrawSkinFlex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawText
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawText
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[89b]"></a>GUI_SignalEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_waitevent.o(i.GUI_SignalEvent))
<BR><BR>[Called By]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_StoreState
</UL>

<P><STRONG><a name="[8a6]"></a>GUI_StoreKey</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_onkey.o(i.GUI_StoreKey))
<BR><BR>[Calls]<UL><LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBackWin
</UL>

<P><STRONG><a name="[8a7]"></a>GUI_TIMER_Delete</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gui_timer.o(i.GUI_TIMER_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unlink
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFromLinList
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
</UL>

<P><STRONG><a name="[8aa]"></a>GUI_TIMER_GetFlag</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gui_timer.o(i.GUI_TIMER_GetFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = GUI_TIMER_GetFlag &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[8ab]"></a>GUI_TIMER__GetFirstTimer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_timer.o(i.GUI_TIMER__GetFirstTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_TIMER__GetFirstTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[8ac]"></a>GUI_TIMER__GetNextTimerLin</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gui_timer.o(i.GUI_TIMER__GetNextTimerLin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_TIMER__GetNextTimerLin
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[49a]"></a>GUI_TOUCH_Calibrate</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, gui_touch_driveranalog.o(i.GUI_TOUCH_Calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_TOUCH_Calibrate &rArr; LCD_GetYSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetMinMax
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Log2Phys
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[2e8]"></a>GUI_TOUCH_Exec</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, gui_touch_driveranalog.o(i.GUI_TOUCH_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUI_TOUCH_Exec &rArr; GUI_TOUCH_X_MeasureY &rArr; TOUCH_ReadData &rArr; SPI1_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_X_MeasureY
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_X_MeasureX
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_X_ActivateY
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_X_ActivateX
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreUnstable
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetMinMax
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
</UL>

<P><STRONG><a name="[49b]"></a>GUI_TOUCH_SetOrientation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_touch_driveranalog.o(i.GUI_TOUCH_SetOrientation))
<BR><BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[8b2]"></a>GUI_TOUCH_StoreState</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gui_touch_storestate.o(i.GUI_TOUCH_StoreState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_TOUCH_StoreState &rArr; GUI_TOUCH_StoreStateEx &rArr; GUI_PID_StoreState &rArr; _StoreState
</UL>
<BR>[Calls]<UL><LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreStateEx
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreUnstable
</UL>

<P><STRONG><a name="[8b3]"></a>GUI_TOUCH_StoreStateEx</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gui_touch.o(i.GUI_TOUCH_StoreStateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_TOUCH_StoreStateEx &rArr; GUI_PID_StoreState &rArr; _StoreState
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_StoreState
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreState
</UL>

<P><STRONG><a name="[8b4]"></a>GUI_TOUCH_StoreUnstable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gui_touch_storeunstable.o(i.GUI_TOUCH_StoreUnstable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_TOUCH_StoreUnstable &rArr; GUI_TOUCH_StoreState &rArr; GUI_TOUCH_StoreStateEx &rArr; GUI_PID_StoreState &rArr; _StoreState
</UL>
<BR>[Calls]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreState
</UL>
<BR>[Called By]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreUnstable
</UL>

<P><STRONG><a name="[68f]"></a>GUI_UC__GetCharCodeInc</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gui_uc.o(i.GUI_UC__GetCharCodeInc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLineAA
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearLineAA
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearLine
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__ClearLine
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[843]"></a>GUI_UC__NumChars2NumBytes</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gui_uc.o(i.GUI_UC__NumChars2NumBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__NumChars2NumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[977]"></a>GUI_USAGE_AddRect</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, guidev_usage.o(i.GUI_USAGE_AddRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_USAGE_AddRect
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[891]"></a>GUI_USAGE_BM_Create</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>
<BR>[Called By]<UL><LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[87d]"></a>GUI_USAGE_DecUseCnt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, guidev_usage.o(i.GUI_USAGE_DecUseCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>

<P><STRONG><a name="[7dc]"></a>GUI_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_task.o(i.GUI_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GUI_Unlock &rArr; GUI_X_Unlock &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetFont
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_IsPageEnabled
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_GetActive
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_GetSkinFlexButtonSize
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRotation
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerPosEx
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetTextColor
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetBkColor
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarV
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarH
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__FillTrippleArc
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontInfo
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontSizeY
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetNextSibling
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLineStyle
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetOwnerDraw
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
</UL>

<P><STRONG><a name="[857]"></a>GUI__AddSpaceHex</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gui__addspacehex.o(i.GUI__AddSpaceHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI__AddSpaceHex &rArr; GUI_AddHex
</UL>
<BR>[Calls]<UL><LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddHex
</UL>
<BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ErrorOut1
</UL>

<P><STRONG><a name="[892]"></a>GUI__AllocAlphaBuffer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gui__alpha.o(i.GUI__AllocAlphaBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = GUI__AllocAlphaBuffer &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
</UL>

<P><STRONG><a name="[8b7]"></a>GUI__AlphaSuppressMixing</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_setalpha.o(i.GUI__AlphaSuppressMixing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__AlphaSuppressMixing
</UL>
<BR>[Calls]<UL><LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AA_SetAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[7e8]"></a>GUI__CalcTextRect</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, gui__calctextrect.o(i.GUI__CalcTextRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = GUI__CalcTextRect &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_OwnerDraw
</UL>

<P><STRONG><a name="[690]"></a>GUI__ClearTextBackground</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, gui_dispstringinrectex.o(i.GUI__ClearTextBackground))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = GUI__ClearTextBackground &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearLineAA
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearLine
</UL>

<P><STRONG><a name="[970]"></a>GUI__CompactPixelIndices</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, gui__compactpixelindices.o(i.GUI__CompactPixelIndices))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Convert8
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Convert16
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushBuffer
</UL>

<P><STRONG><a name="[894]"></a>GUI__CompactPixelIndicesEx</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, gui__compactpixelindices.o(i.GUI__CompactPixelIndicesEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI__CompactPixelIndicesEx
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
</UL>

<P><STRONG><a name="[86c]"></a>GUI__Config</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gui_core.o(i.GUI__Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = GUI__Config &rArr; LCD_X_Config &rArr; GUI_DEVICE_CreateAndLink &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[842]"></a>GUI__DispLine</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, gui_charline.o(i.GUI__DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; _FindNext_IVR &rArr; _Findy1 &rArr;  _Findy1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>
<BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[849]"></a>GUI__DispStringInRect</STRONG> (Thumb, 320 bytes, Stack size 72 bytes, gui_dispstringinrect.o(i.GUI__DispStringInRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__HandleEOLine
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
</UL>
<BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
</UL>

<P><STRONG><a name="[96b]"></a>GUI__DivideRound32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gui__divideround32.o(i.GUI__DivideRound32))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[893]"></a>GUI__DoAlphaBlending</STRONG> (Thumb, 442 bytes, Stack size 104 bytes, gui__alpha.o(i.GUI__DoAlphaBlending))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ExpandPixelIndicesEx
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRectEx
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__MixColors
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
</UL>

<P><STRONG><a name="[7e5]"></a>GUI__DrawTwinArc2</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, gui__drawtwinarc.o(i.GUI__DrawTwinArc2))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = GUI__DrawTwinArc2 &rArr; _DrawTwinArc2 &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTwinArc2
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
</UL>

<P><STRONG><a name="[7c8]"></a>GUI__DrawTwinArc4</STRONG> (Thumb, 104 bytes, Stack size 80 bytes, gui__drawtwinarc.o(i.GUI__DrawTwinArc4))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = GUI__DrawTwinArc4 &rArr; _DrawTwinArc4 &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTwinArc4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
</UL>

<P><STRONG><a name="[8bd]"></a>GUI__ExpandPixelIndicesEx</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, gui__expandpixelindices.o(i.GUI__ExpandPixelIndicesEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__ExpandPixelIndicesEx
</UL>
<BR>[Called By]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
</UL>

<P><STRONG><a name="[8c0]"></a>GUI__FillTrippleArc</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, gui__drawtwinarc.o(i.GUI__FillTrippleArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = GUI__FillTrippleArc &rArr; _FillTrippleArc &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillTrippleArc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_DrawSkinFlex
</UL>

<P><STRONG><a name="[8b6]"></a>GUI__GetAlphaBuffer</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, gui__alpha.o(i.GUI__GetAlphaBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
</UL>

<P><STRONG><a name="[863]"></a>GUI__GetFontSizeY</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui__getfontsizey.o(i.GUI__GetFontSizeY))
<BR><BR>[Called By]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontSizeY
</UL>

<P><STRONG><a name="[841]"></a>GUI__GetLineDistX</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gui_charline.o(i.GUI__GetLineDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetOverlap
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[840]"></a>GUI__GetLineNumChars</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gui_charline.o(i.GUI__GetLineNumChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI__GetLineNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[869]"></a>GUI__GetNumChars</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui__getnumchars.o(i.GUI__GetNumChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__GetNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
</UL>

<P><STRONG><a name="[867]"></a>GUI__GetOrg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_getorg.o(i.GUI__GetOrg))
<BR><BR>[Called By]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
</UL>

<P><STRONG><a name="[80f]"></a>GUI__GetOverlap</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_charline.o(i.GUI__GetOverlap))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__ClearLine
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
</UL>

<P><STRONG><a name="[8ba]"></a>GUI__HandleEOLine</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui__handleeoline.o(i.GUI__HandleEOLine))
<BR><BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[944]"></a>GUI__IntersectRect</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gui__intersectrect.o(i.GUI__IntersectRect))
<BR><BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
</UL>

<P><STRONG><a name="[847]"></a>GUI__IntersectRects</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gui__intersectrects.o(i.GUI__IntersectRects))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>

<P><STRONG><a name="[8c3]"></a>GUI__ManageCache</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui__managecache.o(i.GUI__ManageCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI__ManageCache &rArr; GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCacheEx
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[8c4]"></a>GUI__ManageCacheEx</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, gui__managecache.o(i.GUI__ManageCacheEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
</UL>

<P><STRONG><a name="[29]"></a>GUI__MixColors</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gui__alpha.o(i.GUI__MixColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI__MixColors
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__MixColorsBulk
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine32BPP_DDB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__alpha.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>GUI__MixColorsBulk</STRONG> (Thumb, 78 bytes, Stack size 36 bytes, gui__alpha.o(i.GUI__MixColorsBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GUI__MixColorsBulk &rArr; GUI__MixColors
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__MixColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__alpha.o(.data)
</UL>
<P><STRONG><a name="[84c]"></a>GUI__ReduceRect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gui__reducerect.o(i.GUI__ReduceRect))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawText
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawSpinEffect
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[813]"></a>GUI__RegisterExit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_core.o(i.GUI__RegisterExit))
<BR><BR>[Called By]<UL><LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>

<P><STRONG><a name="[814]"></a>GUI__memset</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gui__memset.o(i.GUI__memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__memset
</UL>
<BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ErrorOut1
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GenCheck
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[98d]"></a>GUI__memset16</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gui__memset16.o(i.GUI__memset16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__memset16
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>

<P><STRONG><a name="[986]"></a>GUI__sqrt32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gui__sqrt32.o(i.GUI__sqrt32))
<BR><BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRoundedRect
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradientRounded
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTwinArcPara
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTrippleArcPara
</UL>

<P><STRONG><a name="[7ff]"></a>GUI_cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_drawline.o(i.GUI_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_cos &rArr; GUI_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[800]"></a>GUI_sin</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gui_drawline.o(i.GUI_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_cos
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[79]"></a>HEADER_DrawSkinFlex</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, header_skinflex.o(i.HEADER_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = HEADER_DrawSkinFlex &rArr; _DrawText &rArr; GUI_DispStringInRect &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawText
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawOverlap
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArrow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2ee]"></a>HEADER_SetDefaultSkin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, header_skin.o(i.HEADER_SetDefaultSkin))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emwindemo_task
</UL>

<P><STRONG><a name="[8dc]"></a>LCD_AA_MixColors16</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd_aa.o(i.LCD_AA_MixColors16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_AA_MixColors16
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_Trans
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_NoTrans
</UL>

<P><STRONG><a name="[8dd]"></a>LCD_AA_MixColors256</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_aa.o(i.LCD_AA_MixColors256))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_AA_MixColors256
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_Trans
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawCharAA8_NoTrans
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_NoTrans
</UL>

<P><STRONG><a name="[8b8]"></a>LCD_AA_SetAndMask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_aa.o(i.LCD_AA_SetAndMask))
<BR><BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AlphaSuppressMixing
</UL>

<P><STRONG><a name="[8d7]"></a>LCD_Color2Index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(i.LCD_Color2Index))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_Trans
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableUncached
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkColor
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_NoTrans
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_Trans
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_NoTrans
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[68b]"></a>LCD_DrawBitmap</STRONG> (Thumb, 504 bytes, Stack size 88 bytes, lcd.o(i.LCD_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RequestGlyph
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawCharAA8_Trans
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_HT
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
</UL>

<P><STRONG><a name="[d9]"></a>LCD_DrawHLine</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lcd.o(i.LCD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRoundedRect
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillTrippleArc
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTwinArc4
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTwinArc2
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gui_core.o(.constdata)
<LI> gui_drawgradient.o(i.GUI_DrawGradientV)
<LI> gui_drawgradientrounded.o(i.GUI_DrawGradientRoundedV)
</UL>
<P><STRONG><a name="[274]"></a>LCD_DrawPixel</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lcd.o(i.LCD_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRoundedRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>LCD_DrawVLine</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lcd.o(i.LCD_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DrawVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRoundedRect
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawgradient.o(i.GUI_DrawGradientH)
</UL>
<P><STRONG><a name="[80a]"></a>LCD_FillRect</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lcd.o(i.LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ClearTextBackground
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__DrawBitmap_1bpp
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapCW
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearTextBackground
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradient
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[8ca]"></a>LCD_GetBitsPerPixelEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetBitsPerPixelEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetBitsPerPixelEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[85c]"></a>LCD_GetBkColorIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_getcolorindex.o(i.LCD_GetBkColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
</UL>

<P><STRONG><a name="[860]"></a>LCD_GetColorIndex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_getcolorindex.o(i.LCD_GetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
</UL>

<P><STRONG><a name="[8cc]"></a>LCD_GetNumColors</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetNumColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumColors &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetIndexMask_0
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[8cd]"></a>LCD_GetNumColorsEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetNumColorsEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumColorsEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[8ce]"></a>LCD_GetNumLayers</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd_getnumdisplays.o(i.LCD_GetNumLayers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumLayers
</UL>
<BR>[Calls]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[8cf]"></a>LCD_GetPalette</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetPalette))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetPalette &rArr; LCD_GetPaletteEx
</UL>
<BR>[Calls]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPaletteEx
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[8d0]"></a>LCD_GetPaletteEx</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_getex.o(i.LCD_GetPaletteEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetPaletteEx
</UL>
<BR>[Calls]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
</UL>

<P><STRONG><a name="[8d1]"></a>LCD_GetPixelColor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd_getpixelcolor.o(i.LCD_GetPixelColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_GetPixelColor &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_Trans
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_Trans
</UL>

<P><STRONG><a name="[8d2]"></a>LCD_GetPixelIndex</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lcd_getp.o(i.LCD_GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelColor
</UL>

<P><STRONG><a name="[865]"></a>LCD_GetPosEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_GetPosEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetPosEx
</UL>
<BR>[Calls]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
</UL>

<P><STRONG><a name="[881]"></a>LCD_GetVXSizeEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetVXSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetVXSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[8c2]"></a>LCD_GetVXSizeMax</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetVXSizeMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_GetVXSizeMax &rArr; _GetMaxValue &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMaxValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>

<P><STRONG><a name="[882]"></a>LCD_GetVYSizeEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetVYSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetVYSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[8d4]"></a>LCD_GetXSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetXSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetXSize &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[87f]"></a>LCD_GetXSizeEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetXSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetXSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Calibrate
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDeviceRect
</UL>

<P><STRONG><a name="[8d5]"></a>LCD_GetYSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetYSize &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[880]"></a>LCD_GetYSizeEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD_GetYSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetYSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Calibrate
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDeviceRect
</UL>

<P><STRONG><a name="[6]"></a>LCD_GetpPalConvTableBM</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_color.o(i.LCD_GetpPalConvTableBM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetpPalConvTableBM &rArr; LCD_GetpPalConvTableUncached
</UL>
<BR>[Calls]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableUncached
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(.data)
</UL>
<P><STRONG><a name="[8d6]"></a>LCD_GetpPalConvTableUncached</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcd_color.o(i.LCD_GetpPalConvTableUncached))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetpPalConvTableUncached
</UL>
<BR>[Calls]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawCharAA8_NoTrans
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableBM
</UL>

<P><STRONG><a name="[85d]"></a>LCD_Index2Color</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(i.LCD_Index2Color))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_Trans
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawCharAA8_NoTrans
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelColor
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_NoTrans
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_Trans
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_NoTrans
</UL>

<P><STRONG><a name="[dd]"></a>LCD_Index2Color_888</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guicc_888_index2color.o(i.LCD_Index2Color_888))
<BR>[Address Reference Count : 1]<UL><LI> gui__alpha.o(i.GUI__DoAlphaBlending)
</UL>
<P><STRONG><a name="[da]"></a>LCD_Index2Color_8888</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guicc_8888_index2color.o(i.LCD_Index2Color_8888))
<BR>[Address Reference Count : 3]<UL><LI> gui__alpha.o(i.GUI__DoAlphaBlending)
<LI> guicc_8888.o(.constdata)
<LI> guidev_writetoactivealpha.o(i.GUI_MEMDEV__WriteToActiveAlpha)
</UL>
<P><STRONG><a name="[276]"></a>LCD_Index2Color_M565</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, guicc_m565.o(i.LCD_Index2Color_M565))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Index2Color_M565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[8d8]"></a>LCD_InitColors</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd_color.o(i.LCD_InitColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = LCD_InitColors &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
</UL>

<P><STRONG><a name="[8d9]"></a>LCD_InitLUT</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lcd_color.o(i.LCD_InitLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = LCD_InitLUT &rArr; GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
</UL>
<BR>[Called By]<UL><LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
</UL>

<P><STRONG><a name="[8a4]"></a>LCD_SelectLCD</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lcd_selectlcd.o(i.LCD_SelectLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SelectLCD
</UL>
<BR>[Calls]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[7e9]"></a>LCD_SetBkColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetBkColor))
<BR><BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawPart
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_OwnerDraw
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[8df]"></a>LCD_SetBkColorIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetBkColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkColor
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[8db]"></a>LCD_SetClipRectEx</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lcd_setcliprectex.o(i.LCD_SetClipRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
</UL>

<P><STRONG><a name="[88e]"></a>LCD_SetClipRectMax</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetClipRectMax))
<BR><BR>[Called By]<UL><LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
</UL>

<P><STRONG><a name="[7ea]"></a>LCD_SetColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetColor))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_DrawSkinFlex
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradientRounded
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradient
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawPart
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_OwnerDraw
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[8de]"></a>LCD_SetColorIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[809]"></a>LCD_SetDrawMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetDrawMode))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emWin_LCD_Init
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
</UL>

<P><STRONG><a name="[8da]"></a>LCD_SetLUTEntryEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetLUTEntryEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetLUTEntryEx
</UL>
<BR>[Calls]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[e0]"></a>LCD_SetPixelAA4_NoTrans</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lcd_aa.o(i.LCD_SetPixelAA4_NoTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SetPixelAA4_NoTrans &rArr; LCD_AA_MixColors16
</UL>
<BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AA_MixColors16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_aa.o(i.LCD__GetPfSetPixel)
</UL>
<P><STRONG><a name="[e1]"></a>LCD_SetPixelAA4_Trans</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, lcd_aa.o(i.LCD_SetPixelAA4_Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_SetPixelAA4_Trans &rArr; LCD_GetPixelColor &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelColor
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AA_MixColors16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_aa.o(i.LCD__GetPfSetPixel)
</UL>
<P><STRONG><a name="[e2]"></a>LCD_SetPixelAA8_NoTrans</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lcd_aa.o(i.LCD_SetPixelAA8_NoTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SetPixelAA8_NoTrans &rArr; LCD_AA_MixColors256
</UL>
<BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AA_MixColors256
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_aa.o(i.LCD__GetPfSetPixel)
</UL>
<P><STRONG><a name="[e3]"></a>LCD_SetPixelAA8_Trans</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, lcd_aa.o(i.LCD_SetPixelAA8_Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_SetPixelAA8_Trans &rArr; LCD_GetPixelColor &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AA_MixColors256
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelColor
</UL>
<BR>[Called By]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawCharAA8_Trans
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_aa.o(i.LCD__GetPfSetPixel)
</UL>
<P><STRONG><a name="[8a5]"></a>LCD_SetPosEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetPosEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetPosEx
</UL>
<BR>[Calls]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerPosEx
</UL>

<P><STRONG><a name="[498]"></a>LCD_SetSizeEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[499]"></a>LCD_SetVSizeEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lcd_set.o(i.LCD_SetVSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetVSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[88d]"></a>LCD_UpdateColorIndices</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_updatecolorindices.o(i.LCD_UpdateColorIndices))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_UpdateColorIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
</UL>

<P><STRONG><a name="[8e0]"></a>LCD__DrawBitmap_1bpp</STRONG> (Thumb, 424 bytes, Stack size 104 bytes, lcd.o(i.LCD__DrawBitmap_1bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD__DrawBitmap_1bpp &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>

<P><STRONG><a name="[494]"></a>LCD__GetBPP</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, lcd_getex.o(i.LCD__GetBPP))
<BR><BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
</UL>

<P><STRONG><a name="[888]"></a>LCD__GetBPPDevice</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, lcd_getex.o(i.LCD__GetBPPDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD__GetBPPDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPP
</UL>
<BR>[Called By]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[97f]"></a>LCD__GetPfSetPixel</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lcd_aa.o(i.LCD__GetPfSetPixel))
<BR><BR>[Called By]<UL><LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7a]"></a>MENU_DrawSkinFlex</STRONG> (Thumb, 1120 bytes, Stack size 64 bytes, menu_skinflex.o(i.MENU_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = MENU_DrawSkinFlex &rArr; GUI_DrawGradientRoundedV &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_SkinEnableArrow
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2ef]"></a>MENU_SetDefaultSkin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_skin.o(i.MENU_SetDefaultSkin))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emwindemo_task
</UL>

<P><STRONG><a name="[8e1]"></a>MENU_SkinEnableArrow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, menu_skin.o(i.MENU_SkinEnableArrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MENU_SkinEnableArrow
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU_DrawSkinFlex
</UL>

<P><STRONG><a name="[8e2]"></a>MENU__CalcMenuSizeX</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, menu.o(i.MENU__CalcMenuSizeX))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = MENU__CalcMenuSizeX &rArr; MENU__GetItemWidth &rArr; MENU__GetEffectSize &rArr; MENU__HasEffect &rArr; _IsTopLevelMenu &rArr; MENU__SendMenuMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetItemWidth
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYDistOfFont
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetNumItems
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetEffectSize
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[8e6]"></a>MENU__CalcMenuSizeY</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, menu.o(i.MENU__CalcMenuSizeY))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = MENU__CalcMenuSizeY &rArr; MENU__GetItemHeight &rArr; MENU__GetEffectSize &rArr; MENU__HasEffect &rArr; _IsTopLevelMenu &rArr; MENU__SendMenuMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetItemHeight
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetNumItems
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetEffectSize
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[8e5]"></a>MENU__GetEffectSize</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, menu.o(i.MENU__GetEffectSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = MENU__GetEffectSize &rArr; MENU__HasEffect &rArr; _IsTopLevelMenu &rArr; MENU__SendMenuMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__HasEffect
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetItemWidth
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetItemHeight
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__CalcMenuSizeY
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__CalcMenuSizeX
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[f5]"></a>MENU__GetItemHeight</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, menu.o(i.MENU__GetItemHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = MENU__GetItemHeight &rArr; MENU__GetEffectSize &rArr; MENU__HasEffect &rArr; _IsTopLevelMenu &rArr; MENU__SendMenuMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYDistOfFont
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetEffectSize
</UL>
<BR>[Called By]<UL><LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__CalcMenuSizeY
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_skin.o(i._Paint)
</UL>
<P><STRONG><a name="[f6]"></a>MENU__GetItemWidth</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, menu.o(i.MENU__GetItemWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = MENU__GetItemWidth &rArr; MENU__GetEffectSize &rArr; MENU__HasEffect &rArr; _IsTopLevelMenu &rArr; MENU__SendMenuMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetEffectSize
</UL>
<BR>[Called By]<UL><LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__CalcMenuSizeX
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_skin.o(i._Paint)
</UL>
<P><STRONG><a name="[8e3]"></a>MENU__GetNumItems</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu.o(i.MENU__GetNumItems))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MENU__GetNumItems &rArr; GUI_ARRAY_GetNumItems
</UL>
<BR>[Calls]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
</UL>
<BR>[Called By]<UL><LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__CalcMenuSizeY
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__CalcMenuSizeX
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[8e7]"></a>MENU__HasEffect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, menu.o(i.MENU__HasEffect))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = MENU__HasEffect &rArr; _IsTopLevelMenu &rArr; MENU__SendMenuMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsTopLevelMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetEffectSize
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[8e9]"></a>MENU__SendMenuMessage</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, menu.o(i.MENU__SendMenuMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = MENU__SendMenuMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsTopLevelMenu
</UL>

<P><STRONG><a name="[7b]"></a>MULTIPAGE_DrawSkinFlex</STRONG> (Thumb, 636 bytes, Stack size 64 bytes, multipage_skinflex.o(i.MULTIPAGE_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_DrawSkinFlex &rArr; GUI_DispStringInRectEx &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_GetFont
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[8ec]"></a>MULTIPAGE_GetFont</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, multipage.o(i.MULTIPAGE_GetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_GetFont &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_DrawSkinFlex
</UL>

<P><STRONG><a name="[8ed]"></a>MULTIPAGE_IsPageEnabled</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, multipage.o(i.MULTIPAGE_IsPageEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_IsPageEnabled &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[e4]"></a>MULTIPAGE_SKIN__GetTouchedPage</STRONG> (Thumb, 566 bytes, Stack size 136 bytes, multipage_skin.o(i.MULTIPAGE_SKIN__GetTouchedPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE_SKIN__GetTouchedPage &rArr; MULTIPAGE__GetItemRect &rArr; _GetItemWidth &rArr; MULTIPAGE__GetPagePos &rArr; MULTIPAGE__GetPageWidth &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetItemRect
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsBetween
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multipage_skinflex.o(i.MULTIPAGE_DrawSkinFlex)
</UL>
<P><STRONG><a name="[2f0]"></a>MULTIPAGE_SetDefaultSkin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, multipage_skin.o(i.MULTIPAGE_SetDefaultSkin))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emwindemo_task
</UL>

<P><STRONG><a name="[8f2]"></a>MULTIPAGE__CalcBorderRect</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, multipage.o(i.MULTIPAGE__CalcBorderRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MULTIPAGE__CalcBorderRect &rArr; _AdjustRect
</UL>
<BR>[Calls]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AdjustRect
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
</UL>
<BR>[Called By]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetItemRect
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[8ef]"></a>MULTIPAGE__GetItemRect</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, multipage.o(i.MULTIPAGE__GetItemRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE__GetItemRect &rArr; _GetItemWidth &rArr; MULTIPAGE__GetPagePos &rArr; MULTIPAGE__GetPageWidth &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__CalcBorderRect
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYSizeOfFont
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetTouchedPage
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTouchedPage
</UL>

<P><STRONG><a name="[8f6]"></a>MULTIPAGE__GetPagePos</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, multipage.o(i.MULTIPAGE__GetPagePos))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE__GetPagePos &rArr; MULTIPAGE__GetPageWidth &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetItemWidth
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[8f1]"></a>MULTIPAGE__GetPageWidth</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, multipage.o(i.MULTIPAGE__GetPageWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = MULTIPAGE__GetPageWidth &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetYSize
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetXSize
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPagePos
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetTouchedPage
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTouchedPage
</UL>

<P><STRONG><a name="[7c]"></a>PROGBAR_DrawSkinFlex</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, progbar_skinflex.o(i.PROGBAR_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = PROGBAR_DrawSkinFlex &rArr; _DrawBackground &rArr; GUI_DrawGradientH &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackground
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2f1]"></a>PROGBAR_SetDefaultSkin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, progbar_skin.o(i.PROGBAR_SetDefaultSkin))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emwindemo_task
</UL>

<P><STRONG><a name="[8f8]"></a>PROGBAR__GetTextLocked</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, progbar.o(i.PROGBAR__GetTextLocked))
<BR><BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[8f9]"></a>PROGBAR__GetTextRect</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, progbar.o(i.PROGBAR__GetTextRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = PROGBAR__GetTextRect &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontSizeY
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[99d]"></a>PROGBAR__Value2Pos</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, progbar.o(i.PROGBAR__Value2Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PROGBAR__Value2Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[7d]"></a>RADIO_DrawSkinFlex</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, radio_skinflex.o(i.RADIO_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = RADIO_DrawSkinFlex &rArr; GUI__FillTrippleArc &rArr; _FillTrippleArc &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__FillTrippleArc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2f2]"></a>RADIO_SetDefaultSkin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, radio_skin.o(i.RADIO_SetDefaultSkin))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emwindemo_task
</UL>

<P><STRONG><a name="[28]"></a>RADIO__GetButtonSize</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, radio.o(i.RADIO__GetButtonSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RADIO__GetButtonSize
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>SCROLLBAR_DrawSkinFlex</STRONG> (Thumb, 374 bytes, Stack size 72 bytes, scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = SCROLLBAR_DrawSkinFlex &rArr; WIDGET__DrawTriangle &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__RotateRect90
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawTriangle
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetArrowPara
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2f3]"></a>SCROLLBAR_SetDefaultSkin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, scrollbar_skin.o(i.SCROLLBAR_SetDefaultSkin))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emwindemo_task
</UL>

<P><STRONG><a name="[96a]"></a>SCROLLBAR__Rect2VRect</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, scrollbar.o(i.SCROLLBAR__Rect2VRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCROLLBAR__Rect2VRect
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[7f]"></a>SLIDER_DrawSkinFlex</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, slider_skinflex.o(i.SLIDER_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = SLIDER_DrawSkinFlex &rArr; _DrawThumbV &rArr; GUI_DrawGradientH &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLIDER_GetFlag
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawThumbV
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawThumbH
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawShaftV
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawShaftH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[901]"></a>SLIDER_GetFlag</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, slider.o(i.SLIDER_GetFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SLIDER_GetFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLIDER_DrawSkinFlex
</UL>

<P><STRONG><a name="[2f4]"></a>SLIDER_SetDefaultSkin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, slider_skin.o(i.SLIDER_SetDefaultSkin))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emwindemo_task
</UL>

<P><STRONG><a name="[80]"></a>SPINBOX_DrawSkinFlex</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, spinbox_skinflex.o(i.SPINBOX_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = SPINBOX_DrawSkinFlex &rArr; _DrawButton &rArr; GUI_DrawGradientV &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__DrawBk
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFrame
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawButton
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArrow
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__ApplyProps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2f5]"></a>SPINBOX_SetDefaultSkin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spinbox_skin.o(i.SPINBOX_SetDefaultSkin))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emwindemo_task
</UL>

<P><STRONG><a name="[902]"></a>SPINBOX__ApplyProps</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spinbox_skin.o(i.SPINBOX__ApplyProps))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = SPINBOX__ApplyProps &rArr; EDIT_SetTextColor &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetTextColor
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetBkColor
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX_DrawSkinFlex
</UL>

<P><STRONG><a name="[904]"></a>SPINBOX__DrawBk</STRONG> (Thumb, 198 bytes, Stack size 80 bytes, spinbox.o(i.SPINBOX__DrawBk))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = SPINBOX__DrawBk &rArr; GUI_FillRectEx &rArr; GUI_FillRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectEx
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX_DrawSkinFlex
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[908]"></a>SPINBOX__GetButtonRect</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, spinbox.o(i.SPINBOX__GetButtonRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPINBOX__GetButtonRect
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__GetButtonRectEx
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[909]"></a>SPINBOX__GetButtonRectEx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spinbox.o(i.SPINBOX__GetButtonRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPINBOX__GetButtonRectEx &rArr; SPINBOX__GetButtonRect
</UL>
<BR>[Calls]<UL><LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__GetButtonRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[90a]"></a>WIDGET_AndState</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, widget.o(i.WIDGET_AndState))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = WIDGET_AndState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
</UL>

<P><STRONG><a name="[2b0]"></a>WIDGET_EFFECT_3D_DrawUp</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, widget_effect_3d.o(i.WIDGET_EFFECT_3D_DrawUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = WIDGET_EFFECT_3D_DrawUp &rArr; _DrawUpRect &rArr; GUI_DrawRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_3d.o(.constdata)
</UL>
<P><STRONG><a name="[995]"></a>WIDGET_GetDefaultEffect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, widget.o(i.WIDGET_GetDefaultEffect))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetButtonSize
</UL>

<P><STRONG><a name="[90b]"></a>WIDGET_OrState</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, widget.o(i.WIDGET_OrState))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = WIDGET_OrState &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonPressed
</UL>

<P><STRONG><a name="[90c]"></a>WIDGET__DrawFocusRect</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, widget.o(i.WIDGET__DrawFocusRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = WIDGET__DrawFocusRect &rArr; GUI_DrawFocusRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__RotateRect90
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[8fc]"></a>WIDGET__DrawTriangle</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, widget.o(i.WIDGET__DrawTriangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = WIDGET__DrawTriangle &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_DrawSkinFlex
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[90d]"></a>WIDGET__DrawVLine</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, widget.o(i.WIDGET__DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = WIDGET__DrawVLine &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__RotateRect90
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[9a0]"></a>WIDGET__EFFECT_DrawDown</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, widget.o(i.WIDGET__EFFECT_DrawDown))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[90e]"></a>WIDGET__EFFECT_DrawDownRect</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, widget.o(i.WIDGET__EFFECT_DrawDownRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = WIDGET__EFFECT_DrawDownRect &rArr; WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__RotateRect90
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EffectRequiresRedraw
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[910]"></a>WIDGET__EFFECT_DrawUpRect</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, widget.o(i.WIDGET__EFFECT_DrawUpRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WIDGET__EFFECT_DrawUpRect &rArr; _EffectRequiresRedraw
</UL>
<BR>[Calls]<UL><LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__RotateRect90
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EffectRequiresRedraw
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[911]"></a>WIDGET__FillRectEx</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, widget.o(i.WIDGET__FillRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = WIDGET__FillRectEx &rArr; GUI_FillRectEx &rArr; GUI_FillRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectEx
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__RotateRect90
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[7eb]"></a>WIDGET__FillStringInRect</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, widget_fillstringinrect.o(i.WIDGET__FillStringInRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = WIDGET__FillStringInRect &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_OwnerDraw
</UL>

<P><STRONG><a name="[913]"></a>WIDGET__GetBkColor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, widget.o(i.WIDGET__GetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = WIDGET__GetBkColor &rArr; WM_GetBkColor &rArr; WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIALOG_GetBkColor
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetBkColor
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[916]"></a>WIDGET__GetClientRect</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, widget.o(i.WIDGET__GetClientRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = WIDGET__GetClientRect &rArr; WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[96c]"></a>WIDGET__GetXSize</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, widget.o(i.WIDGET__GetXSize))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[96d]"></a>WIDGET__GetYSize</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, widget.o(i.WIDGET__GetYSize))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[8fa]"></a>WIDGET__RotateRect90</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, widget.o(i.WIDGET__RotateRect90))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WIDGET__RotateRect90
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_DrawSkinFlex
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillRectEx
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawUpRect
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDownRect
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawVLine
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawFocusRect
</UL>

<P><STRONG><a name="[876]"></a>WM_Activate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm.o(i.WM_Activate))
<BR><BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[917]"></a>WM_BringToBottom</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, wm_bringtobottom.o(i.WM_BringToBottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = WM_BringToBottom &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[91a]"></a>WM_CreateWindowAsChild</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, wm.o(i.WM_CreateWindowAsChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
</UL>

<P><STRONG><a name="[88c]"></a>WM_Deactivate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm.o(i.WM_Deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = WM_Deactivate &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
</UL>

<P><STRONG><a name="[91e]"></a>WM_DefaultProc</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wm.o(i.WM_DefaultProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBackWin
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>

<P><STRONG><a name="[921]"></a>WM_DeleteTimer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_timer.o(i.WM_DeleteTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = WM_DeleteTimer &rArr; GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[922]"></a>WM_DeleteWindow</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, wm.o(i.WM_DeleteWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = WM_DeleteWindow &rArr; WM_NotifyParent &rArr; WM_SendToParent &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteAllChildren
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveFromLinList
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteAllChildren
</UL>

<P><STRONG><a name="[859]"></a>WM_Exec</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, wm.o(i.WM_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 788 + Unknown Stack Size
<LI>Call Chain = WM_Exec &rArr; _DrawNext &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
</UL>
<BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec1
</UL>

<P><STRONG><a name="[996]"></a>WM_GetActiveWindow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm.o(i.WM_GetActiveWindow))
<BR><BR>[Called By]<UL><LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDefaultWin
</UL>

<P><STRONG><a name="[914]"></a>WM_GetBkColor</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, wm_getbkcolor.o(i.WM_GetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = WM_GetBkColor &rArr; WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetBkColor
</UL>

<P><STRONG><a name="[7d9]"></a>WM_GetClientRect</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm_getclientrect.o(i.WM_GetClientRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_DrawSkinFlex
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetClientRect
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFocus
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDownRect
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUp
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDown
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDown
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_EFFECT_3D_DrawUp
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[92d]"></a>WM_GetClientRectEx</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm_getclientrect.o(i.WM_GetClientRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[973]"></a>WM_GetDesktopWindow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_getdesktopwindow.o(i.WM_GetDesktopWindow))
<BR><BR>[Called By]<UL><LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[9a5]"></a>WM_GetDesktopWindowEx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_getdesktopwindowex.o(i.WM_GetDesktopWindowEx))
<BR><BR>[Called By]<UL><LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWinStop
</UL>

<P><STRONG><a name="[7f4]"></a>WM_GetFirstChild</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_getfirstchild.o(i.WM_GetFirstChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = WM_GetFirstChild &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>

<P><STRONG><a name="[92e]"></a>WM_GetHasTrans</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_settrans.o(i.WM_GetHasTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = WM_GetHasTrans &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[92f]"></a>WM_GetId</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, wm_getid.o(i.WM_GetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = WM_GetId &rArr; WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>

<P><STRONG><a name="[7f5]"></a>WM_GetNextSibling</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_getnextsibling.o(i.WM_GetNextSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = WM_GetNextSibling &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
</UL>

<P><STRONG><a name="[8ea]"></a>WM_GetParent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_getparent.o(i.WM_GetParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = WM_GetParent &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetBkColor
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__SendMenuMessage
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendPIDMessage
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
</UL>

<P><STRONG><a name="[930]"></a>WM_GetScrollbarH</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_getscrollbar.o(i.WM_GetScrollbarH))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = WM_GetScrollbarH &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[932]"></a>WM_GetScrollbarV</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_getscrollbar.o(i.WM_GetScrollbarV))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = WM_GetScrollbarV &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[933]"></a>WM_GetWindowOrgX</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_getorg.o(i.WM_GetWindowOrgX))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = WM_GetWindowOrgX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[934]"></a>WM_GetWindowRect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wm_getwindowrect.o(i.WM_GetWindowRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = WM_GetWindowRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[907]"></a>WM_GetWindowRectEx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_getwindowrect.o(i.WM_GetWindowRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = WM_GetWindowRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__DrawBk
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>

<P><STRONG><a name="[935]"></a>WM_GetWindowSizeX</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm_getwindowsize.o(i.WM_GetWindowSizeX))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = WM_GetWindowSizeX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDefaultWin
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[7f1]"></a>WM_GetWindowSizeY</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm_getwindowsize.o(i.WM_GetWindowSizeY))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = WM_GetWindowSizeY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDefaultWin
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArrow
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTriangle
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[db]"></a>WM_HandlePID</STRONG> (Thumb, 858 bytes, Stack size 144 bytes, wm_touch.o(i.WM_HandlePID))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = WM_HandlePID &rArr; GUI_CURSOR_SetPositionEx &rArr; GUI_SPRITE_SetPosition &rArr; _SetPosition &rArr; _CreateBuffer &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsInModalArea
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_IsEmpty
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_GetState
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_PID__SetPrevState
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveCriticalHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_pid.o(i.GUI_PID_StoreState)
</UL>
<P><STRONG><a name="[99f]"></a>WM_HasFocus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_hasfocus.o(i.WM_HasFocus))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[870]"></a>WM_Init</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, wm.o(i.WM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[941]"></a>WM_InvalidateRect</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, wm.o(i.WM_InvalidateRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Invalidate1Abs
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>

<P><STRONG><a name="[7e2]"></a>WM_InvalidateWindow</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(i.WM_InvalidateWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetTextColor
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetBkColor
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetOwnerDraw
</UL>

<P><STRONG><a name="[947]"></a>WM_InvalidateWindowAndDescsEx</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, wm.o(i.WM_InvalidateWindowAndDescsEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM_InvalidateWindowAndDescsEx &rArr;  WM_InvalidateWindowAndDescsEx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>

<P><STRONG><a name="[93d]"></a>WM_IsWindow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_iswindow.o(i.WM_IsWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = WM_IsWindow &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendPIDMessage
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[949]"></a>WM_MoveWindow</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_move.o(i.WM_MoveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
</UL>

<P><STRONG><a name="[926]"></a>WM_NotifyParent</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, wm_notifyparent.o(i.WM_NotifyParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = WM_NotifyParent &rArr; WM_SendToParent &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonPressed
</UL>

<P><STRONG><a name="[89e]"></a>WM_OnKey</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, wm_onkey.o(i.WM_OnKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = WM_OnKey &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
</UL>

<P><STRONG><a name="[93f]"></a>WM_PID__SetPrevState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm_pid__getprevstate.o(i.WM_PID__SetPrevState))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[93e]"></a>WM_ReleaseCapture</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_setcapture.o(i.WM_ReleaseCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = WM_ReleaseCapture &rArr; WM__ReleaseCapture &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ReleaseCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[94c]"></a>WM_ResizeWindow</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, wm_resizewindow.o(i.WM_ResizeWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = WM_ResizeWindow &rArr; WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
</UL>
<BR>[Called By]<UL><LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
</UL>

<P><STRONG><a name="[939]"></a>WM_Screen2hWin</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_screen2win.o(i.WM_Screen2hWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = WM_Screen2hWin &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWinStop
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[91c]"></a>WM_SelectWindow</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm.o(i.WM_SelectWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = WM_SelectWindow &rArr; WM__SelectTopLevelLayer &rArr; GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SelectTopLevelLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
</UL>

<P><STRONG><a name="[92c]"></a>WM_SendMessage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm.o(i.WM_SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetBkColor
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
</UL>

<P><STRONG><a name="[951]"></a>WM_SendMessageNoPara</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm_sendmessagenopara.o(i.WM_SendMessageNoPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = WM_SendMessageNoPara &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
</UL>

<P><STRONG><a name="[920]"></a>WM_SendToParent</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_sendtoparent.o(i.WM_SendToParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = WM_SendToParent &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
</UL>

<P><STRONG><a name="[953]"></a>WM_SetDefault</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm.o(i.WM_SetDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = WM_SetDefault &rArr; GL_SetDefault &rArr; GUI_SetFont &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
</UL>

<P><STRONG><a name="[7d5]"></a>WM_SetHasTrans</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wm_settrans.o(i.WM_SetHasTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = WM_SetHasTrans &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX_DrawSkinFlex
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_DrawSkinFlex
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DROPDOWN_DrawSkinFlex
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_DrawSkinFlex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
</UL>

<P><STRONG><a name="[955]"></a>WM_SetSize</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wm_setsize.o(i.WM_SetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = WM_SetSize &rArr; WM_ResizeWindow &rArr; WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[846]"></a>WM_SetUserClipRect</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_setusercliprect.o(i.WM_SetUserClipRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = WM_SetUserClipRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[954]"></a>WM_ValidateWindow</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_validatewindow.o(i.WM_ValidateWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = WM_ValidateWindow &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
</UL>

<P><STRONG><a name="[956]"></a>WM__ActivateClipRect</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wm.o(i.WM__ActivateClipRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
</UL>
<BR>[Called By]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>

<P><STRONG><a name="[938]"></a>WM__AddCriticalHandle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_criticalhandle.o(i.WM__AddCriticalHandle))
<BR><BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[943]"></a>WM__Client2Screen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm.o(i.WM__Client2Screen))
<BR><BR>[Calls]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
</UL>
<BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[945]"></a>WM__ClipAtParentBorders</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wm.o(i.WM__ClipAtParentBorders))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__ClipAtParentBorders
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
</UL>
<BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>

<P><STRONG><a name="[925]"></a>WM__DeleteAssocTimer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, wm_timer.o(i.WM__DeleteAssocTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = WM__DeleteAssocTimer &rArr; WM_DeleteTimer &rArr; GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[928]"></a>WM__DetachWindow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm.o(i.WM__DetachWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = WM__DetachWindow &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveWindowFromList
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[91f]"></a>WM__GetClientRectEx</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_getclientrect.o(i.WM__GetClientRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__GetClientRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
</UL>
<BR>[Called By]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
</UL>

<P><STRONG><a name="[8f3]"></a>WM__GetClientRectWin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wm.o(i.WM__GetClientRectWin))
<BR><BR>[Called By]<UL><LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__CalcBorderRect
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[95a]"></a>WM__GetFirstSibling</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm__getfirstsibling.o(i.WM__GetFirstSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = WM__GetFirstSibling &rArr; WM_GetParent &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
</UL>

<P><STRONG><a name="[82e]"></a>WM__GetNextIVR</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wm.o(i.WM__GetNextIVR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WM__GetNextIVR &rArr; _FindNext_IVR &rArr; _Findy1 &rArr;  _Findy1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__FillTrippleArc
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
</UL>

<P><STRONG><a name="[918]"></a>WM__GetPrevSibling</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm__getprevsibling.o(i.WM__GetPrevSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = WM__GetPrevSibling &rArr; WM__GetFirstSibling &rArr; WM_GetParent &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
</UL>
<BR>[Called By]<UL><LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
</UL>

<P><STRONG><a name="[924]"></a>WM__GetTopLevelLayer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm.o(i.WM__GetTopLevelLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__GetTopLevelLayer
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SelectTopLevelLayer
</UL>

<P><STRONG><a name="[7ee]"></a>WM__GetWindowSizeX</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_getwindowsize.o(i.WM__GetWindowSizeX))
<BR><BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
</UL>

<P><STRONG><a name="[7ef]"></a>WM__GetWindowSizeY</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_getwindowsize.o(i.WM__GetWindowSizeY))
<BR><BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
</UL>

<P><STRONG><a name="[82d]"></a>WM__InitIVRSearch</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, wm.o(i.WM__InitIVRSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; _FindNext_IVR &rArr; _Findy1 &rArr;  _Findy1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__FillTrippleArc
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
</UL>

<P><STRONG><a name="[91b]"></a>WM__InsertWindowIntoList</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, wm.o(i.WM__InsertWindowIntoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__InsertWindowIntoList
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[946]"></a>WM__Invalidate1Abs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(i.WM__Invalidate1Abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WM__Invalidate1Abs &rArr; _Invalidate1Abs &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[942]"></a>WM__InvalidateDrawAndDescs</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wm.o(i.WM__InvalidateDrawAndDescs))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM__InvalidateDrawAndDescs &rArr;  WM__InvalidateDrawAndDescs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
</UL>
<BR>[Called By]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
</UL>

<P><STRONG><a name="[95c]"></a>WM__InvalidateParent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm.o(i.WM__InvalidateParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__InvalidateParent
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>

<P><STRONG><a name="[95d]"></a>WM__InvalidateRect</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, wm.o(i.WM__InvalidateRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>
<BR>[Called By]<UL><LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
</UL>

<P><STRONG><a name="[919]"></a>WM__InvalidateRectEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(i.WM__InvalidateRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
</UL>

<P><STRONG><a name="[95e]"></a>WM__IsAncestor</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm__isancestor.o(i.WM__IsAncestor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__IsAncestor
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsInModalArea
</UL>

<P><STRONG><a name="[7ce]"></a>WM__IsEnabled</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm__isenabled.o(i.WM__IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__IsEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DROPDOWN_DrawSkinFlex
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_DrawSkinFlex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTriangle
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawSpinEffect
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[93a]"></a>WM__IsInModalArea</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, wm_touch.o(i.WM__IsInModalArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__IsInModalArea &rArr; WM__IsAncestor
</UL>
<BR>[Calls]<UL><LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestor
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[9a4]"></a>WM__IsInWindow</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, wm_screen2win.o(i.WM__IsInWindow))
<BR><BR>[Called By]<UL><LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>

<P><STRONG><a name="[923]"></a>WM__IsWindow</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wm.o(i.WM__IsWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__IsWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
</UL>

<P><STRONG><a name="[94a]"></a>WM__MoveWindow</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, wm_move.o(i.WM__MoveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = WM__MoveWindow &rArr; _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>
<BR>[Called By]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
</UL>

<P><STRONG><a name="[960]"></a>WM__Paint</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, wm.o(i.WM__Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
</UL>
<BR>[Called By]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNext
</UL>

<P><STRONG><a name="[f8]"></a>WM__Paint1</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, wm.o(i.WM__Paint1))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = WM__Paint1 &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i._Paint1)
</UL>
<P><STRONG><a name="[99a]"></a>WM__RectIsNZ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm.o(i.WM__RectIsNZ))
<BR><BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[940]"></a>WM__RemoveCriticalHandle</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wm_criticalhandle.o(i.WM__RemoveCriticalHandle))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[929]"></a>WM__RemoveFromLinList</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm.o(i.WM__RemoveFromLinList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__RemoveFromLinList
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[959]"></a>WM__RemoveWindowFromList</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm.o(i.WM__RemoveWindowFromList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__RemoveWindowFromList
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
</UL>

<P><STRONG><a name="[965]"></a>WM__Screen2Client</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm__screen2client.o(i.WM__Screen2Client))
<BR><BR>[Calls]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
</UL>
<BR>[Called By]<UL><LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EffectRequiresRedraw
</UL>

<P><STRONG><a name="[950]"></a>WM__SelectTopLevelLayer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm.o(i.WM__SelectTopLevelLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = WM__SelectTopLevelLayer &rArr; GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
</UL>

<P><STRONG><a name="[8eb]"></a>WM__SendMessage</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm__sendmessage.o(i.WM__SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
</UL>
<BR>[Called By]<UL><LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__SendMenuMessage
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ReleaseCapture
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>

<P><STRONG><a name="[93c]"></a>WM__SendMessageIfEnabled</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm__sendmessageifenabled.o(i.WM__SendMessageIfEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = WM__SendMessageIfEnabled &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendPIDMessage
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[952]"></a>WM__SendMessageNoPara</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, wm__sendmessagenopara.o(i.WM__SendMessageNoPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__SendMessageNoPara
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
</UL>

<P><STRONG><a name="[91d]"></a>WM__SendMsgNoData</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, wm.o(i.WM__SendMsgNoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[966]"></a>WM__SendPIDMessage</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, wm_touch.o(i.WM__SendPIDMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = WM__SendPIDMessage &rArr; WM__SendMessageIfEnabled &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
</UL>

<P><STRONG><a name="[93b]"></a>WM__SendTouchMessage</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wm_touch.o(i.WM__SendTouchMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = WM__SendTouchMessage &rArr; WM__SendPIDMessage &rArr; WM__SendMessageIfEnabled &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendPIDMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[94e]"></a>WM__UpdateChildPositions</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, wm__updatechildpositions.o(i.WM__UpdateChildPositions))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[788]"></a>__isxdigit_helper</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, type1.o(i.__isxdigit_helper))
<BR><BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_Private_Dict
</UL>

<P><STRONG><a name="[86e]"></a>emWin_LCD_Init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lcd.o(i.emWin_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = emWin_LCD_Init &rArr; LCD_InitColors &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[d2]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[376]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[9a9]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[370]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Adjust
</UL>

<P><STRONG><a name="[9ad]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[374]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Adjust
</UL>

<P><STRONG><a name="[9ae]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[377]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
</UL>

<P><STRONG><a name="[9af]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[36f]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Adjust
</UL>

<P><STRONG><a name="[a77]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[371]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Adjust
</UL>

<P><STRONG><a name="[a78]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[372]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Scan
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Adjust
</UL>

<P><STRONG><a name="[9b0]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[9ac]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[9ab]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[373]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Adjust
</UL>

<P><STRONG><a name="[9b1]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[314]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[313]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3ae]"></a>Mem_SegAlloc</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_PoolCreate
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_HeapAlloc
</UL>

<P><STRONG><a name="[3ad]"></a>Mem_SegCalcTotSize</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_PoolCreate
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_HeapAlloc
</UL>

<P><STRONG><a name="[3cb]"></a>Str_FmtNbr_Int32</STRONG> (Thumb, 476 bytes, Stack size 104 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_IsPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_FmtNbr_Int32S
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_FmtNbr_Int32U
</UL>

<P><STRONG><a name="[3cf]"></a>Str_ParseNbr_Int32</STRONG> (Thumb, 446 bytes, Stack size 96 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_IsSpace
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_IsDigHex
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_IsDig
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_IsLower
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_IsAlphaNum
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32S
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32U
</UL>

<P><STRONG><a name="[3d8]"></a>CPU_NameInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cpu_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = CPU_NameInit &rArr; CPU_NameClr &rArr; Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>

<P><STRONG><a name="[3d9]"></a>CPU_TS_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cpu_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CPU_TS_Init &rArr; CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>

<P><STRONG><a name="[fe]"></a>_SetPixelIndex</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _SetPixelIndex &rArr; LCD_DrawFRONT_COLOR &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFRONT_COLOR
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine32BPP
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine8BPP
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine4BPP
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine2BPP
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>_GetPixelIndex</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _GetPixelIndex &rArr; LCD_ReadPoint &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>_XorPixel</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _XorPixel &rArr; _GetPixelIndex &rArr; LCD_ReadPoint &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>_FillRect</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _FillRect &rArr; LCD_Fill &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>_DrawHLine</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _DrawHLine &rArr; _FillRect &rArr; LCD_Fill &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>_DrawVLine</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _DrawVLine &rArr; _FillRect &rArr; LCD_Fill &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.constdata)
</UL>
<P><STRONG><a name="[48c]"></a>_DrawBitLine1BPP</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _DrawBitLine1BPP &rArr; _GetPixelIndex &rArr; LCD_ReadPoint &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[48d]"></a>_DrawBitLine2BPP</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _DrawBitLine2BPP &rArr; _SetPixelIndex &rArr; LCD_DrawFRONT_COLOR &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[48e]"></a>_DrawBitLine4BPP</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _DrawBitLine4BPP &rArr; _SetPixelIndex &rArr; LCD_DrawFRONT_COLOR &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[48f]"></a>_DrawBitLine8BPP</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _DrawBitLine8BPP &rArr; _SetPixelIndex &rArr; LCD_DrawFRONT_COLOR &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[490]"></a>_DrawBitLine16BPP</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _DrawBitLine16BPP &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteData_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[491]"></a>_DrawBitLine32BPP</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _DrawBitLine32BPP &rArr; _SetPixelIndex &rArr; LCD_DrawFRONT_COLOR &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[f9]"></a>_DrawBitmap</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _DrawBitmap &rArr; _DrawBitLine1BPP &rArr; _GetPixelIndex &rArr; LCD_ReadPoint &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine32BPP
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine16BPP
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine8BPP
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine4BPP
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine2BPP
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.constdata)
</UL>
<P><STRONG><a name="[492]"></a>_InitOnce</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPP
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVSize
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
</UL>

<P><STRONG><a name="[102]"></a>_GetDevProp</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, guidrv_template.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>_GetDevData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidrv_template.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>_GetRect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, guidrv_template.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>_SetOrg</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _SetOrg &rArr; LCD_X_DisplayDriver
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>_SetVRAMAddr</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = _SetVRAMAddr &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>_SetVSize</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = _SetVSize &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>_SetSize</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = _SetSize &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>_Init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = _Init &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>_On</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _On &rArr; LCD_X_DisplayDriver
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>_Off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Off &rArr; LCD_X_DisplayDriver
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>_SetLUTEntry</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, guidrv_template.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _SetLUTEntry &rArr; LCD_X_DisplayDriver
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.text)
</UL>
<P><STRONG><a name="[101]"></a>_GetDevFunc</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, guidrv_template.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_template.o(.constdata)
</UL>
<P><STRONG><a name="[4a4]"></a>CheckInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_x_ucosiii.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_WaitKey
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetKey
</UL>

<P><STRONG><a name="[4c8]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[4bc]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[4cb]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[4d4]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[4b9]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[4ba]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4bb]"></a>sync_fs</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[4bf]"></a>remove_chain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4c0]"></a>create_chain</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[4de]"></a>clmt_clust</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[4c1]"></a>dir_sdi</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[4c3]"></a>dir_next</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[4c4]"></a>dir_alloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[4d6]"></a>ld_clust</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4dd]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4c5]"></a>cmp_lfn</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[4cd]"></a>pick_lfn</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[4cf]"></a>fit_lfn</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[4c7]"></a>gen_numname</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[4ca]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[4c9]"></a>dir_find</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[4cc]"></a>dir_read</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[4ce]"></a>dir_register</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4d0]"></a>dir_remove</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[4d1]"></a>get_fileinfo</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[4d3]"></a>create_name</STRONG> (Thumb, 604 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[4d5]"></a>follow_path</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4d9]"></a>get_ldnumber</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[4d7]"></a>check_fs</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[4d8]"></a>find_volume</STRONG> (Thumb, 930 bytes, Stack size 88 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; EN25QXX_Write &rArr; EN25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setlabel
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getlabel
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4db]"></a>validate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[4f1]"></a>putc_bfd</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[4fb]"></a>af_angle_atan</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = af_angle_atan &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_reload
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_compute_inflections
</UL>

<P><STRONG><a name="[51f]"></a>af_sort_pos</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = af_sort_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init_blues
</UL>

<P><STRONG><a name="[51d]"></a>af_sort_widths</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = af_sort_widths
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init_widths
</UL>

<P><STRONG><a name="[4fd]"></a>af_face_globals_compute_script_coverage</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = af_face_globals_compute_script_coverage &rArr; FT_Select_Charmap &rArr; find_unicode_charmap
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Set_Charmap
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Select_Charmap
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Next_Char
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Char_Index
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_face_globals_new
</UL>

<P><STRONG><a name="[8b]"></a>af_face_globals_free</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = af_face_globals_free &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_face_globals_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autofit.o(.text)
</UL>
<P><STRONG><a name="[504]"></a>af_face_globals_new</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = af_face_globals_new &rArr; af_face_globals_compute_script_coverage &rArr; FT_Select_Charmap &rArr; find_unicode_charmap
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_face_globals_free
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_face_globals_compute_script_coverage
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_reset
</UL>

<P><STRONG><a name="[506]"></a>af_face_globals_get_metrics</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = af_face_globals_get_metrics &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_glyph
</UL>

<P><STRONG><a name="[507]"></a>af_axis_hints_new_segment</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = af_axis_hints_new_segment &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_compute_segments
</UL>

<P><STRONG><a name="[50a]"></a>af_axis_hints_new_edge</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = af_axis_hints_new_edge &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_compute_edges
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_compute_edges
</UL>

<P><STRONG><a name="[512]"></a>af_direction_compute</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = af_direction_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_reload
</UL>

<P><STRONG><a name="[50c]"></a>af_glyph_hints_compute_inflections</STRONG> (Thumb, 418 bytes, Stack size 64 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = af_glyph_hints_compute_inflections &rArr; af_angle_atan &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_angle_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_reload
</UL>

<P><STRONG><a name="[50d]"></a>af_glyph_hints_init</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = af_glyph_hints_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_init
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init_widths
</UL>

<P><STRONG><a name="[50e]"></a>af_glyph_hints_done</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = af_glyph_hints_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_done
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init_widths
</UL>

<P><STRONG><a name="[518]"></a>af_glyph_hints_rescale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, autofit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_dummy_hints_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_init
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init_widths
</UL>

<P><STRONG><a name="[50f]"></a>af_glyph_hints_reload</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = af_glyph_hints_reload &rArr; af_glyph_hints_compute_inflections &rArr; af_angle_atan &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_compute_inflections
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_direction_compute
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_angle_atan
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Get_Orientation
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_apply
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_apply
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init_widths
</UL>

<P><STRONG><a name="[52a]"></a>af_glyph_hints_save</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = af_glyph_hints_save
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_apply
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_apply
</UL>

<P><STRONG><a name="[529]"></a>af_glyph_hints_align_edge_points</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = af_glyph_hints_align_edge_points
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_apply
</UL>

<P><STRONG><a name="[513]"></a>af_glyph_hints_align_strong_points</STRONG> (Thumb, 414 bytes, Stack size 88 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = af_glyph_hints_align_strong_points &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_apply
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_apply
</UL>

<P><STRONG><a name="[517]"></a>af_iup_shift</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = af_iup_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_align_weak_points
</UL>

<P><STRONG><a name="[514]"></a>af_iup_interp</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = af_iup_interp &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_align_weak_points
</UL>

<P><STRONG><a name="[516]"></a>af_glyph_hints_align_weak_points</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = af_glyph_hints_align_weak_points &rArr; af_iup_interp &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_iup_interp
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_iup_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_apply
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_apply
</UL>

<P><STRONG><a name="[105]"></a>af_dummy_hints_init</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = af_dummy_hints_init
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_rescale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autofit.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>af_dummy_hints_apply</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, autofit.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> autofit.o(.constdata)
</UL>
<P><STRONG><a name="[51c]"></a>af_latin_hints_link_segments</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = af_latin_hints_link_segments
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_detect_features
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init_widths
</UL>

<P><STRONG><a name="[519]"></a>af_latin_hints_compute_segments</STRONG> (Thumb, 568 bytes, Stack size 80 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = af_latin_hints_compute_segments &rArr; af_axis_hints_new_segment &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_axis_hints_new_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_compute_segments
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_detect_features
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init_widths
</UL>

<P><STRONG><a name="[51a]"></a>af_latin_metrics_init_widths</STRONG> (Thumb, 406 bytes, Stack size 1000 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = af_latin_metrics_init_widths &rArr; af_latin_hints_compute_segments &rArr; af_axis_hints_new_segment &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_compute_segments
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_link_segments
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_reload
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_rescale
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_done
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_init
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_sort_widths
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Load_Glyph
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Char_Index
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_metrics_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init
</UL>

<P><STRONG><a name="[51e]"></a>af_latin_metrics_init_blues</STRONG> (Thumb, 832 bytes, Stack size 192 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = af_latin_metrics_init_blues &rArr; FT_Load_Glyph &rArr; FT_Render_Glyph &rArr; FT_Render_Glyph_Internal &rArr; FT_Set_Renderer &rArr; FT_List_Up
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_sort_pos
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Load_Glyph
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Char_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init
</UL>

<P><STRONG><a name="[107]"></a>af_latin_metrics_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = af_latin_metrics_init &rArr; af_latin_metrics_init_widths &rArr; af_latin_hints_compute_segments &rArr; af_axis_hints_new_segment &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Set_Charmap
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Select_Charmap
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init_blues
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init_widths
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autofit.o(.constdata)
</UL>
<P><STRONG><a name="[520]"></a>af_latin_metrics_scale_dim</STRONG> (Thumb, 502 bytes, Stack size 56 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = af_latin_metrics_scale_dim &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_scale
</UL>

<P><STRONG><a name="[108]"></a>af_latin_metrics_scale</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = af_latin_metrics_scale &rArr; af_latin_metrics_scale_dim &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_scale_dim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autofit.o(.constdata)
</UL>
<P><STRONG><a name="[521]"></a>af_latin_hints_compute_edges</STRONG> (Thumb, 648 bytes, Stack size 88 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = af_latin_hints_compute_edges &rArr; af_axis_hints_new_edge &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_axis_hints_new_edge
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_detect_features
</UL>

<P><STRONG><a name="[522]"></a>af_latin_hints_detect_features</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = af_latin_hints_detect_features &rArr; af_latin_hints_compute_edges &rArr; af_axis_hints_new_edge &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_compute_segments
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_link_segments
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_compute_edges
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_apply
</UL>

<P><STRONG><a name="[523]"></a>af_latin_hints_compute_blue_edges</STRONG> (Thumb, 294 bytes, Stack size 72 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = af_latin_hints_compute_blue_edges &rArr; FT_MulFix
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_apply
</UL>

<P><STRONG><a name="[109]"></a>af_latin_hints_init</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = af_latin_hints_init
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_rescale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autofit.o(.constdata)
</UL>
<P><STRONG><a name="[525]"></a>af_latin_snap_width</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = af_latin_snap_width
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_compute_stem_width
</UL>

<P><STRONG><a name="[524]"></a>af_latin_compute_stem_width</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = af_latin_compute_stem_width &rArr; af_latin_snap_width
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_snap_width
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hint_edges
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_align_linked_edge
</UL>

<P><STRONG><a name="[526]"></a>af_latin_align_linked_edge</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = af_latin_align_linked_edge &rArr; af_latin_compute_stem_width &rArr; af_latin_snap_width
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_compute_stem_width
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hint_edges
</UL>

<P><STRONG><a name="[528]"></a>af_latin_align_serif_edge</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = af_latin_align_serif_edge
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hint_edges
</UL>

<P><STRONG><a name="[527]"></a>af_latin_hint_edges</STRONG> (Thumb, 1156 bytes, Stack size 80 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = af_latin_hint_edges &rArr; af_latin_align_linked_edge &rArr; af_latin_compute_stem_width &rArr; af_latin_snap_width
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_align_serif_edge
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_align_linked_edge
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_compute_stem_width
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_apply
</UL>

<P><STRONG><a name="[10a]"></a>af_latin_hints_apply</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = af_latin_hints_apply &rArr; af_latin_hints_detect_features &rArr; af_latin_hints_compute_edges &rArr; af_axis_hints_new_edge &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_align_weak_points
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_align_strong_points
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_align_edge_points
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_save
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_reload
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hint_edges
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_compute_blue_edges
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_detect_features
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autofit.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>af_cjk_metrics_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = af_cjk_metrics_init &rArr; af_latin_metrics_init_widths &rArr; af_latin_hints_compute_segments &rArr; af_axis_hints_new_segment &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Set_Charmap
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Select_Charmap
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_metrics_init_widths
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autofit.o(.constdata)
</UL>
<P><STRONG><a name="[52b]"></a>af_cjk_metrics_scale_dim</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = af_cjk_metrics_scale_dim
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_metrics_scale
</UL>

<P><STRONG><a name="[10c]"></a>af_cjk_metrics_scale</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = af_cjk_metrics_scale &rArr; af_cjk_metrics_scale_dim
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_metrics_scale_dim
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autofit.o(.constdata)
</UL>
<P><STRONG><a name="[52c]"></a>af_cjk_hints_compute_segments</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = af_cjk_hints_compute_segments &rArr; af_latin_hints_compute_segments &rArr; af_axis_hints_new_segment &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_latin_hints_compute_segments
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_detect_features
</UL>

<P><STRONG><a name="[52d]"></a>af_cjk_hints_link_segments</STRONG> (Thumb, 574 bytes, Stack size 48 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = af_cjk_hints_link_segments &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_detect_features
</UL>

<P><STRONG><a name="[52e]"></a>af_cjk_hints_compute_edges</STRONG> (Thumb, 712 bytes, Stack size 72 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = af_cjk_hints_compute_edges &rArr; af_axis_hints_new_edge &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_axis_hints_new_edge
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_detect_features
</UL>

<P><STRONG><a name="[52f]"></a>af_cjk_hints_detect_features</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = af_cjk_hints_detect_features &rArr; af_cjk_hints_compute_segments &rArr; af_latin_hints_compute_segments &rArr; af_axis_hints_new_segment &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_compute_edges
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_link_segments
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_compute_segments
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_apply
</UL>

<P><STRONG><a name="[10d]"></a>af_cjk_hints_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = af_cjk_hints_init
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_rescale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autofit.o(.constdata)
</UL>
<P><STRONG><a name="[531]"></a>af_cjk_snap_width</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = af_cjk_snap_width
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_compute_stem_width
</UL>

<P><STRONG><a name="[530]"></a>af_cjk_compute_stem_width</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = af_cjk_compute_stem_width &rArr; af_cjk_snap_width
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_snap_width
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_hint_normal_stem
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_align_linked_edge
</UL>

<P><STRONG><a name="[532]"></a>af_cjk_align_linked_edge</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = af_cjk_align_linked_edge &rArr; af_cjk_compute_stem_width &rArr; af_cjk_snap_width
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_compute_stem_width
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hint_edges
</UL>

<P><STRONG><a name="[535]"></a>af_cjk_align_serif_edge</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = af_cjk_align_serif_edge
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hint_edges
</UL>

<P><STRONG><a name="[533]"></a>af_hint_normal_stem</STRONG> (Thumb, 440 bytes, Stack size 80 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = af_hint_normal_stem &rArr; af_cjk_compute_stem_width &rArr; af_cjk_snap_width
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_compute_stem_width
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hint_edges
</UL>

<P><STRONG><a name="[534]"></a>af_cjk_hint_edges</STRONG> (Thumb, 668 bytes, Stack size 64 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = af_cjk_hint_edges &rArr; af_hint_normal_stem &rArr; af_cjk_compute_stem_width &rArr; af_cjk_snap_width
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_hint_normal_stem
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_align_serif_edge
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_align_linked_edge
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_apply
</UL>

<P><STRONG><a name="[536]"></a>af_cjk_align_edge_points</STRONG> (Thumb, 234 bytes, Stack size 28 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = af_cjk_align_edge_points
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_apply
</UL>

<P><STRONG><a name="[10e]"></a>af_cjk_hints_apply</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = af_cjk_hints_apply &rArr; af_cjk_hints_detect_features &rArr; af_cjk_hints_compute_segments &rArr; af_latin_hints_compute_segments &rArr; af_axis_hints_new_segment &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_align_weak_points
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_align_strong_points
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_save
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_reload
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_align_edge_points
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hint_edges
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_cjk_hints_detect_features
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autofit.o(.constdata)
</UL>
<P><STRONG><a name="[537]"></a>af_loader_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = af_loader_init &rArr; FT_GlyphLoader_New &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_init
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_New
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_autofitter_init
</UL>

<P><STRONG><a name="[539]"></a>af_loader_reset</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = af_loader_reset &rArr; af_face_globals_new &rArr; af_face_globals_compute_script_coverage &rArr; FT_Select_Charmap &rArr; find_unicode_charmap
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_face_globals_new
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Rewind
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_glyph
</UL>

<P><STRONG><a name="[53b]"></a>af_loader_done</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = af_loader_done &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_glyph_hints_done
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Done
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_autofitter_done
</UL>

<P><STRONG><a name="[53d]"></a>af_loader_load_g</STRONG> (Thumb, 1510 bytes, Stack size 128 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + In Cycle
<LI>Call Chain = af_loader_load_g &rArr;  af_loader_load_g (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Transform
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Translate
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Transform
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Get_CBox
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Matrix_Invert
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Load_Glyph
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Rewind
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CopyPoints
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckSubGlyphs
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckPoints
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Add
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_g
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_glyph
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_g
</UL>

<P><STRONG><a name="[548]"></a>af_loader_load_glyph</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = af_loader_load_glyph &rArr; af_loader_load_g &rArr;  af_loader_load_g (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_face_globals_get_metrics
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_g
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_reset
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_autofitter_load_glyph
</UL>

<P><STRONG><a name="[110]"></a>af_autofitter_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = af_autofitter_init &rArr; af_loader_init &rArr; FT_GlyphLoader_New &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autofit.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>af_autofitter_done</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = af_autofitter_done &rArr; af_loader_done &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autofit.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>af_autofitter_load_glyph</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, autofit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = af_autofitter_load_glyph &rArr; af_loader_load_glyph &rArr; af_loader_load_g &rArr;  af_loader_load_g (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_loader_load_glyph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autofit.o(.constdata)
</UL>
<P><STRONG><a name="[549]"></a>hash_bucket</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hash_bucket
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_lookup
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_insert
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_rehash
</UL>

<P><STRONG><a name="[54a]"></a>hash_rehash</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hash_rehash &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_bucket
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_insert
</UL>

<P><STRONG><a name="[54b]"></a>hash_init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hash_init &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_start
</UL>

<P><STRONG><a name="[54c]"></a>hash_free</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hash_free &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_free_font
</UL>

<P><STRONG><a name="[54d]"></a>hash_insert</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = hash_insert &rArr; hash_rehash &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_rehash
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_bucket
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_start
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_add_property
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_create_property
</UL>

<P><STRONG><a name="[54e]"></a>hash_lookup</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hash_lookup &rArr; hash_bucket
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_bucket
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_get_font_property
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_add_property
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_get_property
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_create_property
</UL>

<P><STRONG><a name="[559]"></a>_bdf_list_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bdf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_load_font
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_set_default_spacing
</UL>

<P><STRONG><a name="[54f]"></a>_bdf_list_done</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _bdf_list_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_load_font
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_set_default_spacing
</UL>

<P><STRONG><a name="[550]"></a>_bdf_list_ensure</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _bdf_list_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_split
</UL>

<P><STRONG><a name="[560]"></a>_bdf_list_shift</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _bdf_list_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_properties
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_glyphs
</UL>

<P><STRONG><a name="[561]"></a>_bdf_list_join</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _bdf_list_join
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_properties
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_glyphs
</UL>

<P><STRONG><a name="[551]"></a>_bdf_list_split</STRONG> (Thumb, 382 bytes, Stack size 80 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _bdf_list_split &rArr; _bdf_list_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_ensure
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_properties
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_glyphs
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_set_default_spacing
</UL>

<P><STRONG><a name="[552]"></a>_bdf_readstream</STRONG> (Thumb, 400 bytes, Stack size 88 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _bdf_readstream &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_TryRead
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_load_font
</UL>

<P><STRONG><a name="[55d]"></a>_bdf_atoul</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _bdf_atoul
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_start
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_glyphs
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_add_property
</UL>

<P><STRONG><a name="[55c]"></a>_bdf_atol</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _bdf_atol
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_glyphs
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_add_property
</UL>

<P><STRONG><a name="[562]"></a>_bdf_atos</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _bdf_atos
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_start
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_glyphs
</UL>

<P><STRONG><a name="[8c]"></a>by_encoding</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = by_encoding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bdf.o(.text)
</UL>
<P><STRONG><a name="[554]"></a>bdf_create_property</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bdf_create_property &rArr; hash_insert &rArr; hash_rehash &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_lookup
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_insert
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_add_property
</UL>

<P><STRONG><a name="[556]"></a>bdf_get_property</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bdf_get_property &rArr; hash_lookup &rArr; hash_bucket
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_is_atom
</UL>

<P><STRONG><a name="[557]"></a>_bdf_add_comment</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _bdf_add_comment &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_start
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_glyphs
</UL>

<P><STRONG><a name="[558]"></a>_bdf_set_default_spacing</STRONG> (Thumb, 176 bytes, Stack size 168 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = _bdf_set_default_spacing &rArr; _bdf_list_split &rArr; _bdf_list_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_split
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_done
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_init
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_start
</UL>

<P><STRONG><a name="[55a]"></a>_bdf_is_atom</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _bdf_is_atom &rArr; bdf_get_property &rArr; hash_lookup &rArr; hash_bucket
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_get_property
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_properties
</UL>

<P><STRONG><a name="[55b]"></a>_bdf_add_property</STRONG> (Thumb, 724 bytes, Stack size 56 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _bdf_add_property &rArr; bdf_create_property &rArr; hash_insert &rArr; hash_rehash &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_create_property
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_atol
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_atoul
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_lookup
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_insert
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_properties
</UL>

<P><STRONG><a name="[8d]"></a>_bdf_parse_glyphs</STRONG> (Thumb, 1968 bytes, Stack size 88 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = _bdf_parse_glyphs &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_add_comment
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_atos
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_atol
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_atoul
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_split
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_join
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_shift
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bdf.o(.text)
</UL>
<P><STRONG><a name="[563]"></a>bdf_get_font_property</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bdf_get_font_property &rArr; hash_lookup &rArr; hash_bucket
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_get_bdf_property
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Face_Init
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_interpret_style
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_parse_properties
</UL>

<P><STRONG><a name="[8e]"></a>_bdf_parse_properties</STRONG> (Thumb, 452 bytes, Stack size 184 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = _bdf_parse_properties &rArr; _bdf_add_property &rArr; bdf_create_property &rArr; hash_insert &rArr; hash_rehash &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_get_font_property
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_add_property
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_is_atom
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_split
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_join
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_shift
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bdf.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>_bdf_parse_start</STRONG> (Thumb, 1184 bytes, Stack size 72 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = _bdf_parse_start &rArr; _bdf_set_default_spacing &rArr; _bdf_list_split &rArr; _bdf_list_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_set_default_spacing
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_add_comment
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_atos
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_atoul
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_split
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_join
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_shift
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_insert
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_init
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bdf.o(.text)
</UL>
<P><STRONG><a name="[565]"></a>bdf_load_font</STRONG> (Thumb, 556 bytes, Stack size 48 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = bdf_load_font &rArr; _bdf_readstream &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_readstream
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_done
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bdf_list_init
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Face_Init
</UL>

<P><STRONG><a name="[566]"></a>bdf_free_font</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bdf_free_font &rArr; hash_free &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash_free
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Face_Done
</UL>

<P><STRONG><a name="[112]"></a>bdf_cmap_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bdf_cmap_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bdf.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>bdf_cmap_done</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bdf.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> bdf.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>bdf_cmap_char_index</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bdf_cmap_char_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bdf.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>bdf_cmap_char_next</STRONG> (Thumb, 106 bytes, Stack size 28 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bdf_cmap_char_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bdf.o(.constdata)
</UL>
<P><STRONG><a name="[567]"></a>bdf_interpret_style</STRONG> (Thumb, 568 bytes, Stack size 64 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bdf_interpret_style &rArr; bdf_get_font_property &rArr; hash_lookup &rArr; hash_bucket
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_get_font_property
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Face_Init
</UL>

<P><STRONG><a name="[11a]"></a>BDF_Face_Done</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BDF_Face_Done &rArr; bdf_free_font &rArr; hash_free &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_free_font
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Face_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bdf.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>BDF_Face_Init</STRONG> (Thumb, 1164 bytes, Stack size 96 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = BDF_Face_Init &rArr; bdf_load_font &rArr; _bdf_readstream &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_CMap_New
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Face_Done
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_interpret_style
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_load_font
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_get_font_property
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bdf.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>BDF_Size_Select</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BDF_Size_Select &rArr; FT_Select_Metrics &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Select_Metrics
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Size_Request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bdf.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>BDF_Size_Request</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = BDF_Size_Request &rArr; BDF_Size_Select &rArr; FT_Select_Metrics &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDF_Size_Select
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bdf.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>BDF_Glyph_Load</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BDF_Glyph_Load &rArr; ft_glyphslot_set_bitmap &rArr; ft_glyphslot_free_bitmap &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_synthesize_vertical_metrics
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_set_bitmap
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bdf.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>bdf_get_bdf_property</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bdf_get_bdf_property &rArr; bdf_get_font_property &rArr; hash_lookup &rArr; hash_bucket
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bdf_get_font_property
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bdf.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>bdf_get_charset_id</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bdf.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> bdf.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>bdf_driver_requester</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bdf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bdf_driver_requester &rArr; ft_service_list_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_service_list_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bdf.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>cff_get_kerning</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cff_get_kerning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[581]"></a>cff_fd_select_get</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cff_fd_select_get
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_slot_load
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_prepare
</UL>

<P><STRONG><a name="[56e]"></a>cff_builder_done</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cff_builder_done &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_slot_load
</UL>

<P><STRONG><a name="[56f]"></a>cff_index_forget_element</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cff_index_forget_element &rArr; FT_Stream_ReleaseFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReleaseFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_subfont_load
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_name
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_free_glyph_data
</UL>

<P><STRONG><a name="[571]"></a>cff_free_glyph_data</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cff_free_glyph_data &rArr; cff_index_forget_element &rArr; FT_Stream_ReleaseFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_forget_element
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_slot_load
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_operator_seac
</UL>

<P><STRONG><a name="[57f]"></a>cff_builder_close_contour</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cff_builder_close_contour
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_parse_charstrings
</UL>

<P><STRONG><a name="[572]"></a>cff_index_access_element</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cff_index_access_element &rArr; FT_Stream_ExtractFrame &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExtractFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_subfont_load
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_name
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_glyph_data
</UL>

<P><STRONG><a name="[574]"></a>cff_get_glyph_data</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cff_get_glyph_data &rArr; cff_index_access_element &rArr; FT_Stream_ExtractFrame &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_access_element
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_slot_load
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_operator_seac
</UL>

<P><STRONG><a name="[576]"></a>cff_get_standard_encoding</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_lookup_glyph_by_stdcharcode
</UL>

<P><STRONG><a name="[575]"></a>cff_lookup_glyph_by_stdcharcode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cff_lookup_glyph_by_stdcharcode
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_standard_encoding
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_operator_seac
</UL>

<P><STRONG><a name="[577]"></a>cff_operator_seac</STRONG> (Thumb, 322 bytes, Stack size 88 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + In Cycle
<LI>Call Chain = cff_operator_seac &rArr;  cff_decoder_parse_charstrings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Prepare
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_parse_charstrings
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_lookup_glyph_by_stdcharcode
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_glyph_data
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_free_glyph_data
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckSubGlyphs
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_parse_charstrings
</UL>

<P><STRONG><a name="[57c]"></a>cff_builder_add_point</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cff_builder_add_point
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_parse_charstrings
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_builder_add_point1
</UL>

<P><STRONG><a name="[57a]"></a>check_points</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = check_points &rArr; FT_GlyphLoader_CheckPoints &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckPoints
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_parse_charstrings
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_builder_add_point1
</UL>

<P><STRONG><a name="[57b]"></a>cff_builder_add_point1</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = cff_builder_add_point1 &rArr; check_points &rArr; FT_GlyphLoader_CheckPoints &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_points
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_builder_add_point
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_parse_charstrings
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_builder_start_point
</UL>

<P><STRONG><a name="[57d]"></a>cff_builder_add_contour</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cff_builder_add_contour &rArr; FT_GlyphLoader_CheckPoints &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckPoints
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_builder_start_point
</UL>

<P><STRONG><a name="[57e]"></a>cff_builder_start_point</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cff_builder_start_point &rArr; cff_builder_add_point1 &rArr; check_points &rArr; FT_GlyphLoader_CheckPoints &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_builder_add_contour
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_builder_add_point1
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_parse_charstrings
</UL>

<P><STRONG><a name="[579]"></a>cff_decoder_parse_charstrings</STRONG> (Thumb, 5682 bytes, Stack size 112 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = cff_decoder_parse_charstrings &rArr; cff_operator_seac &rArr;  cff_decoder_parse_charstrings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_builder_start_point
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_builder_add_point1
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_points
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_builder_add_point
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_operator_seac
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_builder_close_contour
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Add
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_slot_load
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_operator_seac
</UL>

<P><STRONG><a name="[582]"></a>cff_compute_bias</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_init
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_prepare
</UL>

<P><STRONG><a name="[580]"></a>cff_decoder_prepare</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cff_decoder_prepare &rArr; cff_fd_select_get
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_compute_bias
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_fd_select_get
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_slot_load
</UL>

<P><STRONG><a name="[583]"></a>cff_builder_init</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cff_builder_init &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Rewind
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_init
</UL>

<P><STRONG><a name="[584]"></a>cff_decoder_init</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cff_decoder_init &rArr; cff_builder_init &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_builder_init
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_compute_bias
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_slot_load
</UL>

<P><STRONG><a name="[585]"></a>cff_slot_load</STRONG> (Thumb, 1054 bytes, Stack size 936 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = cff_slot_load &rArr; cff_decoder_parse_charstrings &rArr; cff_operator_seac &rArr;  cff_decoder_parse_charstrings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_init
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_prepare
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_decoder_parse_charstrings
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_glyph_data
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_free_glyph_data
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_builder_done
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_fd_select_get
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_synthesize_vertical_metrics
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Transform
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Translate
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Transform
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Get_CBox
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Glyph
</UL>

<P><STRONG><a name="[12d]"></a>Load_Glyph</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = Load_Glyph &rArr; cff_slot_load &rArr; cff_decoder_parse_charstrings &rArr; cff_operator_seac &rArr;  cff_decoder_parse_charstrings (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_slot_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[586]"></a>cff_index_get_name</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cff_index_get_name &rArr; cff_index_access_element &rArr; FT_Stream_ExtractFrame &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_access_element
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_forget_element
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_face_init
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_load
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_name_index
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_sid_string
</UL>

<P><STRONG><a name="[587]"></a>cff_index_get_sid_string</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cff_index_get_sid_string &rArr; cff_index_get_name &rArr; cff_index_access_element &rArr; FT_Stream_ExtractFrame &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_name
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_sid_to_glyph_name
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_face_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_glyph_name
</UL>

<P><STRONG><a name="[120]"></a>cff_get_glyph_name</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = cff_get_glyph_name &rArr; cff_index_get_sid_string &rArr; cff_index_get_name &rArr; cff_index_access_element &rArr; FT_Stream_ExtractFrame &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_module_get_service
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_sid_string
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>cff_get_name_index</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cff_get_name_index &rArr; cff_index_get_name &rArr; cff_index_access_element &rArr; FT_Stream_ExtractFrame &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_module_get_service
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_name
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>cff_ps_has_glyph_names</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cff.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>cff_get_cmap_info</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cff_get_cmap_info &rArr; ft_module_get_service
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_module_get_service
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>cff_get_interface</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cff_get_interface &rArr; FT_Get_Module
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_service_list_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[58a]"></a>cff_parser_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cff_parser_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_subfont_load
</UL>

<P><STRONG><a name="[58d]"></a>cff_parse_integer</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cff_parse_integer
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_fixed_thousand
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_fixed
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_num
</UL>

<P><STRONG><a name="[58b]"></a>cff_parse_real</STRONG> (Thumb, 306 bytes, Stack size 64 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = cff_parse_real &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_fixed_thousand
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_fixed
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_num
</UL>

<P><STRONG><a name="[58c]"></a>cff_parse_num</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = cff_parse_num &rArr; cff_parse_real &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_real
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_integer
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parser_run
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_cid_ros
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_private_dict
</UL>

<P><STRONG><a name="[58e]"></a>cff_parse_fixed</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = cff_parse_fixed &rArr; cff_parse_real &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_real
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_integer
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parser_run
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_font_bbox
</UL>

<P><STRONG><a name="[58f]"></a>cff_parse_fixed_thousand</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = cff_parse_fixed_thousand &rArr; cff_parse_real &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_real
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_integer
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parser_run
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_font_matrix
</UL>

<P><STRONG><a name="[131]"></a>cff_parse_font_matrix</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = cff_parse_font_matrix &rArr; cff_parse_fixed_thousand &rArr; cff_parse_real &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_fixed_thousand
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>cff_parse_font_bbox</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = cff_parse_font_bbox &rArr; cff_parse_fixed &rArr; cff_parse_real &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_RoundFix
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_fixed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>cff_parse_private_dict</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = cff_parse_private_dict &rArr; cff_parse_num &rArr; cff_parse_real &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_num
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>cff_parse_cid_ros</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = cff_parse_cid_ros &rArr; cff_parse_num &rArr; cff_parse_real &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_num
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[591]"></a>cff_parser_run</STRONG> (Thumb, 556 bytes, Stack size 64 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = cff_parser_run &rArr; cff_parse_fixed_thousand &rArr; cff_parse_real &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_fixed_thousand
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_fixed
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parse_num
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_subfont_load
</UL>

<P><STRONG><a name="[596]"></a>cff_get_offset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cff_get_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_new_index
</UL>

<P><STRONG><a name="[592]"></a>cff_new_index</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cff_new_index &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Skip
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadShort
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadChar
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Pos
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExtractFrame
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_get_offset
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_load
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_subfont_load
</UL>

<P><STRONG><a name="[59a]"></a>cff_done_index</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cff_done_index &rArr; FT_Stream_ReleaseFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReleaseFrame
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_done
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_load
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_subfont_done
</UL>

<P><STRONG><a name="[59b]"></a>cff_index_get_pointers</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = cff_index_get_pointers &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_load
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_subfont_load
</UL>

<P><STRONG><a name="[59c]"></a>CFF_Done_FD_Select</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CFF_Done_FD_Select &rArr; FT_Stream_ReleaseFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReleaseFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_done
</UL>

<P><STRONG><a name="[59d]"></a>CFF_Load_FD_Select</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CFF_Load_FD_Select &rArr; FT_Stream_ExtractFrame &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadShort
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadChar
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExtractFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_load
</UL>

<P><STRONG><a name="[59e]"></a>cff_charset_done</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cff_charset_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_done
</UL>

<P><STRONG><a name="[59f]"></a>cff_charset_load</STRONG> (Thumb, 700 bytes, Stack size 56 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cff_charset_load &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadShort
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadChar
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetShort
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_load
</UL>

<P><STRONG><a name="[5a8]"></a>cff_encoding_done</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_done
</UL>

<P><STRONG><a name="[5a2]"></a>cff_encoding_load</STRONG> (Thumb, 726 bytes, Stack size 64 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cff_encoding_load &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadShort
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadChar
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_load
</UL>

<P><STRONG><a name="[5a3]"></a>cff_subfont_load</STRONG> (Thumb, 400 bytes, Stack size 456 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = cff_subfont_load &rArr; cff_parser_run &rArr; cff_parse_fixed_thousand &rArr; cff_parse_real &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_pointers
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_new_index
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parser_run
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_parser_init
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_access_element
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_forget_element
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_load
</UL>

<P><STRONG><a name="[5a4]"></a>cff_subfont_done</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cff_subfont_done &rArr; cff_done_index &rArr; FT_Stream_ReleaseFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_done_index
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_done
</UL>

<P><STRONG><a name="[5a5]"></a>cff_font_load</STRONG> (Thumb, 686 bytes, Stack size 72 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = cff_font_load &rArr; cff_subfont_load &rArr; cff_parser_run &rArr; cff_parse_fixed_thousand &rArr; cff_parse_real &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Skip
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Pos
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_subfont_load
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_encoding_load
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_charset_load
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFF_Load_FD_Select
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_pointers
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_done_index
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_new_index
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_name
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_face_init
</UL>

<P><STRONG><a name="[5a7]"></a>cff_font_done</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cff_font_done &rArr; cff_subfont_done &rArr; cff_done_index &rArr; FT_Stream_ReleaseFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_subfont_done
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_encoding_done
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_charset_done
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CFF_Done_FD_Select
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_done_index
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_face_done
</UL>

<P><STRONG><a name="[5a9]"></a>cff_size_get_globals_funcs</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cff_size_get_globals_funcs &rArr; FT_Get_Module
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_size_request
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_size_select
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_size_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_size_done
</UL>

<P><STRONG><a name="[12a]"></a>cff_size_done</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cff_size_done &rArr; cff_size_get_globals_funcs &rArr; FT_Get_Module
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_size_get_globals_funcs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>cff_size_init</STRONG> (Thumb, 364 bytes, Stack size 248 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = cff_size_init &rArr; cff_size_get_globals_funcs &rArr; FT_Get_Module
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_size_get_globals_funcs
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>cff_size_select</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = cff_size_select &rArr; FT_Select_Metrics &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_size_get_globals_funcs
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Select_Metrics
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_size_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>cff_size_request</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = cff_size_request &rArr; cff_size_select &rArr; FT_Select_Metrics &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Request_Metrics
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_size_select
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_size_get_globals_funcs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>cff_slot_done</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cff.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>cff_slot_init</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cff_slot_init &rArr; FT_Get_Module
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[5ab]"></a>cff_strcpy</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cff_strcpy &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_face_init
</UL>

<P><STRONG><a name="[127]"></a>cff_face_init</STRONG> (Thumb, 1370 bytes, Stack size 104 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = cff_face_init &rArr; cff_font_load &rArr; cff_subfont_load &rArr; cff_parser_run &rArr; cff_parse_fixed_thousand &rArr; cff_parse_real &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_module_get_service
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Matrix_Multiply
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module_Interface
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_strcpy
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_load
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_sid_string
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_name
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_CMap_New
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Transform
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>cff_face_done</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cff_face_done &rArr; cff_font_done &rArr; cff_subfont_done &rArr; cff_done_index &rArr; FT_Stream_ReleaseFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_font_done
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>cff_driver_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cff.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>cff_driver_done</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cff.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>cff_cmap_encoding_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cff_cmap_encoding_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>cff_cmap_encoding_done</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cff.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>cff_cmap_encoding_char_index</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cff.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>cff_cmap_encoding_char_next</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cff_cmap_encoding_char_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>cff_sid_to_glyph_name</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = cff_sid_to_glyph_name &rArr; cff_index_get_sid_string &rArr; cff_index_get_name &rArr; cff_index_access_element &rArr; FT_Stream_ExtractFrame &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cff_index_get_sid_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>cff_cmap_unicode_init</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cff_cmap_unicode_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>cff_cmap_unicode_done</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cff_cmap_unicode_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>cff_cmap_unicode_char_index</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cff_cmap_unicode_char_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>cff_cmap_unicode_char_next</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, cff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cff_cmap_unicode_char_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cff.o(.constdata)
</UL>
<P><STRONG><a name="[5b9]"></a>ft_multo64</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ft_multo64
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
</UL>

<P><STRONG><a name="[5bb]"></a>ft_div64by32</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ft_div64by32
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
</UL>

<P><STRONG><a name="[5ba]"></a>FT_Add64</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FT_Add64
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
</UL>

<P><STRONG><a name="[5c5]"></a>ft_trig_downscale</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Polarize
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Length
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Rotate
</UL>

<P><STRONG><a name="[5c1]"></a>ft_trig_prenorm</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ft_trig_prenorm
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Polarize
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Length
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Rotate
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Atan2
</UL>

<P><STRONG><a name="[5bd]"></a>ft_trig_pseudo_rotate</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, ftbase.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Rotate
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Unit
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Tan
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Cos
</UL>

<P><STRONG><a name="[5c2]"></a>ft_trig_pseudo_polarize</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ft_trig_pseudo_polarize
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Polarize
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Length
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Atan2
</UL>

<P><STRONG><a name="[5d8]"></a>FT_GlyphLoader_Adjust_Points</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FT_GlyphLoader_Adjust_Points
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CreateExtra
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Prepare
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CopyPoints
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckPoints
</UL>

<P><STRONG><a name="[5d9]"></a>FT_GlyphLoader_Adjust_Subglyphs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FT_GlyphLoader_Adjust_Subglyphs
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Prepare
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckSubGlyphs
</UL>

<P><STRONG><a name="[5e3]"></a>ft_glyphslot_init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ft_glyphslot_init &rArr; FT_GlyphLoader_New &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_New
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_GlyphSlot
</UL>

<P><STRONG><a name="[5e6]"></a>ft_glyphslot_clear</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ft_glyphslot_clear &rArr; ft_glyphslot_free_bitmap &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_free_bitmap
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Load_Glyph
</UL>

<P><STRONG><a name="[5e7]"></a>ft_glyphslot_done</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ft_glyphslot_done &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_free_bitmap
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Done
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_GlyphSlot
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_GlyphSlot
</UL>

<P><STRONG><a name="[5ee]"></a>ft_glyphslot_grid_fit_metrics</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ft_glyphslot_grid_fit_metrics
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Load_Glyph
</UL>

<P><STRONG><a name="[5ec]"></a>ft_lookup_glyph_renderer</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ft_lookup_glyph_renderer &rArr; FT_Lookup_Renderer
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Lookup_Renderer
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Load_Glyph
</UL>

<P><STRONG><a name="[91]"></a>destroy_size</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = destroy_size &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftbase.o(.text)
</UL>
<P><STRONG><a name="[5f0]"></a>ft_cmap_done_internal</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ft_cmap_done_internal &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_CMap_Done
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_charmaps
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_CMap_New
</UL>

<P><STRONG><a name="[5f1]"></a>destroy_charmaps</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = destroy_charmaps &rArr; ft_cmap_done_internal &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_cmap_done_internal
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_face
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_face
</UL>

<P><STRONG><a name="[92]"></a>destroy_face</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = destroy_face &rArr; FT_Done_GlyphSlot &rArr; ft_glyphslot_done &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_GlyphSlot
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Free
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_List_Finalize
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_charmaps
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Face
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftbase.o(.text)
</UL>
<P><STRONG><a name="[5f2]"></a>Destroy_Driver</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Destroy_Driver &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_List_Finalize
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Done
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_Module
</UL>

<P><STRONG><a name="[5f4]"></a>find_unicode_charmap</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = find_unicode_charmap
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_face
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Select_Charmap
</UL>

<P><STRONG><a name="[5f3]"></a>open_face</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = open_face &rArr; destroy_charmaps &rArr; ft_cmap_done_internal &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_unicode_charmap
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;destroy_charmaps
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Open_Face
</UL>

<P><STRONG><a name="[5ff]"></a>ft_recompute_scaled_metrics</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ft_recompute_scaled_metrics &rArr; FT_MulFix
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Request_Metrics
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Select_Metrics
</UL>

<P><STRONG><a name="[608]"></a>ft_set_current_renderer</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ft_set_current_renderer &rArr; FT_Lookup_Renderer
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Lookup_Renderer
</UL>
<BR>[Called By]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_remove_renderer
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_add_renderer
</UL>

<P><STRONG><a name="[609]"></a>ft_add_renderer</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ft_add_renderer &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_List_Add
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_set_current_renderer
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Add_Module
</UL>

<P><STRONG><a name="[60a]"></a>ft_remove_renderer</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ft_remove_renderer &rArr; ft_set_current_renderer &rArr; FT_Lookup_Renderer
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_List_Remove
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_List_Find
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_set_current_renderer
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_Module
</UL>

<P><STRONG><a name="[60c]"></a>Destroy_Module</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ftbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Destroy_Module &rArr; Destroy_Driver &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_remove_renderer
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Destroy_Driver
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Remove_Module
</UL>

<P><STRONG><a name="[617]"></a>ft_bitmap_assure_buffer</STRONG> (Thumb, 370 bytes, Stack size 72 bytes, ftbitmap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_qrealloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Embolden
</UL>

<P><STRONG><a name="[622]"></a>FTC_MruNode_Prepend</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTC_MruNode_Prepend
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_node_mru_link
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_New
</UL>

<P><STRONG><a name="[621]"></a>FTC_MruNode_Up</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FTC_MruNode_Up
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_New
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SBitCache_Lookup
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ImageCache_Lookup
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_CMapCache_Lookup
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupSize
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupFace
</UL>

<P><STRONG><a name="[61d]"></a>FTC_MruNode_Remove</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FTC_MruNode_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_node_mru_unlink
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_New
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_Remove
</UL>

<P><STRONG><a name="[61b]"></a>FTC_MruList_Init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FTC_MruList_Init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_gcache_init
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_New
</UL>

<P><STRONG><a name="[61c]"></a>FTC_MruList_Remove</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FTC_MruList_Remove &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruNode_Remove
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_GNode_UnselectFamily
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_RemoveSelection
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_Reset
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SBitCache_Lookup
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ImageCache_Lookup
</UL>

<P><STRONG><a name="[61e]"></a>FTC_MruList_Reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FTC_MruList_Reset &rArr; FTC_MruList_Remove &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_Done
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_Reset
</UL>

<P><STRONG><a name="[61f]"></a>FTC_MruList_Done</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FTC_MruList_Done &rArr; FTC_MruList_Reset &rArr; FTC_MruList_Remove &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_gcache_done
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_Done
</UL>

<P><STRONG><a name="[620]"></a>FTC_MruList_New</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FTC_MruList_New &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruNode_Remove
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruNode_Up
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruNode_Prepend
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SBitCache_Lookup
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ImageCache_Lookup
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupSize
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupFace
</UL>

<P><STRONG><a name="[623]"></a>FTC_MruList_RemoveSelection</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FTC_MruList_RemoveSelection &rArr; FTC_MruList_Remove &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_face_node_done
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_RemoveFaceID
</UL>

<P><STRONG><a name="[93]"></a>ftc_face_node_compare</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ftc_face_node_compare
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ftcache.o(.text)
<LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[625]"></a>ftc_scaler_lookup_size</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ftc_scaler_lookup_size &rArr; FT_Set_Char_Size &rArr; FT_Request_Size &rArr; FT_Request_Metrics &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Activate_Size
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Set_Pixel_Sizes
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Set_Char_Size
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Size
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_Size
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupFace
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_size_node_reset
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_size_node_init
</UL>

<P><STRONG><a name="[13f]"></a>ftc_size_node_done</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ftc_size_node_done &rArr; FT_Done_Size &rArr; destroy_size &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>ftc_size_node_compare</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ftc_size_node_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Activate_Size
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ftcache.o(.text)
<LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>ftc_size_node_init</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ftc_size_node_init &rArr; ftc_scaler_lookup_size &rArr; FT_Set_Char_Size &rArr; FT_Request_Size &rArr; FT_Request_Metrics &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_scaler_lookup_size
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>ftc_size_node_reset</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ftc_size_node_reset &rArr; ftc_scaler_lookup_size &rArr; FT_Set_Char_Size &rArr; FT_Request_Size &rArr; FT_Request_Metrics &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_scaler_lookup_size
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Size
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>ftc_size_node_compare_faceid</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ftc_size_node_compare_faceid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.text)
</UL>
<P><STRONG><a name="[140]"></a>ftc_face_node_init</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ftc_face_node_init &rArr; FT_Done_Size &rArr; destroy_size &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>ftc_face_node_done</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ftc_face_node_done &rArr; FT_Done_Face &rArr; destroy_face &rArr; FT_Done_GlyphSlot &rArr; ft_glyphslot_done &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_RemoveSelection
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Face
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[62b]"></a>ftc_cache_resize</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Cache_Clear
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_node_hash_link
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Cache_RemoveFaceID
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_node_hash_unlink
</UL>

<P><STRONG><a name="[62c]"></a>ftc_node_hash_unlink</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_cache_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_node_destroy
</UL>

<P><STRONG><a name="[62d]"></a>ftc_node_mru_unlink</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ftc_node_mru_unlink &rArr; FTC_MruNode_Remove
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruNode_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Cache_Clear
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Cache_RemoveFaceID
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_node_destroy
</UL>

<P><STRONG><a name="[62f]"></a>FTC_Manager_Compress</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_node_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_cache_add
</UL>

<P><STRONG><a name="[630]"></a>FTC_Manager_RegisterCache</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FTC_Manager_RegisterCache &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_GCache_New
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_CMapCache_New
</UL>

<P><STRONG><a name="[631]"></a>FTC_Manager_FlushN</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = FTC_Manager_FlushN &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_node_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_snode_compare
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Cache_NewNode
</UL>

<P><STRONG><a name="[632]"></a>FTC_Cache_RemoveFaceID</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, ftcache.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_node_mru_unlink
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_cache_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_RemoveFaceID
</UL>

<P><STRONG><a name="[636]"></a>ftc_node_mru_link</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ftc_node_mru_link &rArr; FTC_MruNode_Prepend
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruNode_Prepend
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_cache_add
</UL>

<P><STRONG><a name="[637]"></a>ftc_node_hash_link</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ftc_node_hash_link &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_cache_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_cache_add
</UL>

<P><STRONG><a name="[146]"></a>ftc_cache_init</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ftc_cache_init &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Cache_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[638]"></a>FTC_Cache_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FTC_Cache_Init &rArr; ftc_cache_init &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_cache_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_gcache_init
</UL>

<P><STRONG><a name="[639]"></a>FTC_Cache_Clear</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = FTC_Cache_Clear &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_node_mru_unlink
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_cache_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_cache_done
</UL>

<P><STRONG><a name="[147]"></a>ftc_cache_done</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ftc_cache_done &rArr; FTC_Cache_Clear &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Cache_Clear
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Cache_Done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[63a]"></a>FTC_Cache_Done</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = FTC_Cache_Done &rArr; ftc_cache_done &rArr; FTC_Cache_Clear &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_cache_done
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_gcache_done
</UL>

<P><STRONG><a name="[63b]"></a>ftc_cache_add</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_node_hash_link
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_node_mru_link
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_Compress
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Cache_NewNode
</UL>

<P><STRONG><a name="[63c]"></a>FTC_Cache_NewNode</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_cache_add
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_FlushN
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SBitCache_Lookup
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ImageCache_Lookup
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_CMapCache_Lookup
</UL>

<P><STRONG><a name="[145]"></a>ftc_cmap_node_free</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ftc_cmap_node_free &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>ftc_cmap_node_new</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ftc_cmap_node_new &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>ftc_cmap_node_weight</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ftcache.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>ftc_cmap_node_compare</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ftc_cmap_node_compare
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ftcache.o(.text)
<LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>ftc_cmap_node_remove_faceid</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ftc_cmap_node_remove_faceid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[645]"></a>FTC_GNode_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ftcache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SNode_New
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_INode_New
</UL>

<P><STRONG><a name="[63f]"></a>FTC_GNode_UnselectFamily</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FTC_GNode_UnselectFamily &rArr; FTC_MruList_Remove &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_basic_gnode_compare_faceid
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_GNode_Done
</UL>

<P><STRONG><a name="[640]"></a>FTC_GNode_Done</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FTC_GNode_Done &rArr; FTC_GNode_UnselectFamily &rArr; FTC_MruList_Remove &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_GNode_UnselectFamily
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_snode_free
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_inode_free
</UL>

<P><STRONG><a name="[14c]"></a>ftc_gnode_compare</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ftc_gnode_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_GNode_Compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>FTC_GNode_Compare</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FTC_GNode_Compare &rArr; ftc_gnode_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_gnode_compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.text)
</UL>
<P><STRONG><a name="[64a]"></a>FTC_Family_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ftcache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_basic_family_init
</UL>

<P><STRONG><a name="[14f]"></a>ftc_gcache_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ftc_gcache_init &rArr; FTC_Cache_Init &rArr; ftc_cache_init &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Cache_Init
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>ftc_gcache_done</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ftc_gcache_done &rArr; FTC_Cache_Done &rArr; ftc_cache_done &rArr; FTC_Cache_Clear &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Cache_Done
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MruList_Done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[641]"></a>FTC_GCache_New</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FTC_GCache_New &rArr; FTC_Manager_RegisterCache &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_RegisterCache
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SBitCache_New
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ImageCache_New
</UL>

<P><STRONG><a name="[14e]"></a>ftc_inode_free</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ftc_inode_free &rArr; FTC_GNode_Done &rArr; FTC_GNode_UnselectFamily &rArr; FTC_MruList_Remove &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_GNode_Done
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_INode_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[643]"></a>FTC_INode_Free</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FTC_INode_Free &rArr; ftc_inode_free &rArr; FTC_GNode_Done &rArr; FTC_GNode_UnselectFamily &rArr; FTC_MruList_Remove &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_inode_free
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_INode_New
</UL>

<P><STRONG><a name="[644]"></a>FTC_INode_New</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FTC_INode_New &rArr; FTC_INode_Free &rArr; ftc_inode_free &rArr; FTC_GNode_Done &rArr; FTC_GNode_UnselectFamily &rArr; FTC_MruList_Remove &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_INode_Free
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_GNode_Init
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_inode_new
</UL>

<P><STRONG><a name="[14a]"></a>ftc_inode_new</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ftc_inode_new &rArr; FTC_INode_New &rArr; FTC_INode_Free &rArr; ftc_inode_free &rArr; FTC_GNode_Done &rArr; FTC_GNode_UnselectFamily &rArr; FTC_MruList_Remove &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_INode_New
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>ftc_inode_weight</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ftc_inode_weight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[646]"></a>ftc_sbit_copy_bitmap</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ftc_sbit_copy_bitmap &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_snode_load
</UL>

<P><STRONG><a name="[156]"></a>ftc_snode_free</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ftc_snode_free &rArr; FTC_GNode_Done &rArr; FTC_GNode_UnselectFamily &rArr; FTC_MruList_Remove &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_GNode_Done
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SNode_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[647]"></a>FTC_SNode_Free</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FTC_SNode_Free &rArr; ftc_snode_free &rArr; FTC_GNode_Done &rArr; FTC_GNode_UnselectFamily &rArr; FTC_MruList_Remove &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_snode_free
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SNode_New
</UL>

<P><STRONG><a name="[648]"></a>ftc_snode_load</STRONG> (Thumb, 420 bytes, Stack size 80 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ftc_snode_load &rArr; ftc_sbit_copy_bitmap &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_sbit_copy_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_snode_compare
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SNode_New
</UL>

<P><STRONG><a name="[649]"></a>FTC_SNode_New</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = FTC_SNode_New &rArr; ftc_snode_load &rArr; ftc_sbit_copy_bitmap &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_snode_load
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SNode_Free
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_GNode_Init
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_snode_new
</UL>

<P><STRONG><a name="[153]"></a>ftc_snode_new</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ftc_snode_new &rArr; FTC_SNode_New &rArr; ftc_snode_load &rArr; ftc_sbit_copy_bitmap &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SNode_New
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>ftc_snode_weight</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ftc_snode_weight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>ftc_snode_compare</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ftc_snode_compare &rArr; FTC_Manager_FlushN &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_snode_load
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_FlushN
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SNode_Compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>FTC_SNode_Compare</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = FTC_SNode_Compare &rArr; ftc_snode_compare &rArr; FTC_Manager_FlushN &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftc_snode_compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>ftc_basic_family_compare</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ftc_basic_family_compare
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ftcache.o(.text)
<LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>ftc_basic_family_init</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ftc_basic_family_init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Family_Init
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>ftc_basic_family_get_count</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ftc_basic_family_get_count &rArr; FTC_Manager_LookupFace &rArr; FTC_MruList_New &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupFace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>ftc_basic_family_load_bitmap</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ftc_basic_family_load_bitmap &rArr; FT_Load_Glyph &rArr; FT_Render_Glyph &rArr; FT_Render_Glyph_Internal &rArr; FT_Set_Renderer &rArr; FT_List_Up
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Load_Glyph
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>ftc_basic_family_load_glyph</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ftc_basic_family_load_glyph &rArr; FT_Load_Glyph &rArr; FT_Render_Glyph &rArr; FT_Render_Glyph_Internal &rArr; FT_Set_Renderer &rArr; FT_List_Up
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Load_Glyph
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Glyph
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>ftc_basic_gnode_compare_faceid</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, ftcache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ftc_basic_gnode_compare_faceid &rArr; FTC_GNode_UnselectFamily &rArr; FTC_MruList_Remove &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_GNode_UnselectFamily
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftcache.o(.constdata)
</UL>
<P><STRONG><a name="[650]"></a>ftc_image_type_from_old_desc</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ftcache.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SBit_Cache_Lookup
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Image_Cache_Lookup
</UL>

<P><STRONG><a name="[157]"></a>ft_bitmap_glyph_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ftglyph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ft_bitmap_glyph_init &rArr; FT_Bitmap_Copy &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Copy
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_New
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Glyph_To_Bitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftglyph.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>ft_bitmap_glyph_copy</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ftglyph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ft_bitmap_glyph_copy &rArr; FT_Bitmap_Copy &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftglyph.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>ft_bitmap_glyph_done</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ftglyph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ft_bitmap_glyph_done &rArr; FT_Bitmap_Done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Bitmap_Done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftglyph.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>ft_bitmap_glyph_bbox</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ftglyph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ft_bitmap_glyph_bbox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftglyph.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>ft_outline_glyph_init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ftglyph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ft_outline_glyph_init &rArr; FT_Outline_New &rArr; FT_Outline_New_Internal &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Copy
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_New
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftglyph.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>ft_outline_glyph_done</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftglyph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ft_outline_glyph_done &rArr; FT_Outline_Done &rArr; FT_Outline_Done_Internal &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftglyph.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>ft_outline_glyph_copy</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, ftglyph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ft_outline_glyph_copy &rArr; FT_Outline_New &rArr; FT_Outline_New_Internal &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Copy
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_New
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftglyph.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>ft_outline_glyph_transform</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ftglyph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ft_outline_glyph_transform &rArr; FT_Outline_Transform &rArr; FT_Vector_Transform &rArr; FT_MulFix
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Translate
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Transform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftglyph.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>ft_outline_glyph_bbox</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ftglyph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ft_outline_glyph_bbox &rArr; FT_Outline_Get_CBox
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Get_CBox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftglyph.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>ft_outline_glyph_prepare</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ftglyph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft_outline_glyph_prepare &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftglyph.o(.constdata)
</UL>
<P><STRONG><a name="[655]"></a>ft_new_glyph</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, ftglyph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ft_new_glyph &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Glyph_To_Bitmap
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Glyph_Copy
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Glyph
</UL>

<P><STRONG><a name="[65a]"></a>huft_build</STRONG> (Thumb, 890 bytes, Stack size 264 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = huft_build
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_dynamic
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_bits
</UL>

<P><STRONG><a name="[659]"></a>inflate_trees_bits</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = inflate_trees_bits &rArr; huft_build
</UL>
<BR>[Calls]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huft_build
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
</UL>

<P><STRONG><a name="[65b]"></a>inflate_trees_dynamic</STRONG> (Thumb, 236 bytes, Stack size 80 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = inflate_trees_dynamic &rArr; huft_build
</UL>
<BR>[Calls]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huft_build
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
</UL>

<P><STRONG><a name="[662]"></a>inflate_trees_fixed</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inflate_trees_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
</UL>

<P><STRONG><a name="[65c]"></a>inflate_flush</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inflate_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_codes
</UL>

<P><STRONG><a name="[663]"></a>inflate_codes_new</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inflate_codes_new
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
</UL>

<P><STRONG><a name="[65d]"></a>inflate_codes</STRONG> (Thumb, 1878 bytes, Stack size 72 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = inflate_codes &rArr; inflate_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
</UL>

<P><STRONG><a name="[65f]"></a>inflate_codes_free</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inflate_codes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_reset
</UL>

<P><STRONG><a name="[65e]"></a>inflate_blocks_reset</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inflate_blocks_reset &rArr; inflate_codes_free
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_codes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateReset
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_free
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_new
</UL>

<P><STRONG><a name="[660]"></a>inflate_blocks_new</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inflate_blocks_new &rArr; inflate_blocks_reset &rArr; inflate_codes_free
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateInit2_
</UL>

<P><STRONG><a name="[661]"></a>inflate_blocks</STRONG> (Thumb, 2472 bytes, Stack size 96 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = inflate_blocks &rArr; inflate_trees_dynamic &rArr; huft_build
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_codes_free
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_codes
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_codes_new
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_flush
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_fixed
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_dynamic
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_trees_bits
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
</UL>

<P><STRONG><a name="[664]"></a>inflate_blocks_free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inflate_blocks_free &rArr; inflate_blocks_reset &rArr; inflate_codes_free
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateEnd
</UL>

<P><STRONG><a name="[665]"></a>inflateReset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inflateReset &rArr; inflate_blocks_reset &rArr; inflate_codes_free
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_reset
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateInit2_
</UL>

<P><STRONG><a name="[666]"></a>inflateEnd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inflateEnd &rArr; inflate_blocks_free &rArr; inflate_blocks_reset &rArr; inflate_codes_free
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_free
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_done
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateInit2_
</UL>

<P><STRONG><a name="[9c]"></a>adler32</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adler32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftgzip.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>ft_gzip_free</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ft_gzip_free &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zcfree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftgzip.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>zcfree</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = zcfree &rArr; ft_gzip_free &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftgzip.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>ft_gzip_alloc</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ft_gzip_alloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zcalloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftgzip.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>zcalloc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = zcalloc &rArr; ft_gzip_alloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftgzip.o(.text)
</UL>
<P><STRONG><a name="[667]"></a>inflateInit2_</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inflateInit2_ &rArr; inflateEnd &rArr; inflate_blocks_free &rArr; inflate_blocks_reset &rArr; inflate_codes_free
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateEnd
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateReset
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_new
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_init
</UL>

<P><STRONG><a name="[668]"></a>inflate</STRONG> (Thumb, 954 bytes, Stack size 24 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = inflate &rArr; inflate_blocks &rArr; inflate_trees_dynamic &rArr; huft_build
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate_blocks_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_fill_output
</UL>

<P><STRONG><a name="[669]"></a>ft_gzip_check_header</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ft_gzip_check_header &rArr; FT_Stream_Read &rArr; FT_Stream_ReadAt
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadShortLE
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Read
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Skip
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadChar
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_OpenGzip
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_init
</UL>

<P><STRONG><a name="[66b]"></a>ft_gzip_file_init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ft_gzip_file_init &rArr; inflateInit2_ &rArr; inflateEnd &rArr; inflate_blocks_free &rArr; inflate_blocks_reset &rArr; inflate_codes_free
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Pos
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_check_header
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateInit2_
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_OpenGzip
</UL>

<P><STRONG><a name="[66c]"></a>ft_gzip_file_done</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ft_gzip_file_done &rArr; inflateEnd &rArr; inflate_blocks_free &rArr; inflate_blocks_reset &rArr; inflate_codes_free
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_stream_close
</UL>

<P><STRONG><a name="[66d]"></a>ft_gzip_file_reset</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ft_gzip_file_reset &rArr; inflateReset &rArr; inflate_blocks_reset &rArr; inflate_codes_free
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateReset
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_io
</UL>

<P><STRONG><a name="[66e]"></a>ft_gzip_file_fill_input</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft_gzip_file_fill_input
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_fill_output
</UL>

<P><STRONG><a name="[66f]"></a>ft_gzip_file_fill_output</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ft_gzip_file_fill_output &rArr; inflate &rArr; inflate_blocks &rArr; inflate_trees_dynamic &rArr; huft_build
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_fill_input
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflate
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_io
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_skip_output
</UL>

<P><STRONG><a name="[670]"></a>ft_gzip_file_skip_output</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ft_gzip_file_skip_output &rArr; ft_gzip_file_fill_output &rArr; inflate &rArr; inflate_blocks &rArr; inflate_trees_dynamic &rArr; huft_build
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_fill_output
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_io
</UL>

<P><STRONG><a name="[671]"></a>ft_gzip_file_io</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ft_gzip_file_io &rArr; ft_gzip_file_skip_output &rArr; ft_gzip_file_fill_output &rArr; inflate &rArr; inflate_blocks &rArr; inflate_trees_dynamic &rArr; huft_build
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_skip_output
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_fill_output
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_reset
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_stream_io
</UL>

<P><STRONG><a name="[a0]"></a>ft_gzip_stream_close</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ft_gzip_stream_close &rArr; ft_gzip_file_done &rArr; inflateEnd &rArr; inflate_blocks_free &rArr; inflate_blocks_reset &rArr; inflate_codes_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftgzip.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>ft_gzip_stream_io</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ftgzip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ft_gzip_stream_io &rArr; ft_gzip_file_io &rArr; ft_gzip_file_skip_output &rArr; ft_gzip_file_fill_output &rArr; inflate &rArr; inflate_blocks &rArr; inflate_trees_dynamic &rArr; huft_build
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_gzip_file_io
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftgzip.o(.text)
</UL>
<P><STRONG><a name="[678]"></a>ft_lzw_check_header</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ftlzw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ft_lzw_check_header &rArr; FT_Stream_Read &rArr; FT_Stream_ReadAt
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Read
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_OpenLZW
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_file_init
</UL>

<P><STRONG><a name="[67b]"></a>ft_lzw_file_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ftlzw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ft_lzw_file_init &rArr; ft_lzw_check_header &rArr; FT_Stream_Read &rArr; FT_Stream_ReadAt
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_init
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_check_header
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_OpenLZW
</UL>

<P><STRONG><a name="[67d]"></a>ft_lzw_file_done</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ftlzw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ft_lzw_file_done &rArr; ft_lzwstate_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_done
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_stream_close
</UL>

<P><STRONG><a name="[67e]"></a>ft_lzw_file_reset</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ftlzw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ft_lzw_file_reset &rArr; FT_Stream_Seek
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_file_io
</UL>

<P><STRONG><a name="[67f]"></a>ft_lzwstate_prefix_grow</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, ftlzw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ft_lzwstate_prefix_grow &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_io
</UL>

<P><STRONG><a name="[681]"></a>ft_lzwstate_stack_grow</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ftlzw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ft_lzwstate_stack_grow &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_io
</UL>

<P><STRONG><a name="[682]"></a>ft_lzwstate_refill</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ftlzw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ft_lzwstate_refill &rArr; FT_Stream_TryRead
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_TryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_get_code
</UL>

<P><STRONG><a name="[683]"></a>ft_lzwstate_get_code</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ftlzw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ft_lzwstate_get_code &rArr; ft_lzwstate_refill &rArr; FT_Stream_TryRead
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_refill
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_io
</UL>

<P><STRONG><a name="[685]"></a>ft_lzw_file_fill_output</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ftlzw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ft_lzw_file_fill_output &rArr; ft_lzwstate_io &rArr; ft_lzwstate_stack_grow &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_io
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_file_io
</UL>

<P><STRONG><a name="[686]"></a>ft_lzw_file_skip_output</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ftlzw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ft_lzw_file_skip_output &rArr; ft_lzwstate_io &rArr; ft_lzwstate_stack_grow &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzwstate_io
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_file_io
</UL>

<P><STRONG><a name="[687]"></a>ft_lzw_file_io</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, ftlzw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ft_lzw_file_io &rArr; ft_lzw_file_skip_output &rArr; ft_lzwstate_io &rArr; ft_lzwstate_stack_grow &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_file_skip_output
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_file_fill_output
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_file_reset
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_stream_io
</UL>

<P><STRONG><a name="[a2]"></a>ft_lzw_stream_close</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ftlzw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ft_lzw_stream_close &rArr; ft_lzw_file_done &rArr; ft_lzwstate_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_file_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftlzw.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>ft_lzw_stream_io</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ftlzw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ft_lzw_stream_io &rArr; ft_lzw_file_io &rArr; ft_lzw_file_skip_output &rArr; ft_lzwstate_io &rArr; ft_lzwstate_stack_grow &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_lzw_file_io
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftlzw.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>ft_alloc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftsystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ft_alloc &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftsystem.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>ft_realloc</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ftsystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ft_realloc &rArr; myrealloc &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftsystem.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>ft_free</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ftsystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ft_free &rArr; myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftsystem.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>_cbFaceRequester</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, gui_ttf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _cbFaceRequester &rArr; FT_New_Memory_Face &rArr; FT_Open_Face &rArr; FT_Done_Face &rArr; destroy_face &rArr; FT_Done_GlyphSlot &rArr; ft_glyphslot_done &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_Memory_Face
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_ttf.o(.text)
</UL>
<P><STRONG><a name="[689]"></a>_CheckInit</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gui_ttf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _CheckInit &rArr; FT_Init_FreeType &rArr; FT_Add_Default_Modules &rArr; FT_Add_Module &rArr; FT_Remove_Module &rArr; Destroy_Module &rArr; Destroy_Driver &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Init_FreeType
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SBitCache_New
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ImageCache_New
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_CMapCache_New
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_New
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateFont
</UL>

<P><STRONG><a name="[68a]"></a>_RequestGlyph</STRONG> (Thumb, 302 bytes, Stack size 96 bytes, gui_ttf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = _RequestGlyph &rArr; FTC_SBitCache_Lookup &rArr; FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SBitCache_Lookup
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_CMapCache_Lookup
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupSize
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupFace
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharDistX
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearLine
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
</UL>

<P><STRONG><a name="[aa]"></a>_DispChar</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_ttf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _DispChar &rArr; _RequestGlyph &rArr; FTC_SBitCache_Lookup &rArr; FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RequestGlyph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_ttf.o(.text)
</UL>
<P><STRONG><a name="[68c]"></a>_RequestGlyphAA</STRONG> (Thumb, 420 bytes, Stack size 96 bytes, gui_ttf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = _RequestGlyphAA &rArr; FTC_SBitCache_Lookup &rArr; FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA__DrawCharAA8
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SBitCache_Lookup
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_CMapCache_Lookup
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupSize
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupFace
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharDistX_AA
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearLineAA
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispCharAA
</UL>

<P><STRONG><a name="[ac]"></a>_DispCharAA</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_ttf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = _DispCharAA &rArr; _RequestGlyphAA &rArr; FTC_SBitCache_Lookup &rArr; FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RequestGlyphAA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_ttf.o(.text)
</UL>
<P><STRONG><a name="[68e]"></a>_ClearLine</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, gui_ttf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = _ClearLine &rArr; _RequestGlyph &rArr; FTC_SBitCache_Lookup &rArr; FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ClearTextBackground
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RequestGlyph
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[691]"></a>_ClearLineAA</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, gui_ttf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = _ClearLineAA &rArr; _RequestGlyphAA &rArr; FTC_SBitCache_Lookup &rArr; FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ClearTextBackground
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RequestGlyphAA
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLineAA
</UL>

<P><STRONG><a name="[161]"></a>_DispLine</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gui_ttf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = _DispLine &rArr; _ClearLine &rArr; _RequestGlyph &rArr; FTC_SBitCache_Lookup &rArr; FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_ttf.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>_DispLineAA</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gui_ttf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = _DispLineAA &rArr; _ClearLineAA &rArr; _RequestGlyphAA &rArr; FTC_SBitCache_Lookup &rArr; FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearLineAA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_ttf.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>_GetCharDistX</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gui_ttf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _GetCharDistX &rArr; _RequestGlyph &rArr; FTC_SBitCache_Lookup &rArr; FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RequestGlyph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_ttf.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>_GetCharDistX_AA</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gui_ttf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = _GetCharDistX_AA &rArr; _RequestGlyphAA &rArr; FTC_SBitCache_Lookup &rArr; FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RequestGlyphAA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_ttf.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>_GetFontInfo</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_ttf.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> gui_ttf.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>_IsInFont</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gui_ttf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _IsInFont &rArr; FTC_CMapCache_Lookup &rArr; FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_CMapCache_Lookup
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupFace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_ttf.o(.text)
</UL>
<P><STRONG><a name="[692]"></a>_GetName</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, gui_ttf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupFace
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TTF_GetStyleName
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TTF_GetFamilyName
</UL>

<P><STRONG><a name="[694]"></a>_CreateFont</STRONG> (Thumb, 276 bytes, Stack size 80 bytes, gui_ttf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = _CreateFont &rArr; FTC_ImageCache_Lookup &rArr; FTC_Cache_NewNode &rArr; ftc_cache_add &rArr; FTC_Manager_Compress &rArr; ftc_node_destroy &rArr; ftc_node_hash_unlink &rArr; ftc_cache_resize &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckInit
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ImageCache_Lookup
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_CMapCache_Lookup
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupSize
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Manager_LookupFace
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TTF_CreateFont
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TTF_CreateFontAA
</UL>

<P><STRONG><a name="[6aa]"></a>BitOrderInvert</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BitOrderInvert
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_Glyph_Load
</UL>

<P><STRONG><a name="[6ab]"></a>TwoByteSwap</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pcf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_Glyph_Load
</UL>

<P><STRONG><a name="[6ac]"></a>FourByteSwap</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pcf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_Glyph_Load
</UL>

<P><STRONG><a name="[69a]"></a>pcf_read_TOC</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pcf_read_TOC &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_load_font
</UL>

<P><STRONG><a name="[69b]"></a>pcf_get_metric</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pcf_get_metric &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_accel
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_metrics
</UL>

<P><STRONG><a name="[69c]"></a>pcf_seek_to_table_type</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pcf_seek_to_table_type &rArr; FT_Stream_Skip &rArr; FT_Stream_Seek
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Skip
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_accel
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_encodings
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_bitmaps
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_metrics
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_properties
</UL>

<P><STRONG><a name="[6a9]"></a>pcf_has_table_type</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pcf_has_table_type
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_load_font
</UL>

<P><STRONG><a name="[69d]"></a>pcf_find_property</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pcf_find_property
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_bdf_property
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_load_font
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_interpret_style
</UL>

<P><STRONG><a name="[69e]"></a>pcf_get_properties</STRONG> (Thumb, 764 bytes, Stack size 64 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pcf_get_properties &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadLongLE
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadLong
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Read
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Skip
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_seek_to_table_type
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_load_font
</UL>

<P><STRONG><a name="[6a0]"></a>pcf_get_metrics</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pcf_get_metrics &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadLongLE
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadLong
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadShortLE
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadShort
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_seek_to_table_type
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_metric
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_load_font
</UL>

<P><STRONG><a name="[6a1]"></a>pcf_get_bitmaps</STRONG> (Thumb, 392 bytes, Stack size 72 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pcf_get_bitmaps &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadLongLE
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadLong
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetLongLE
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetLong
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_seek_to_table_type
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_load_font
</UL>

<P><STRONG><a name="[6a4]"></a>pcf_get_encodings</STRONG> (Thumb, 512 bytes, Stack size 80 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pcf_get_encodings &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetLongLE
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetShortLE
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetShort
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_seek_to_table_type
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_load_font
</UL>

<P><STRONG><a name="[6a6]"></a>pcf_get_accel</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pcf_get_accel &rArr; pcf_get_metric &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadLongLE
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_seek_to_table_type
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_metric
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_load_font
</UL>

<P><STRONG><a name="[6a7]"></a>pcf_interpret_style</STRONG> (Thumb, 544 bytes, Stack size 64 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pcf_interpret_style &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_find_property
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_load_font
</UL>

<P><STRONG><a name="[6a8]"></a>pcf_load_font</STRONG> (Thumb, 846 bytes, Stack size 56 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = pcf_load_font &rArr; pcf_get_encodings &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_interpret_style
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_accel
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_encodings
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_bitmaps
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_metrics
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_get_properties
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_find_property
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_has_table_type
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_read_TOC
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_Face_Init
</UL>

<P><STRONG><a name="[163]"></a>pcf_cmap_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pcf_cmap_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pcf.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>pcf_cmap_done</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pcf.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pcf.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>pcf_cmap_char_index</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pcf_cmap_char_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pcf.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>pcf_cmap_char_next</STRONG> (Thumb, 106 bytes, Stack size 28 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = pcf_cmap_char_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pcf.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>PCF_Face_Done</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PCF_Face_Done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Close
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pcf.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>PCF_Face_Init</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = PCF_Face_Init &rArr; pcf_load_font &rArr; pcf_get_encodings &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_CMap_New
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_load_font
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_OpenLZW
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_OpenGzip
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pcf.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>PCF_Size_Select</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PCF_Size_Select &rArr; FT_Select_Metrics &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Select_Metrics
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_Size_Request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pcf.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>PCF_Size_Request</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = PCF_Size_Request &rArr; PCF_Size_Select &rArr; FT_Select_Metrics &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF_Size_Select
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pcf.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>PCF_Glyph_Load</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PCF_Glyph_Load &rArr; ft_glyphslot_alloc_bitmap &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_alloc_bitmap
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Read
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_synthesize_vertical_metrics
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FourByteSwap
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoByteSwap
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitOrderInvert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pcf.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>pcf_get_bdf_property</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pcf_get_bdf_property &rArr; pcf_find_property
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf_find_property
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pcf.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>pcf_get_charset_id</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pcf.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pcf.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>pcf_driver_requester</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pcf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pcf_driver_requester &rArr; ft_service_list_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_service_list_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pcf.o(.constdata)
</UL>
<P><STRONG><a name="[6ae]"></a>pfr_extra_items_parse</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pfr_extra_items_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_phy_font_load
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_extra_items_skip
</UL>

<P><STRONG><a name="[6ad]"></a>pfr_extra_items_skip</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pfr_extra_items_skip &rArr; pfr_extra_items_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_extra_items_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_compound
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_simple
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_log_font_load
</UL>

<P><STRONG><a name="[6af]"></a>pfr_header_load</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pfr_header_load &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_face_init
</UL>

<P><STRONG><a name="[6c2]"></a>pfr_header_check</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pfr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_face_init
</UL>

<P><STRONG><a name="[6b0]"></a>pfr_log_font_count</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pfr_log_font_count &rArr; FT_Stream_ReadShort
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadShort
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_face_init
</UL>

<P><STRONG><a name="[6b1]"></a>pfr_log_font_load</STRONG> (Thumb, 674 bytes, Stack size 64 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pfr_log_font_load &rArr; pfr_extra_items_skip &rArr; pfr_extra_items_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadOffset
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Skip
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadShort
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_extra_items_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_face_init
</UL>

<P><STRONG><a name="[16f]"></a>pfr_extra_item_load_bitmap_info</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pfr_extra_item_load_bitmap_info &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>pfr_extra_item_load_font_id</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pfr_extra_item_load_font_id &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>pfr_extra_item_load_stem_snaps</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pfr_extra_item_load_stem_snaps &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>pfr_extra_item_load_kerning_pairs</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pfr_extra_item_load_kerning_pairs &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[6b3]"></a>pfr_aux_name_load</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pfr_aux_name_load &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_phy_font_load
</UL>

<P><STRONG><a name="[6b4]"></a>pfr_phy_font_done</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pfr_phy_font_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_face_done
</UL>

<P><STRONG><a name="[6b5]"></a>pfr_phy_font_load</STRONG> (Thumb, 1248 bytes, Stack size 80 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pfr_phy_font_load &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Pos
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_aux_name_load
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_extra_items_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_face_init
</UL>

<P><STRONG><a name="[6b6]"></a>pfr_glyph_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pfr_glyph_init &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Rewind
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_slot_init
</UL>

<P><STRONG><a name="[6b7]"></a>pfr_glyph_done</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pfr_glyph_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_slot_done
</UL>

<P><STRONG><a name="[6bb]"></a>pfr_glyph_close_contour</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pfr_glyph_close_contour
</UL>
<BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_end
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_move_to
</UL>

<P><STRONG><a name="[6be]"></a>pfr_glyph_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pfr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_simple
</UL>

<P><STRONG><a name="[6b8]"></a>pfr_glyph_line_to</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pfr_glyph_line_to &rArr; FT_GlyphLoader_CheckPoints &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckPoints
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_simple
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_move_to
</UL>

<P><STRONG><a name="[6b9]"></a>pfr_glyph_curve_to</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pfr_glyph_curve_to &rArr; FT_GlyphLoader_CheckPoints &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckPoints
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_simple
</UL>

<P><STRONG><a name="[6ba]"></a>pfr_glyph_move_to</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pfr_glyph_move_to &rArr; pfr_glyph_line_to &rArr; FT_GlyphLoader_CheckPoints &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckPoints
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_line_to
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_close_contour
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_simple
</UL>

<P><STRONG><a name="[6bc]"></a>pfr_glyph_end</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pfr_glyph_end &rArr; FT_GlyphLoader_Add &rArr; FT_GlyphLoader_Prepare &rArr; FT_GlyphLoader_Adjust_Subglyphs
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Add
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_close_contour
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_simple
</UL>

<P><STRONG><a name="[6bd]"></a>pfr_glyph_load_simple</STRONG> (Thumb, 1078 bytes, Stack size 112 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pfr_glyph_load_simple &rArr; pfr_glyph_move_to &rArr; pfr_glyph_line_to &rArr; FT_GlyphLoader_CheckPoints &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_end
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_move_to
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_curve_to
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_line_to
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_start
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_extra_items_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_rec
</UL>

<P><STRONG><a name="[6bf]"></a>pfr_glyph_load_compound</STRONG> (Thumb, 680 bytes, Stack size 80 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pfr_glyph_load_compound &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_extra_items_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_rec
</UL>

<P><STRONG><a name="[6c0]"></a>pfr_glyph_load_rec</STRONG> (Thumb, 366 bytes, Stack size 80 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + In Cycle
<LI>Call Chain = pfr_glyph_load_rec &rArr;  pfr_glyph_load_rec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_rec
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_compound
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_simple
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_rec
</UL>

<P><STRONG><a name="[6c1]"></a>pfr_glyph_load</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = pfr_glyph_load &rArr; pfr_glyph_load_rec &rArr;  pfr_glyph_load_rec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Rewind
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load_rec
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_slot_load
</UL>

<P><STRONG><a name="[173]"></a>pfr_cmap_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pfr_cmap_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>pfr_cmap_done</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pfr.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>pfr_cmap_char_index</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pfr_cmap_char_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>pfr_cmap_char_next</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pfr_cmap_char_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>pfr_face_done</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pfr_face_done &rArr; pfr_phy_font_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_phy_font_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>pfr_face_init</STRONG> (Thumb, 628 bytes, Stack size 72 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pfr_face_init &rArr; pfr_phy_font_load &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_CMap_New
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_phy_font_load
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_log_font_load
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_log_font_count
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_header_check
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_header_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>pfr_slot_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pfr_slot_init &rArr; pfr_glyph_init &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[17e]"></a>pfr_slot_done</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pfr_slot_done &rArr; pfr_glyph_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[6c7]"></a>pfr_bitwriter_decode_rle2</STRONG> (Thumb, 148 bytes, Stack size 36 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pfr_bitwriter_decode_rle2
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_load_bitmap_bits
</UL>

<P><STRONG><a name="[6c6]"></a>pfr_bitwriter_decode_rle1</STRONG> (Thumb, 190 bytes, Stack size 44 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = pfr_bitwriter_decode_rle1
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_load_bitmap_bits
</UL>

<P><STRONG><a name="[6c5]"></a>pfr_bitwriter_decode_bytes</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pfr_bitwriter_decode_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_load_bitmap_bits
</UL>

<P><STRONG><a name="[6c4]"></a>pfr_bitwriter_init</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pfr_bitwriter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_load_bitmap_bits
</UL>

<P><STRONG><a name="[6c3]"></a>pfr_load_bitmap_bits</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = pfr_load_bitmap_bits &rArr; pfr_bitwriter_decode_rle1
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_bitwriter_init
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_bitwriter_decode_bytes
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_bitwriter_decode_rle1
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_bitwriter_decode_rle2
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_slot_load_bitmap
</UL>

<P><STRONG><a name="[6ca]"></a>pfr_load_bitmap_metrics</STRONG> (Thumb, 548 bytes, Stack size 40 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pfr_load_bitmap_metrics
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_slot_load_bitmap
</UL>

<P><STRONG><a name="[6c9]"></a>pfr_lookup_bitmap_data</STRONG> (Thumb, 224 bytes, Stack size 52 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pfr_lookup_bitmap_data
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_slot_load_bitmap
</UL>

<P><STRONG><a name="[6c8]"></a>pfr_slot_load_bitmap</STRONG> (Thumb, 490 bytes, Stack size 112 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = pfr_slot_load_bitmap &rArr; pfr_load_bitmap_bits &rArr; pfr_bitwriter_decode_rle1
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_alloc_bitmap
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_lookup_bitmap_data
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_load_bitmap_metrics
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_load_bitmap_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_slot_load
</UL>

<P><STRONG><a name="[17f]"></a>pfr_slot_load</STRONG> (Thumb, 434 bytes, Stack size 112 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = pfr_slot_load &rArr; pfr_glyph_load &rArr; pfr_glyph_load_rec &rArr;  pfr_glyph_load_rec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Get_CBox
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_slot_load_bitmap
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_glyph_load
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>pfr_face_get_kerning</STRONG> (Thumb, 512 bytes, Stack size 104 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pfr_face_get_kerning &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_highpow2
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_get_kerning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[180]"></a>pfr_get_kerning</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pfr_get_kerning &rArr; pfr_face_get_kerning &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pfr_face_get_kerning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>pfr_get_advance</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pfr_get_advance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>pfr_get_metrics</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = pfr_get_metrics &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>pfr_get_service</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pfr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pfr_get_service &rArr; ft_service_list_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_service_list_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pfr.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>ps_table_new</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ps_table_new &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[6cd]"></a>shift_elements</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = shift_elements
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_table_done
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallocate_t1_table
</UL>

<P><STRONG><a name="[6cc]"></a>reallocate_t1_table</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = reallocate_t1_table &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_elements
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_table_add
</UL>

<P><STRONG><a name="[183]"></a>ps_table_add</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ps_table_add &rArr; reallocate_t1_table &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallocate_t1_table
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[182]"></a>ps_table_done</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ps_table_done &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_elements
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>ps_table_release</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ps_table_release &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[6cf]"></a>skip_comment</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, psaux.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_spaces
</UL>

<P><STRONG><a name="[6ce]"></a>skip_spaces</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = skip_spaces
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_comment
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_load_field
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_tofixedarray
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_tocoordarray
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_skip_spaces
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_skip_PS_token
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_string
</UL>

<P><STRONG><a name="[6d1]"></a>skip_literal_string</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skip_literal_string
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_to_token
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_skip_PS_token
</UL>

<P><STRONG><a name="[6d0]"></a>skip_string</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = skip_string &rArr; skip_spaces
</UL>
<BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_spaces
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_skip_PS_token
</UL>

<P><STRONG><a name="[188]"></a>ps_parser_skip_PS_token</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ps_parser_skip_PS_token &rArr; skip_string &rArr; skip_spaces
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_string
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_literal_string
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_spaces
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_to_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>ps_parser_skip_spaces</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ps_parser_skip_spaces &rArr; skip_spaces
</UL>
<BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_spaces
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_to_fixed_array
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_to_coord_array
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_to_fixed
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_to_bytes
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_to_int
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_to_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>ps_parser_to_token</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ps_parser_to_token &rArr; ps_parser_skip_PS_token &rArr; skip_string &rArr; skip_spaces
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_skip_spaces
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_skip_PS_token
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_literal_string
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_load_field
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_to_token_array
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>ps_parser_to_token_array</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ps_parser_to_token_array &rArr; ps_parser_to_token &rArr; ps_parser_skip_PS_token &rArr; skip_string &rArr; skip_spaces
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_to_token
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_load_field_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[6d3]"></a>PS_Conv_Strtol</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PS_Conv_Strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Conv_ToInt
</UL>

<P><STRONG><a name="[6d2]"></a>PS_Conv_ToInt</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PS_Conv_ToInt &rArr; PS_Conv_Strtol
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Conv_Strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_read_vals
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_to_int
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_load_field
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Conv_ToFixed
</UL>

<P><STRONG><a name="[6d4]"></a>PS_Conv_ToFixed</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PS_Conv_ToFixed &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Conv_ToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_read_vals
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_to_fixed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_load_field
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_tofixedarray
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_tocoordarray
</UL>

<P><STRONG><a name="[6d5]"></a>ps_tocoordarray</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ps_tocoordarray &rArr; PS_Conv_ToFixed &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Conv_ToFixed
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_spaces
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_to_coord_array
</UL>

<P><STRONG><a name="[6d6]"></a>ps_tofixedarray</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ps_tofixedarray &rArr; PS_Conv_ToFixed &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Conv_ToFixed
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_spaces
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_to_fixed_array
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_load_field
</UL>

<P><STRONG><a name="[6d7]"></a>ps_tobool</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ps_tobool
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_load_field
</UL>

<P><STRONG><a name="[190]"></a>ps_parser_load_field</STRONG> (Thumb, 464 bytes, Stack size 104 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ps_parser_load_field &rArr; ps_tofixedarray &rArr; PS_Conv_ToFixed &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_RoundFix
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_tobool
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_tofixedarray
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Conv_ToFixed
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Conv_ToInt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_to_token
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_spaces
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_load_field_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>ps_parser_load_field_table</STRONG> (Thumb, 182 bytes, Stack size 464 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = ps_parser_load_field_table &rArr; ps_parser_load_field &rArr; ps_tofixedarray &rArr; PS_Conv_ToFixed &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_load_field
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_to_token_array
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>ps_parser_to_int</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ps_parser_to_int &rArr; PS_Conv_ToInt &rArr; PS_Conv_Strtol
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Conv_ToInt
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_skip_spaces
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[6d8]"></a>PS_Conv_ASCIIHexDecode</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PS_Conv_ASCIIHexDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_to_bytes
</UL>

<P><STRONG><a name="[18b]"></a>ps_parser_to_bytes</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ps_parser_to_bytes &rArr; ps_parser_skip_spaces &rArr; skip_spaces
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Conv_ASCIIHexDecode
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_skip_spaces
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[18a]"></a>ps_parser_to_fixed</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ps_parser_to_fixed &rArr; PS_Conv_ToFixed &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Conv_ToFixed
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_skip_spaces
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>ps_parser_to_coord_array</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ps_parser_to_coord_array &rArr; ps_tocoordarray &rArr; PS_Conv_ToFixed &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_tocoordarray
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_skip_spaces
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>ps_parser_to_fixed_array</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ps_parser_to_fixed_array &rArr; ps_tofixedarray &rArr; PS_Conv_ToFixed &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_tofixedarray
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_parser_skip_spaces
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>ps_parser_init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ps_parser_init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>ps_parser_done</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, psaux.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[192]"></a>t1_builder_init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = t1_builder_init &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Rewind
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_decoder_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[193]"></a>t1_builder_done</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = t1_builder_done &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_decoder_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[194]"></a>t1_builder_check_points</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = t1_builder_check_points &rArr; FT_GlyphLoader_CheckPoints &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckPoints
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_decoder_parse_charstrings
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_add_point1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[195]"></a>t1_builder_add_point</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = t1_builder_add_point
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_decoder_parse_charstrings
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_add_point1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>t1_builder_add_point1</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = t1_builder_add_point1 &rArr; t1_builder_check_points &rArr; FT_GlyphLoader_CheckPoints &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_add_point
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_check_points
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_decoder_parse_charstrings
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_start_point
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>t1_builder_add_contour</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = t1_builder_add_contour &rArr; FT_GlyphLoader_CheckPoints &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckPoints
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_start_point
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>t1_builder_start_point</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = t1_builder_start_point &rArr; t1_builder_add_point1 &rArr; t1_builder_check_points &rArr; FT_GlyphLoader_CheckPoints &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_add_contour
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_add_point1
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_decoder_parse_charstrings
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[199]"></a>t1_builder_close_contour</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = t1_builder_close_contour
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_decoder_parse_charstrings
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[6d9]"></a>PS_Conv_EexecDecode</STRONG> (Thumb, 76 bytes, Stack size 28 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PS_Conv_EexecDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_decrypt
</UL>

<P><STRONG><a name="[1a0]"></a>t1_decrypt</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = t1_decrypt &rArr; PS_Conv_EexecDecode
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Conv_EexecDecode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[6da]"></a>t1_lookup_glyph_by_stdcharcode</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = t1_lookup_glyph_by_stdcharcode
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1operator_seac
</UL>

<P><STRONG><a name="[6dc]"></a>t1_decoder_parse_glyph</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = t1_decoder_parse_glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1operator_seac
</UL>

<P><STRONG><a name="[6db]"></a>t1operator_seac</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = t1operator_seac &rArr; FT_GlyphLoader_CheckSubGlyphs &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Prepare
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckSubGlyphs
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_decoder_parse_glyph
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_lookup_glyph_by_stdcharcode
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_decoder_parse_charstrings
</UL>

<P><STRONG><a name="[19c]"></a>t1_decoder_parse_charstrings</STRONG> (Thumb, 2390 bytes, Stack size 104 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = t1_decoder_parse_charstrings &rArr; t1operator_seac &rArr; FT_GlyphLoader_CheckSubGlyphs &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Add
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1operator_seac
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_close_contour
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_start_point
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_add_point1
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_add_point
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_check_points
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[19a]"></a>t1_decoder_init</STRONG> (Thumb, 134 bytes, Stack size 64 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = t1_decoder_init &rArr; t1_builder_init &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_module_get_service
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_init
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>t1_decoder_done</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = t1_decoder_done &rArr; t1_builder_done &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_builder_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[6dd]"></a>t1_cmap_std_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = t1_cmap_std_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_cmap_expert_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_cmap_standard_init
</UL>

<P><STRONG><a name="[1a2]"></a>t1_cmap_std_done</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, psaux.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[1a3]"></a>t1_cmap_std_char_index</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = t1_cmap_std_char_index
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_cmap_std_char_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>t1_cmap_std_char_next</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = t1_cmap_std_char_next &rArr; t1_cmap_std_char_index
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_cmap_std_char_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>t1_cmap_standard_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = t1_cmap_standard_init &rArr; t1_cmap_std_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_cmap_std_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[1a5]"></a>t1_cmap_expert_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = t1_cmap_expert_init &rArr; t1_cmap_std_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_cmap_std_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[1a6]"></a>t1_cmap_custom_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = t1_cmap_custom_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[1a7]"></a>t1_cmap_custom_done</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, psaux.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[1a8]"></a>t1_cmap_custom_char_index</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = t1_cmap_custom_char_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[1a9]"></a>t1_cmap_custom_char_next</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = t1_cmap_custom_char_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>t1_get_glyph_name</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, psaux.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.text)
</UL>
<P><STRONG><a name="[1aa]"></a>t1_cmap_unicode_init</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = t1_cmap_unicode_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[1ab]"></a>t1_cmap_unicode_done</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = t1_cmap_unicode_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[1ac]"></a>t1_cmap_unicode_char_index</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = t1_cmap_unicode_char_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>t1_cmap_unicode_char_next</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = t1_cmap_unicode_char_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[6df]"></a>afm_stream_skip_spaces</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, psaux.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_stream_read_string
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_stream_read_one
</UL>

<P><STRONG><a name="[6de]"></a>afm_stream_read_one</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = afm_stream_read_one
</UL>
<BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_stream_skip_spaces
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_next_key
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_read_vals
</UL>

<P><STRONG><a name="[6e0]"></a>afm_stream_read_string</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = afm_stream_read_string
</UL>
<BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_stream_skip_spaces
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_next_key
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_read_vals
</UL>

<P><STRONG><a name="[6e1]"></a>afm_parser_read_vals</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = afm_parser_read_vals &rArr; PS_Conv_ToFixed &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_qalloc
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_stream_read_string
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_stream_read_one
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Conv_ToFixed
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Conv_ToInt
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_parse
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_kern_pairs
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_track_kern
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_read_int
</UL>

<P><STRONG><a name="[6e2]"></a>afm_parser_next_key</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = afm_parser_next_key &rArr; afm_stream_read_string
</UL>
<BR>[Calls]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_stream_read_string
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_stream_read_one
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_parse
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_skip_section
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_kern_data
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_kern_pairs
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_track_kern
</UL>

<P><STRONG><a name="[6e3]"></a>afm_tokenize</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = afm_tokenize &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_parse
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_skip_section
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_kern_data
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_kern_pairs
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_track_kern
</UL>

<P><STRONG><a name="[19d]"></a>afm_parser_init</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = afm_parser_init &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[19e]"></a>afm_parser_done</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = afm_parser_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[6e4]"></a>afm_parser_read_int</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = afm_parser_read_int &rArr; afm_parser_read_vals &rArr; PS_Conv_ToFixed &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_read_vals
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_parse
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_kern_pairs
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_track_kern
</UL>

<P><STRONG><a name="[6e5]"></a>afm_parse_track_kern</STRONG> (Thumb, 258 bytes, Stack size 72 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = afm_parse_track_kern &rArr; afm_parser_read_int &rArr; afm_parser_read_vals &rArr; PS_Conv_ToFixed &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_read_int
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_tokenize
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_next_key
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_read_vals
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_kern_data
</UL>

<P><STRONG><a name="[ae]"></a>afm_compare_kern_pairs</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = afm_compare_kern_pairs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.text)
</UL>
<P><STRONG><a name="[6e6]"></a>afm_parse_kern_pairs</STRONG> (Thumb, 320 bytes, Stack size 72 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = afm_parse_kern_pairs &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_read_int
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_tokenize
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_next_key
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_read_vals
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_kern_data
</UL>

<P><STRONG><a name="[6e7]"></a>afm_parse_kern_data</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = afm_parse_kern_data &rArr; afm_parse_kern_pairs &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_kern_pairs
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_track_kern
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_tokenize
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_next_key
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_parse
</UL>

<P><STRONG><a name="[6e8]"></a>afm_parser_skip_section</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = afm_parser_skip_section &rArr; afm_parser_next_key &rArr; afm_stream_read_string
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_tokenize
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_next_key
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_parse
</UL>

<P><STRONG><a name="[19f]"></a>afm_parser_parse</STRONG> (Thumb, 400 bytes, Stack size 72 bytes, psaux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = afm_parser_parse &rArr; afm_parse_kern_data &rArr; afm_parse_kern_pairs &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_skip_section
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parse_kern_data
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_read_int
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_tokenize
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_next_key
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afm_parser_read_vals
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psaux.o(.constdata)
</UL>
<P><STRONG><a name="[6e9]"></a>ps_hint_table_done</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ps_hint_table_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_done
</UL>

<P><STRONG><a name="[6ea]"></a>ps_hint_table_ensure</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ps_hint_table_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hint_table_alloc
</UL>

<P><STRONG><a name="[6eb]"></a>ps_hint_table_alloc</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ps_hint_table_alloc &rArr; ps_hint_table_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hint_table_ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_add_t1stem
</UL>

<P><STRONG><a name="[6ec]"></a>ps_mask_done</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ps_mask_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_done
</UL>

<P><STRONG><a name="[6ed]"></a>ps_mask_ensure</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ps_mask_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_merge
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_set_bits
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_set_bit
</UL>

<P><STRONG><a name="[6ff]"></a>ps_mask_test_bit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ps_mask_test_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_add_counter
</UL>

<P><STRONG><a name="[6f5]"></a>ps_mask_clear_bit</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ps_mask_clear_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_merge
</UL>

<P><STRONG><a name="[6ee]"></a>ps_mask_set_bit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ps_mask_set_bit &rArr; ps_mask_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_add_counter
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_add_t1stem
</UL>

<P><STRONG><a name="[6ef]"></a>ps_mask_table_done</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ps_mask_table_done &rArr; ps_mask_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_done
</UL>
<BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_done
</UL>

<P><STRONG><a name="[6f0]"></a>ps_mask_table_ensure</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ps_mask_table_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_alloc
</UL>

<P><STRONG><a name="[6f1]"></a>ps_mask_table_alloc</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ps_mask_table_alloc &rArr; ps_mask_table_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_last
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_add_counter
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_reset_mask
</UL>

<P><STRONG><a name="[6f2]"></a>ps_mask_table_last</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ps_mask_table_last &rArr; ps_mask_table_alloc &rArr; ps_mask_table_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_set_bits
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_add_t1stem
</UL>

<P><STRONG><a name="[6f3]"></a>ps_mask_table_set_bits</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ps_mask_table_set_bits &rArr; ps_mask_table_last &rArr; ps_mask_table_alloc &rArr; ps_mask_table_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_last
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_set_mask_bits
</UL>

<P><STRONG><a name="[6f8]"></a>ps_mask_table_test_intersect</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ps_mask_table_test_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_merge_all
</UL>

<P><STRONG><a name="[6f4]"></a>ps_mask_table_merge</STRONG> (Thumb, 260 bytes, Stack size 88 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ps_mask_table_merge &rArr; ps_mask_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_clear_bit
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_ensure
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_merge_all
</UL>

<P><STRONG><a name="[6f7]"></a>ps_mask_table_merge_all</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ps_mask_table_merge_all &rArr; ps_mask_table_merge &rArr; ps_mask_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_merge
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_test_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_end
</UL>

<P><STRONG><a name="[6f9]"></a>ps_dimension_done</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ps_dimension_done &rArr; ps_mask_table_done &rArr; ps_mask_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_done
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hint_table_done
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_done
</UL>

<P><STRONG><a name="[704]"></a>ps_dimension_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pshinter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_open
</UL>

<P><STRONG><a name="[6fb]"></a>ps_dimension_end_mask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ps_dimension_end_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_end
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_reset_mask
</UL>

<P><STRONG><a name="[6fa]"></a>ps_dimension_reset_mask</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ps_dimension_reset_mask &rArr; ps_mask_table_alloc &rArr; ps_mask_table_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_alloc
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_end_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_t1reset
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_set_mask_bits
</UL>

<P><STRONG><a name="[6fc]"></a>ps_dimension_set_mask_bits</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ps_dimension_set_mask_bits &rArr; ps_mask_table_set_bits &rArr; ps_mask_table_last &rArr; ps_mask_table_alloc &rArr; ps_mask_table_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_set_bits
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_reset_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_t2counter
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_t2mask
</UL>

<P><STRONG><a name="[6fd]"></a>ps_dimension_add_t1stem</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ps_dimension_add_t1stem &rArr; ps_mask_table_last &rArr; ps_mask_table_alloc &rArr; ps_mask_table_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_last
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_set_bit
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hint_table_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_t1stem3
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_stem
</UL>

<P><STRONG><a name="[6fe]"></a>ps_dimension_add_counter</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ps_dimension_add_counter &rArr; ps_mask_table_alloc &rArr; ps_mask_table_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_alloc
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_set_bit
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_test_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_t1stem3
</UL>

<P><STRONG><a name="[700]"></a>ps_dimension_end</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ps_dimension_end &rArr; ps_mask_table_merge_all &rArr; ps_mask_table_merge &rArr; ps_mask_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_mask_table_merge_all
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_end_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_close
</UL>

<P><STRONG><a name="[701]"></a>ps_hints_done</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ps_hints_done &rArr; ps_dimension_done &rArr; ps_mask_table_done &rArr; ps_mask_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_done
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hinter_done
</UL>

<P><STRONG><a name="[702]"></a>ps_hints_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ps_hints_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hinter_init
</UL>

<P><STRONG><a name="[703]"></a>ps_hints_open</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ps_hints_open
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t2_hints_open
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_hints_open
</UL>

<P><STRONG><a name="[705]"></a>ps_hints_stem</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ps_hints_stem &rArr; ps_dimension_add_t1stem &rArr; ps_mask_table_last &rArr; ps_mask_table_alloc &rArr; ps_mask_table_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_add_t1stem
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t2_hints_stems
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_hints_stem
</UL>

<P><STRONG><a name="[b2]"></a>ps_hints_t1stem3</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ps_hints_t1stem3 &rArr; ps_dimension_add_t1stem &rArr; ps_mask_table_last &rArr; ps_mask_table_alloc &rArr; ps_mask_table_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_add_counter
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_add_t1stem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>ps_hints_t1reset</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ps_hints_t1reset &rArr; ps_dimension_reset_mask &rArr; ps_mask_table_alloc &rArr; ps_mask_table_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_reset_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>ps_hints_t2mask</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ps_hints_t2mask &rArr; ps_dimension_set_mask_bits &rArr; ps_mask_table_set_bits &rArr; ps_mask_table_last &rArr; ps_mask_table_alloc &rArr; ps_mask_table_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_set_mask_bits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>ps_hints_t2counter</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ps_hints_t2counter &rArr; ps_dimension_set_mask_bits &rArr; ps_mask_table_set_bits &rArr; ps_mask_table_last &rArr; ps_mask_table_alloc &rArr; ps_mask_table_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_set_mask_bits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>ps_hints_close</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ps_hints_close &rArr; ps_dimension_end &rArr; ps_mask_table_merge_all &rArr; ps_mask_table_merge &rArr; ps_mask_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_dimension_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>t1_hints_open</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = t1_hints_open &rArr; ps_hints_open
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>t1_hints_stem</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = t1_hints_stem &rArr; ps_hints_stem &rArr; ps_dimension_add_t1stem &rArr; ps_mask_table_last &rArr; ps_mask_table_alloc &rArr; ps_mask_table_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_stem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.text)
</UL>
<P><STRONG><a name="[706]"></a>psh_hint_table_done</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = psh_hint_table_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_done
</UL>

<P><STRONG><a name="[707]"></a>psh_glyph_done</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = psh_glyph_done &rArr; psh_hint_table_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_table_done
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_apply
</UL>

<P><STRONG><a name="[721]"></a>psh_glyph_save_points</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = psh_glyph_save_points
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_apply
</UL>

<P><STRONG><a name="[708]"></a>psh_glyph_interpolate_other_points</STRONG> (Thumb, 398 bytes, Stack size 88 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = psh_glyph_interpolate_other_points &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_apply
</UL>

<P><STRONG><a name="[709]"></a>psh_glyph_interpolate_normal_points</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = psh_glyph_interpolate_normal_points &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_apply
</UL>

<P><STRONG><a name="[70a]"></a>psh_glyph_interpolate_strong_points</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = psh_glyph_interpolate_strong_points &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_apply
</UL>

<P><STRONG><a name="[720]"></a>psh_glyph_find_blue_points</STRONG> (Thumb, 320 bytes, Stack size 28 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = psh_glyph_find_blue_points
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_apply
</UL>

<P><STRONG><a name="[70e]"></a>psh_hint_table_find_strong_point</STRONG> (Thumb, 416 bytes, Stack size 36 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = psh_hint_table_find_strong_point
</UL>
<BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_find_strong_points
</UL>

<P><STRONG><a name="[70c]"></a>psh_hint_table_deactivate</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pshinter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_table_activate_mask
</UL>

<P><STRONG><a name="[70b]"></a>psh_hint_table_activate_mask</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = psh_hint_table_activate_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_table_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_find_strong_points
</UL>

<P><STRONG><a name="[70d]"></a>psh_glyph_find_strong_points</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = psh_glyph_find_strong_points &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_table_activate_mask
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_table_find_strong_point
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_apply
</UL>

<P><STRONG><a name="[712]"></a>psh_hint_snap_stem_side_delta</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = psh_hint_snap_stem_side_delta
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_align
</UL>

<P><STRONG><a name="[711]"></a>psh_dimension_quantize_len</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = psh_dimension_quantize_len
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_align
</UL>

<P><STRONG><a name="[710]"></a>psh_blues_snap_stem</STRONG> (Thumb, 218 bytes, Stack size 28 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = psh_blues_snap_stem
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_align
</UL>

<P><STRONG><a name="[70f]"></a>psh_hint_align</STRONG> (Thumb, 484 bytes, Stack size 80 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + In Cycle
<LI>Call Chain = psh_hint_align &rArr;  psh_hint_align (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_align
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_blues_snap_stem
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_dimension_quantize_len
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_snap_stem_side_delta
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_table_align_hints
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_align
</UL>

<P><STRONG><a name="[713]"></a>psh_hint_table_align_hints</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = psh_hint_table_align_hints &rArr; psh_hint_align &rArr;  psh_hint_align (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_align
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_apply
</UL>

<P><STRONG><a name="[71f]"></a>psh_glyph_compute_extrema</STRONG> (Thumb, 262 bytes, Stack size 20 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = psh_glyph_compute_extrema
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_apply
</UL>

<P><STRONG><a name="[71d]"></a>psh_glyph_load_points</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = psh_glyph_load_points
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_apply
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_init
</UL>

<P><STRONG><a name="[714]"></a>psh_blues_scale_zones</STRONG> (Thumb, 382 bytes, Stack size 56 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = psh_blues_scale_zones &rArr; FT_MulFix
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_globals_set_scale
</UL>

<P><STRONG><a name="[715]"></a>psh_globals_scale_widths</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = psh_globals_scale_widths &rArr; FT_MulFix
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_globals_set_scale
</UL>

<P><STRONG><a name="[b9]"></a>psh_globals_set_scale</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = psh_globals_set_scale &rArr; psh_blues_scale_zones &rArr; FT_MulFix
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_globals_scale_widths
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_blues_scale_zones
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_apply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.text)
</UL>
<P><STRONG><a name="[717]"></a>psh_hint_overlap</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pshinter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_table_record
</UL>

<P><STRONG><a name="[716]"></a>psh_hint_table_record</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = psh_hint_table_record
</UL>
<BR>[Calls]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_overlap
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_table_init
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_table_record_mask
</UL>

<P><STRONG><a name="[718]"></a>psh_hint_table_record_mask</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = psh_hint_table_record_mask &rArr; psh_hint_table_record
</UL>
<BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_table_record
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_table_init
</UL>

<P><STRONG><a name="[719]"></a>psh_hint_table_init</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = psh_hint_table_init &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_table_record_mask
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_table_record
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_init
</UL>

<P><STRONG><a name="[71a]"></a>psh_glyph_compute_inflections</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = psh_glyph_compute_inflections &rArr; FT_Atan2 &rArr; ft_trig_pseudo_polarize
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Angle_Diff
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_init
</UL>

<P><STRONG><a name="[71c]"></a>psh_compute_dir</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = psh_compute_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_init
</UL>

<P><STRONG><a name="[71b]"></a>psh_glyph_init</STRONG> (Thumb, 602 bytes, Stack size 80 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = psh_glyph_init &rArr; psh_hint_table_init &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Atan2
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_compute_dir
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_compute_inflections
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_hint_table_init
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_glyph_load_points
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_apply
</UL>

<P><STRONG><a name="[722]"></a>t1_hints_funcs_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = t1_hints_funcs_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hinter_init
</UL>

<P><STRONG><a name="[b4]"></a>t2_hints_open</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = t2_hints_open &rArr; ps_hints_open
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>t2_hints_stems</STRONG> (Thumb, 112 bytes, Stack size 160 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = t2_hints_stems &rArr; ps_hints_stem &rArr; ps_dimension_add_t1stem &rArr; ps_mask_table_last &rArr; ps_mask_table_alloc &rArr; ps_mask_table_ensure &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_stem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.text)
</UL>
<P><STRONG><a name="[723]"></a>t2_hints_funcs_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = t2_hints_funcs_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hinter_init
</UL>

<P><STRONG><a name="[724]"></a>psh_blues_set_zones_0</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = psh_blues_set_zones_0 &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_blues_set_zones
</UL>

<P><STRONG><a name="[725]"></a>psh_blues_set_zones</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = psh_blues_set_zones &rArr; psh_blues_set_zones_0 &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_blues_set_zones_0
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_globals_new
</UL>

<P><STRONG><a name="[ba]"></a>psh_globals_destroy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = psh_globals_destroy &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>psh_globals_new</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = psh_globals_new &rArr; psh_blues_set_zones &rArr; psh_blues_set_zones_0 &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_blues_set_zones
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.text)
</UL>
<P><STRONG><a name="[726]"></a>psh_globals_funcs_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pshinter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hinter_init
</UL>

<P><STRONG><a name="[1b2]"></a>ps_hinter_done</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ps_hinter_done &rArr; ps_hints_done &rArr; ps_dimension_done &rArr; ps_mask_table_done &rArr; ps_mask_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.constdata)
</UL>
<P><STRONG><a name="[1b1]"></a>ps_hinter_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pshinter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ps_hinter_init &rArr; ps_hints_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psh_globals_funcs_init
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t2_hints_funcs_init
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_hints_funcs_init
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_hints_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.constdata)
</UL>
<P><STRONG><a name="[1ae]"></a>pshinter_get_globals_funcs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pshinter.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.constdata)
</UL>
<P><STRONG><a name="[1af]"></a>pshinter_get_t1_funcs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pshinter.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.constdata)
</UL>
<P><STRONG><a name="[1b0]"></a>pshinter_get_t2_funcs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pshinter.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pshinter.o(.constdata)
</UL>
<P><STRONG><a name="[1b3]"></a>ps_get_macintosh_name</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, psnames.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> psnames.o(.constdata)
</UL>
<P><STRONG><a name="[1b4]"></a>ps_get_standard_strings</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, psnames.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> psnames.o(.constdata)
</UL>
<P><STRONG><a name="[1b5]"></a>psnames_get_service</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, psnames.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = psnames_get_service &rArr; ft_service_list_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_service_list_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> psnames.o(.constdata)
</UL>
<P><STRONG><a name="[73b]"></a>Set_High_Precision</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, raster.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Render_Glyph
</UL>

<P><STRONG><a name="[72e]"></a>New_Profile</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, raster.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cubic_To
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conic_To
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_To
</UL>

<P><STRONG><a name="[72f]"></a>End_Profile</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = End_Profile
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Glyph
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cubic_To
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conic_To
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_To
</UL>

<P><STRONG><a name="[728]"></a>Insert_Y_Turn</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Insert_Y_Turn
</UL>
<BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finalize_Profile_Table
</UL>

<P><STRONG><a name="[727]"></a>Finalize_Profile_Table</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Finalize_Profile_Table &rArr; Insert_Y_Turn
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Y_Turn
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Glyph
</UL>

<P><STRONG><a name="[bb]"></a>Split_Conic</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Split_Conic
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conic_To
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>Split_Cubic</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Split_Cubic
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cubic_To
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.text)
</UL>
<P><STRONG><a name="[729]"></a>Line_Up</STRONG> (Thumb, 380 bytes, Stack size 88 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Line_Up &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_To
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Down
</UL>

<P><STRONG><a name="[72a]"></a>Line_Down</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Line_Down &rArr; Line_Up &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Up
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_To
</UL>

<P><STRONG><a name="[72c]"></a>Bezier_Up</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bezier_Up
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cubic_To
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conic_To
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Down
</UL>

<P><STRONG><a name="[72b]"></a>Bezier_Down</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Bezier_Down &rArr; Bezier_Up
</UL>
<BR>[Calls]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Up
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cubic_To
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conic_To
</UL>

<P><STRONG><a name="[72d]"></a>Line_To</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Line_To &rArr; Line_Down &rArr; Line_Up &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Down
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Up
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;End_Profile
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Profile
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decompose_Curve
</UL>

<P><STRONG><a name="[730]"></a>Conic_To</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Conic_To &rArr; Bezier_Down &rArr; Bezier_Up
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Down
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Up
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_Conic
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;End_Profile
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Profile
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decompose_Curve
</UL>

<P><STRONG><a name="[731]"></a>Cubic_To</STRONG> (Thumb, 288 bytes, Stack size 80 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Cubic_To &rArr; Bezier_Down &rArr; Bezier_Up
</UL>
<BR>[Calls]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Down
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bezier_Up
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_Cubic
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;End_Profile
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;New_Profile
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decompose_Curve
</UL>

<P><STRONG><a name="[732]"></a>Decompose_Curve</STRONG> (Thumb, 788 bytes, Stack size 104 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Decompose_Curve &rArr; Line_To &rArr; Line_Down &rArr; Line_Up &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cubic_To
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conic_To
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_To
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Glyph
</UL>

<P><STRONG><a name="[733]"></a>Convert_Glyph</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Convert_Glyph &rArr; Decompose_Curve &rArr; Line_To &rArr; Line_Down &rArr; Line_Up &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decompose_Curve
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Finalize_Profile_Table
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;End_Profile
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Render_Single_Pass
</UL>

<P><STRONG><a name="[735]"></a>Init_Linked</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raster.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Sweep
</UL>

<P><STRONG><a name="[736]"></a>InsNew</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InsNew
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Sweep
</UL>

<P><STRONG><a name="[737]"></a>DelOld</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelOld
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Sweep
</UL>

<P><STRONG><a name="[738]"></a>Sort</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Sort
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Sweep
</UL>

<P><STRONG><a name="[bd]"></a>Vertical_Sweep_Init</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Vertical_Sweep_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>Vertical_Sweep_Span</STRONG> (Thumb, 304 bytes, Stack size 36 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Vertical_Sweep_Span
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>Vertical_Sweep_Drop</STRONG> (Thumb, 394 bytes, Stack size 36 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Vertical_Sweep_Drop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>Vertical_Sweep_Step</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raster.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>Horizontal_Sweep_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, raster.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>Horizontal_Sweep_Span</STRONG> (Thumb, 136 bytes, Stack size 36 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Horizontal_Sweep_Span
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>Horizontal_Sweep_Drop</STRONG> (Thumb, 410 bytes, Stack size 36 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Horizontal_Sweep_Drop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>Horizontal_Sweep_Step</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, raster.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.text)
</UL>
<P><STRONG><a name="[734]"></a>Draw_Sweep</STRONG> (Thumb, 642 bytes, Stack size 96 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Draw_Sweep &rArr; Sort
</UL>
<BR>[Calls]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sort
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelOld
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsNew
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Linked
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Render_Single_Pass
</UL>

<P><STRONG><a name="[739]"></a>Render_Single_Pass</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Render_Single_Pass &rArr; Convert_Glyph &rArr; Decompose_Curve &rArr; Line_To &rArr; Line_Down &rArr; Line_Up &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Sweep
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Render_Glyph
</UL>

<P><STRONG><a name="[73a]"></a>Render_Glyph</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Render_Glyph &rArr; Render_Single_Pass &rArr; Convert_Glyph &rArr; Decompose_Curve &rArr; Line_To &rArr; Line_Down &rArr; Line_Up &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Render_Single_Pass
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_High_Precision
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_black_render
</UL>

<P><STRONG><a name="[73d]"></a>Render_Gray_Glyph</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, raster.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_black_render
</UL>

<P><STRONG><a name="[73c]"></a>ft_black_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ft_black_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_black_new
</UL>

<P><STRONG><a name="[1b6]"></a>ft_black_new</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ft_black_new &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_black_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>ft_black_done</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ft_black_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.constdata)
</UL>
<P><STRONG><a name="[1b7]"></a>ft_black_reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ft_black_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.constdata)
</UL>
<P><STRONG><a name="[1b8]"></a>ft_black_set_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, raster.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.constdata)
</UL>
<P><STRONG><a name="[1b9]"></a>ft_black_render</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ft_black_render &rArr; Render_Glyph &rArr; Render_Single_Pass &rArr; Convert_Glyph &rArr; Decompose_Curve &rArr; Line_To &rArr; Line_Down &rArr; Line_Up &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Render_Gray_Glyph
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Render_Glyph
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.constdata)
</UL>
<P><STRONG><a name="[1bb]"></a>ft_raster1_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ft_raster1_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.constdata)
</UL>
<P><STRONG><a name="[1bf]"></a>ft_raster1_set_mode</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ft_raster1_set_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.constdata)
</UL>
<P><STRONG><a name="[1bd]"></a>ft_raster1_transform</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ft_raster1_transform &rArr; FT_Outline_Transform &rArr; FT_Vector_Transform &rArr; FT_MulFix
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Translate
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Transform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.constdata)
</UL>
<P><STRONG><a name="[1be]"></a>ft_raster1_get_cbox</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ft_raster1_get_cbox &rArr; FT_Outline_Get_CBox
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Get_CBox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.constdata)
</UL>
<P><STRONG><a name="[1bc]"></a>ft_raster1_render</STRONG> (Thumb, 424 bytes, Stack size 120 bytes, raster.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ft_raster1_render &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Translate
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Get_CBox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raster.o(.constdata)
</UL>
<P><STRONG><a name="[73e]"></a>tt_face_lookup_table</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tt_face_lookup_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_load_face
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_any
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_goto_table
</UL>

<P><STRONG><a name="[1e4]"></a>tt_face_goto_table</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tt_face_goto_table &rArr; FT_Stream_Seek
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_lookup_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[73f]"></a>check_table_dir</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = check_table_dir &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadLong
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_font_dir
</UL>

<P><STRONG><a name="[202]"></a>tt_face_load_font_dir</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tt_face_load_font_dir &rArr; check_table_dir &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadLong
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetLong
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Pos
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_table_dir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1df]"></a>tt_face_load_any</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tt_face_load_any &rArr; FT_Stream_ReadAt
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadAt
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_lookup_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[740]"></a>tt_face_load_generic_header</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tt_face_load_generic_header &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_bhed
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_head
</UL>

<P><STRONG><a name="[1eb]"></a>tt_face_load_head</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tt_face_load_head &rArr; tt_face_load_generic_header &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_generic_header
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1f8]"></a>tt_face_load_bhed</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tt_face_load_bhed &rArr; tt_face_load_generic_header &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_generic_header
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1ee]"></a>tt_face_load_maxp</STRONG> (Thumb, 140 bytes, Stack size 96 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tt_face_load_maxp &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1f1]"></a>tt_face_load_name</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tt_face_load_name &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Pos
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1f2]"></a>tt_face_free_name</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tt_face_free_name &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1ed]"></a>tt_face_load_cmap</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tt_face_load_cmap &rArr; FT_Stream_ExtractFrame &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExtractFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1ef]"></a>tt_face_load_os2</STRONG> (Thumb, 172 bytes, Stack size 240 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tt_face_load_os2 &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1f0]"></a>tt_face_load_post</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tt_face_load_post &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1f7]"></a>tt_face_load_pclt</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tt_face_load_pclt &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1f6]"></a>tt_face_load_gasp</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tt_face_load_gasp &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetShort
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[203]"></a>tt_face_load_hmtx</STRONG> (Thumb, 442 bytes, Stack size 72 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tt_face_load_hmtx &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetShort
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1ec]"></a>tt_face_load_hhea</STRONG> (Thumb, 122 bytes, Stack size 104 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tt_face_load_hhea &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[208]"></a>tt_face_get_metrics</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tt_face_get_metrics
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1c0]"></a>tt_cmap_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sfnt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1c3]"></a>tt_cmap0_validate</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tt_cmap0_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_validator_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1c1]"></a>tt_cmap0_char_index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sfnt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1c2]"></a>tt_cmap0_char_next</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tt_cmap0_char_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1c4]"></a>tt_cmap0_get_info</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tt_cmap0_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1c7]"></a>tt_cmap2_validate</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tt_cmap2_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_validator_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[741]"></a>tt_cmap2_get_subheader</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tt_cmap2_get_subheader
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap2_char_next
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap2_char_index
</UL>

<P><STRONG><a name="[1c5]"></a>tt_cmap2_char_index</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tt_cmap2_char_index &rArr; tt_cmap2_get_subheader
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap2_get_subheader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1c6]"></a>tt_cmap2_char_next</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tt_cmap2_char_next &rArr; tt_cmap2_get_subheader
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap2_get_subheader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1c8]"></a>tt_cmap2_get_info</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tt_cmap2_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1c9]"></a>tt_cmap4_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tt_cmap4_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[743]"></a>tt_cmap4_set_range</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tt_cmap4_set_range
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap4_char_map_binary
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap4_next
</UL>

<P><STRONG><a name="[742]"></a>tt_cmap4_next</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tt_cmap4_next &rArr; tt_cmap4_set_range
</UL>
<BR>[Calls]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap4_set_range
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap4_char_next
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap4_char_map_binary
</UL>

<P><STRONG><a name="[1cc]"></a>tt_cmap4_validate</STRONG> (Thumb, 692 bytes, Stack size 88 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tt_cmap4_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_validator_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[745]"></a>tt_cmap4_char_map_linear</STRONG> (Thumb, 262 bytes, Stack size 44 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tt_cmap4_char_map_linear
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap4_char_next
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap4_char_index
</UL>

<P><STRONG><a name="[744]"></a>tt_cmap4_char_map_binary</STRONG> (Thumb, 694 bytes, Stack size 72 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = tt_cmap4_char_map_binary &rArr; tt_cmap4_next &rArr; tt_cmap4_set_range
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap4_next
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap4_set_range
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap4_char_next
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap4_char_index
</UL>

<P><STRONG><a name="[1ca]"></a>tt_cmap4_char_index</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = tt_cmap4_char_index &rArr; tt_cmap4_char_map_binary &rArr; tt_cmap4_next &rArr; tt_cmap4_set_range
</UL>
<BR>[Calls]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap4_char_map_binary
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap4_char_map_linear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1cb]"></a>tt_cmap4_char_next</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = tt_cmap4_char_next &rArr; tt_cmap4_char_map_binary &rArr; tt_cmap4_next &rArr; tt_cmap4_set_range
</UL>
<BR>[Calls]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap4_char_map_binary
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap4_char_map_linear
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap4_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1cd]"></a>tt_cmap4_get_info</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tt_cmap4_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1d0]"></a>tt_cmap6_validate</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tt_cmap6_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_validator_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1ce]"></a>tt_cmap6_char_index</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tt_cmap6_char_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1cf]"></a>tt_cmap6_char_next</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tt_cmap6_char_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1d1]"></a>tt_cmap6_get_info</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tt_cmap6_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1d4]"></a>tt_cmap8_validate</STRONG> (Thumb, 498 bytes, Stack size 64 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tt_cmap8_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_validator_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1d2]"></a>tt_cmap8_char_index</STRONG> (Thumb, 192 bytes, Stack size 28 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tt_cmap8_char_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1d3]"></a>tt_cmap8_char_next</STRONG> (Thumb, 218 bytes, Stack size 36 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tt_cmap8_char_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1d5]"></a>tt_cmap8_get_info</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tt_cmap8_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1d8]"></a>tt_cmap10_validate</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tt_cmap10_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_validator_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1d6]"></a>tt_cmap10_char_index</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tt_cmap10_char_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1d7]"></a>tt_cmap10_char_next</STRONG> (Thumb, 146 bytes, Stack size 28 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tt_cmap10_char_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1d9]"></a>tt_cmap10_get_info</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tt_cmap10_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1da]"></a>tt_cmap12_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sfnt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1dd]"></a>tt_cmap12_validate</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tt_cmap12_validate
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_validator_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[747]"></a>tt_cmap12_next</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tt_cmap12_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap12_char_next
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap12_char_map_binary
</UL>

<P><STRONG><a name="[746]"></a>tt_cmap12_char_map_binary</STRONG> (Thumb, 304 bytes, Stack size 64 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tt_cmap12_char_map_binary &rArr; tt_cmap12_next
</UL>
<BR>[Calls]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap12_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap12_char_next
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap12_char_index
</UL>

<P><STRONG><a name="[1db]"></a>tt_cmap12_char_index</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tt_cmap12_char_index &rArr; tt_cmap12_char_map_binary &rArr; tt_cmap12_next
</UL>
<BR>[Calls]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap12_char_map_binary
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1dc]"></a>tt_cmap12_char_next</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tt_cmap12_char_next &rArr; tt_cmap12_char_map_binary &rArr; tt_cmap12_next
</UL>
<BR>[Calls]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap12_char_map_binary
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_cmap12_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1de]"></a>tt_cmap12_get_info</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tt_cmap12_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[748]"></a>tt_face_build_cmaps</STRONG> (Thumb, 376 bytes, Stack size 472 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = tt_face_build_cmaps &rArr; FT_CMap_New &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_validator_init
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_CMap_New
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_load_face
</UL>

<P><STRONG><a name="[1e3]"></a>tt_get_cmap_info</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tt_get_cmap_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1f5]"></a>tt_face_load_kern</STRONG> (Thumb, 390 bytes, Stack size 64 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tt_face_load_kern &rArr; FT_Stream_ExtractFrame &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExtractFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[74a]"></a>tt_face_done_kern</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tt_face_done_kern &rArr; FT_Stream_ReleaseFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReleaseFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_done_face
</UL>

<P><STRONG><a name="[201]"></a>tt_face_get_kerning</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tt_face_get_kerning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>tt_name_entry_ascii_from_utf16</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tt_name_entry_ascii_from_utf16 &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>tt_name_entry_ascii_from_ucs4</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tt_name_entry_ascii_from_ucs4 &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>tt_name_entry_ascii_from_other</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tt_name_entry_ascii_from_other &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.text)
</UL>
<P><STRONG><a name="[74b]"></a>tt_face_get_name</STRONG> (Thumb, 414 bytes, Stack size 64 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tt_face_get_name &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Read
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_load_face
</UL>

<P><STRONG><a name="[74d]"></a>sfnt_find_encoding</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sfnt_find_encoding
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_load_face
</UL>

<P><STRONG><a name="[74c]"></a>sfnt_open_font</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sfnt_open_font &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadLong
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetLong
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Pos
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_init_face
</UL>

<P><STRONG><a name="[1e5]"></a>sfnt_init_face</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sfnt_init_face &rArr; sfnt_open_font &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_module_get_service
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module_Interface
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_open_font
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1e6]"></a>sfnt_load_face</STRONG> (Thumb, 1376 bytes, Stack size 112 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = sfnt_load_face &rArr; tt_face_build_cmaps &rArr; FT_CMap_New &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfnt_find_encoding
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_get_name
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_build_cmaps
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_lookup_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1e7]"></a>sfnt_done_face</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sfnt_done_face &rArr; tt_face_done_kern &rArr; FT_Stream_ReleaseFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReleaseFrame
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_done_kern
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1e0]"></a>get_sfnt_table</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_sfnt_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1e1]"></a>sfnt_table_info</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sfnt_table_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1e2]"></a>sfnt_get_ps_name</STRONG> (Thumb, 482 bytes, Stack size 56 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sfnt_get_ps_name &rArr; FT_Stream_Read &rArr; FT_Stream_ReadAt
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Read
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1e8]"></a>sfnt_get_interface</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sfnt_get_interface &rArr; ft_service_list_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_service_list_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1e9]"></a>tt_face_load_sfnt_header_stub</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tt_face_load_sfnt_header_stub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1ea]"></a>tt_face_load_directory_stub</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sfnt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1f3]"></a>tt_face_load_hdmx_stub</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sfnt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1f4]"></a>tt_face_free_hdmx_stub</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfnt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[206]"></a>tt_face_set_sbit_strike</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tt_face_set_sbit_strike &rArr; FT_Match_Size
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Match_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_set_sbit_strike_stub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1f9]"></a>tt_face_set_sbit_strike_stub</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = tt_face_set_sbit_strike_stub &rArr; tt_face_set_sbit_strike &rArr; FT_Match_Size
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_set_sbit_strike
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1fa]"></a>tt_face_load_sbit_stub</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sfnt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1fe]"></a>tt_face_free_sbit_stub</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sfnt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1ff]"></a>tt_face_load_charmap_stub</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sfnt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[200]"></a>tt_face_free_charmap_stub</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sfnt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[754]"></a>blit_sbit</STRONG> (Thumb, 304 bytes, Stack size 52 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = blit_sbit
</UL>
<BR>[Called By]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Single
</UL>

<P><STRONG><a name="[74e]"></a>Load_SBit_Const_Metrics</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Load_SBit_Const_Metrics &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadLong
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Range
</UL>

<P><STRONG><a name="[74f]"></a>Load_SBit_Range_Codes</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Load_SBit_Range_Codes &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadLong
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetShort
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Range
</UL>

<P><STRONG><a name="[750]"></a>Load_SBit_Range</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Load_SBit_Range &rArr; Load_SBit_Range_Codes &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetLong
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetShort
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Range_Codes
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Const_Metrics
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_eblc
</UL>

<P><STRONG><a name="[204]"></a>tt_face_load_eblc</STRONG> (Thumb, 544 bytes, Stack size 56 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tt_face_load_eblc &rArr; Load_SBit_Range &rArr; Load_SBit_Range_Codes &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetLong
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Pos
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetShort
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Range
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[205]"></a>tt_face_free_eblc</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tt_face_free_eblc &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[207]"></a>tt_face_load_strike_metrics</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tt_face_load_strike_metrics
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[751]"></a>find_sbit_range</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = find_sbit_range
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Image
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_find_sbit_image
</UL>

<P><STRONG><a name="[1fb]"></a>tt_find_sbit_image</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tt_find_sbit_image &rArr; find_sbit_range
</UL>
<BR>[Calls]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_sbit_range
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_sbit_image
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[1fc]"></a>tt_load_sbit_metrics</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tt_load_sbit_metrics &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Image
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[752]"></a>crop_bitmap</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = crop_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_sbit_image
</UL>

<P><STRONG><a name="[753]"></a>Load_SBit_Single</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Load_SBit_Single &rArr; blit_sbit
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blit_sbit
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Image
</UL>

<P><STRONG><a name="[755]"></a>Load_SBit_Image</STRONG> (Thumb, 510 bytes, Stack size 104 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + In Cycle
<LI>Call Chain = Load_SBit_Image &rArr;  Load_SBit_Image (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_alloc_bitmap
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetChar
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Skip
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadShort
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetShort
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Image
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Single
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_load_sbit_metrics
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_sbit_range
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_sbit_image
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Image
</UL>

<P><STRONG><a name="[1fd]"></a>tt_face_load_sbit_image</STRONG> (Thumb, 220 bytes, Stack size 80 bytes, sfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tt_face_load_sbit_image &rArr; Load_SBit_Image &rArr;  Load_SBit_Image (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Pos
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SBit_Image
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crop_bitmap
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_find_sbit_image
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfnt.o(.constdata)
</UL>
<P><STRONG><a name="[767]"></a>gray_init_cells</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, smooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_raster_reset
</UL>

<P><STRONG><a name="[765]"></a>gray_compute_cbox</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gray_compute_cbox
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_convert_glyph
</UL>

<P><STRONG><a name="[757]"></a>gray_record_cell</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gray_record_cell
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_convert_glyph_inner
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_move_to
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_set_cell
</UL>

<P><STRONG><a name="[758]"></a>gray_set_cell</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gray_set_cell &rArr; gray_record_cell
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_record_cell
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_render_line
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_render_scanline
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_start_cell
</UL>

<P><STRONG><a name="[759]"></a>gray_start_cell</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gray_start_cell &rArr; gray_set_cell &rArr; gray_record_cell
</UL>
<BR>[Calls]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_set_cell
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_move_to
</UL>

<P><STRONG><a name="[75a]"></a>gray_render_scanline</STRONG> (Thumb, 354 bytes, Stack size 80 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gray_render_scanline &rArr; gray_set_cell &rArr; gray_record_cell
</UL>
<BR>[Calls]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_set_cell
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_render_line
</UL>

<P><STRONG><a name="[75b]"></a>gray_render_line</STRONG> (Thumb, 532 bytes, Stack size 96 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gray_render_line &rArr; gray_render_scanline &rArr; gray_set_cell &rArr; gray_record_cell
</UL>
<BR>[Calls]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_render_scanline
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_set_cell
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_line_to
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_render_cubic
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_render_conic
</UL>

<P><STRONG><a name="[75d]"></a>gray_split_conic</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gray_split_conic
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_render_conic
</UL>

<P><STRONG><a name="[75c]"></a>gray_render_conic</STRONG> (Thumb, 458 bytes, Stack size 56 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gray_render_conic &rArr; gray_render_line &rArr; gray_render_scanline &rArr; gray_set_cell &rArr; gray_record_cell
</UL>
<BR>[Calls]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_split_conic
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_render_line
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_conic_to
</UL>

<P><STRONG><a name="[75f]"></a>gray_split_cubic</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gray_split_cubic
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_render_cubic
</UL>

<P><STRONG><a name="[75e]"></a>gray_render_cubic</STRONG> (Thumb, 634 bytes, Stack size 72 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = gray_render_cubic &rArr; gray_render_line &rArr; gray_render_scanline &rArr; gray_set_cell &rArr; gray_record_cell
</UL>
<BR>[Calls]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_split_cubic
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_render_line
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_cubic_to
</UL>

<P><STRONG><a name="[766]"></a>gray_quick_sort</STRONG> (Thumb, 564 bytes, Stack size 212 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = gray_quick_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_convert_glyph
</UL>

<P><STRONG><a name="[214]"></a>gray_move_to</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gray_move_to &rArr; gray_start_cell &rArr; gray_set_cell &rArr; gray_record_cell
</UL>
<BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_start_cell
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_record_cell
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smooth.o(.constdata)
</UL>
<P><STRONG><a name="[215]"></a>gray_line_to</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = gray_line_to &rArr; gray_render_line &rArr; gray_render_scanline &rArr; gray_set_cell &rArr; gray_record_cell
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_render_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smooth.o(.constdata)
</UL>
<P><STRONG><a name="[216]"></a>gray_conic_to</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = gray_conic_to &rArr; gray_render_conic &rArr; gray_render_line &rArr; gray_render_scanline &rArr; gray_set_cell &rArr; gray_record_cell
</UL>
<BR>[Calls]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_render_conic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smooth.o(.constdata)
</UL>
<P><STRONG><a name="[217]"></a>gray_cubic_to</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = gray_cubic_to &rArr; gray_render_cubic &rArr; gray_render_line &rArr; gray_render_scanline &rArr; gray_set_cell &rArr; gray_record_cell
</UL>
<BR>[Calls]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_render_cubic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smooth.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>gray_render_span</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = gray_render_span
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smooth.o(.text)
</UL>
<P><STRONG><a name="[761]"></a>gray_hline</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gray_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_sweep
</UL>

<P><STRONG><a name="[760]"></a>gray_sweep</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gray_sweep &rArr; gray_hline
</UL>
<BR>[Calls]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_convert_glyph
</UL>

<P><STRONG><a name="[762]"></a>gray_convert_glyph_inner</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gray_convert_glyph_inner &rArr; FT_Outline_Decompose
</UL>
<BR>[Calls]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Decompose
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_record_cell
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_convert_glyph
</UL>

<P><STRONG><a name="[764]"></a>gray_convert_glyph</STRONG> (Thumb, 468 bytes, Stack size 376 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = gray_convert_glyph &rArr; gray_quick_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_convert_glyph_inner
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_sweep
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_quick_sort
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_compute_cbox
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_raster_render
</UL>

<P><STRONG><a name="[20b]"></a>gray_raster_render</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = gray_raster_render &rArr; gray_convert_glyph &rArr; gray_quick_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_convert_glyph
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smooth.o(.constdata)
</UL>
<P><STRONG><a name="[209]"></a>gray_raster_new</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gray_raster_new &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smooth.o(.constdata)
</UL>
<P><STRONG><a name="[20c]"></a>gray_raster_done</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gray_raster_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smooth.o(.constdata)
</UL>
<P><STRONG><a name="[20a]"></a>gray_raster_reset</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gray_raster_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gray_init_cells
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smooth.o(.constdata)
</UL>
<P><STRONG><a name="[20d]"></a>ft_smooth_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ft_smooth_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smooth.o(.constdata)
</UL>
<P><STRONG><a name="[211]"></a>ft_smooth_set_mode</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ft_smooth_set_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smooth.o(.constdata)
</UL>
<P><STRONG><a name="[20f]"></a>ft_smooth_transform</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ft_smooth_transform &rArr; FT_Outline_Transform &rArr; FT_Vector_Transform &rArr; FT_MulFix
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Translate
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Transform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smooth.o(.constdata)
</UL>
<P><STRONG><a name="[210]"></a>ft_smooth_get_cbox</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ft_smooth_get_cbox &rArr; FT_Outline_Get_CBox
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Get_CBox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smooth.o(.constdata)
</UL>
<P><STRONG><a name="[768]"></a>ft_smooth_render_generic</STRONG> (Thumb, 506 bytes, Stack size 136 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ft_smooth_render_generic &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Translate
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Get_CBox
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_smooth_render_lcd_v
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_smooth_render_lcd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_smooth_render
</UL>

<P><STRONG><a name="[20e]"></a>ft_smooth_render</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ft_smooth_render &rArr; ft_smooth_render_generic &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_smooth_render_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smooth.o(.constdata)
</UL>
<P><STRONG><a name="[212]"></a>ft_smooth_render_lcd</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ft_smooth_render_lcd &rArr; ft_smooth_render_generic &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_smooth_render_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smooth.o(.constdata)
</UL>
<P><STRONG><a name="[213]"></a>ft_smooth_render_lcd_v</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, smooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ft_smooth_render_lcd_v &rArr; ft_smooth_render_generic &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_smooth_render_generic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smooth.o(.constdata)
</UL>
<P><STRONG><a name="[221]"></a>tt_get_kerning</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tt_get_kerning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> truetype.o(.constdata)
</UL>
<P><STRONG><a name="[769]"></a>tt_size_reset</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tt_size_reset &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_size_request
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_size_select
</UL>

<P><STRONG><a name="[223]"></a>tt_size_select</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tt_size_select &rArr; tt_size_reset &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Select_Metrics
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_size_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_size_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> truetype.o(.constdata)
</UL>
<P><STRONG><a name="[222]"></a>tt_size_request</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tt_size_request &rArr; tt_size_select &rArr; tt_size_reset &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Request_Metrics
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_size_select
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_size_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> truetype.o(.constdata)
</UL>
<P><STRONG><a name="[76b]"></a>tt_face_get_device_metrics</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tt_face_get_device_metrics
</UL>
<BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_glyph_metrics
</UL>

<P><STRONG><a name="[76a]"></a>compute_glyph_metrics</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = compute_glyph_metrics &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Get_CBox
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_get_device_metrics
</UL>
<BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Load_Glyph
</UL>

<P><STRONG><a name="[76d]"></a>translate_array</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = translate_array
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Process_Composite_Component
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Hint_Glyph
</UL>

<P><STRONG><a name="[76c]"></a>TT_Hint_Glyph</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TT_Hint_Glyph &rArr; translate_array
</UL>
<BR>[Calls]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_array
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Process_Simple_Glyph
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Process_Composite_Glyph
</UL>

<P><STRONG><a name="[76f]"></a>tt_prepare_zone</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tt_prepare_zone
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Process_Simple_Glyph
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Process_Composite_Glyph
</UL>

<P><STRONG><a name="[76e]"></a>TT_Process_Composite_Glyph</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TT_Process_Composite_Glyph &rArr; FT_GlyphLoader_CheckPoints &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckPoints
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_prepare_zone
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Hint_Glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_truetype_glyph
</UL>

<P><STRONG><a name="[770]"></a>TT_Process_Composite_Component</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = TT_Process_Composite_Component &rArr; FT_Vector_Transform &rArr; FT_MulFix
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_SqrtFixed
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Transform
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_array
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_truetype_glyph
</UL>

<P><STRONG><a name="[772]"></a>TT_Process_Simple_Glyph</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TT_Process_Simple_Glyph &rArr; TT_Hint_Glyph &rArr; translate_array
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_prepare_zone
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Hint_Glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_truetype_glyph
</UL>

<P><STRONG><a name="[776]"></a>tt_face_get_location</STRONG> (Thumb, 208 bytes, Stack size 20 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tt_face_get_location
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_truetype_glyph
</UL>

<P><STRONG><a name="[775]"></a>Get_VMetrics</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Get_VMetrics
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_truetype_glyph
</UL>

<P><STRONG><a name="[774]"></a>Get_HMetrics</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Get_HMetrics
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_truetype_glyph
</UL>

<P><STRONG><a name="[773]"></a>load_truetype_glyph</STRONG> (Thumb, 894 bytes, Stack size 112 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + In Cycle
<LI>Call Chain = load_truetype_glyph &rArr;  load_truetype_glyph (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Add
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_truetype_glyph
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HMetrics
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_VMetrics
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_get_location
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Process_Simple_Glyph
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Process_Composite_Component
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Process_Composite_Glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Load_Glyph
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_truetype_glyph
</UL>

<P><STRONG><a name="[777]"></a>tt_loader_init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tt_loader_init &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Pos
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_Rewind
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Load_Glyph
</UL>

<P><STRONG><a name="[779]"></a>load_sbit_image</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = load_sbit_image
</UL>
<BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Load_Glyph
</UL>

<P><STRONG><a name="[778]"></a>TT_Load_Glyph</STRONG> (Thumb, 242 bytes, Stack size 216 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = TT_Load_Glyph &rArr; load_truetype_glyph &rArr;  load_truetype_glyph (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Translate
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_sbit_image
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_loader_init
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_truetype_glyph
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_glyph_metrics
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Glyph
</UL>

<P><STRONG><a name="[220]"></a>Load_Glyph</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = Load_Glyph &rArr; TT_Load_Glyph &rArr; load_truetype_glyph &rArr;  load_truetype_glyph (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Load_Glyph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> truetype.o(.constdata)
</UL>
<P><STRONG><a name="[21a]"></a>tt_get_interface</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tt_get_interface &rArr; FT_Get_Module
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_service_list_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> truetype.o(.constdata)
</UL>
<P><STRONG><a name="[77a]"></a>tt_face_load_loca</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tt_face_load_loca &rArr; FT_Stream_ExtractFrame &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExtractFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_init
</UL>

<P><STRONG><a name="[77b]"></a>tt_face_done_loca</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tt_face_done_loca &rArr; FT_Stream_ReleaseFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReleaseFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_done
</UL>

<P><STRONG><a name="[77e]"></a>tt_face_load_cvt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, truetype.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_init
</UL>

<P><STRONG><a name="[77f]"></a>tt_face_load_fpgm</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, truetype.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_init
</UL>

<P><STRONG><a name="[780]"></a>tt_face_load_prep</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, truetype.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_init
</UL>

<P><STRONG><a name="[77c]"></a>tt_face_load_hdmx</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tt_face_load_hdmx &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReleaseFrame
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExtractFrame
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_init
</UL>

<P><STRONG><a name="[77d]"></a>tt_face_free_hdmx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tt_face_free_hdmx &rArr; FT_Stream_ReleaseFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReleaseFrame
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_done
</UL>

<P><STRONG><a name="[c9]"></a>TT_Access_Glyph_Frame</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TT_Access_Glyph_Frame &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> truetype.o(.text)
</UL>
<P><STRONG><a name="[cd]"></a>TT_Forget_Glyph_Frame</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TT_Forget_Glyph_Frame &rArr; FT_Stream_ExitFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> truetype.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>TT_Load_Glyph_Header</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TT_Load_Glyph_Header &rArr; FT_Stream_GetShort
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetShort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> truetype.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>TT_Load_Simple_Glyph</STRONG> (Thumb, 756 bytes, Stack size 88 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TT_Load_Simple_Glyph &rArr; FT_GlyphLoader_CheckPoints &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetChar
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetShort
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckPoints
</UL>
<BR>[Address Reference Count : 1]<UL><LI> truetype.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>TT_Load_Composite_Glyph</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TT_Load_Composite_Glyph &rArr; FT_GlyphLoader_CheckSubGlyphs &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetChar
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetShort
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CheckSubGlyphs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> truetype.o(.text)
</UL>
<P><STRONG><a name="[781]"></a>TT_Init_Glyph_Loading</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, truetype.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_init
</UL>

<P><STRONG><a name="[21b]"></a>tt_face_init</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tt_face_init &rArr; tt_face_load_hdmx &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module_Interface
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TT_Init_Glyph_Loading
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_hdmx
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_prep
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_fpgm
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_cvt
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_load_loca
</UL>
<BR>[Address Reference Count : 1]<UL><LI> truetype.o(.constdata)
</UL>
<P><STRONG><a name="[21c]"></a>tt_face_done</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tt_face_done &rArr; tt_face_free_hdmx &rArr; FT_Stream_ReleaseFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReleaseFrame
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_free_hdmx
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tt_face_done_loca
</UL>
<BR>[Address Reference Count : 1]<UL><LI> truetype.o(.constdata)
</UL>
<P><STRONG><a name="[21d]"></a>tt_size_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tt_size_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> truetype.o(.constdata)
</UL>
<P><STRONG><a name="[21e]"></a>tt_size_done</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, truetype.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> truetype.o(.constdata)
</UL>
<P><STRONG><a name="[218]"></a>tt_driver_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, truetype.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> truetype.o(.constdata)
</UL>
<P><STRONG><a name="[219]"></a>tt_driver_done</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, truetype.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> truetype.o(.constdata)
</UL>
<P><STRONG><a name="[21f]"></a>tt_slot_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, truetype.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tt_slot_init &rArr; FT_GlyphLoader_CreateExtra &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_GlyphLoader_CreateExtra
</UL>
<BR>[Address Reference Count : 1]<UL><LI> truetype.o(.constdata)
</UL>
<P><STRONG><a name="[782]"></a>read_pfb_tag</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = read_pfb_tag &rArr; FT_Stream_ReadLongLE
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadLongLE
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadShort
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_Private_Dict
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_New_Parser
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_type1_format
</UL>

<P><STRONG><a name="[783]"></a>check_type1_format</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = check_type1_format &rArr; read_pfb_tag &rArr; FT_Stream_ReadLongLE
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pfb_tag
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_New_Parser
</UL>

<P><STRONG><a name="[784]"></a>T1_New_Parser</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = T1_New_Parser &rArr; check_type1_format &rArr; read_pfb_tag &rArr; FT_Stream_ReadLongLE
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Read
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Skip
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_type1_format
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pfb_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Open_Face
</UL>

<P><STRONG><a name="[785]"></a>T1_Finalize_Parser</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = T1_Finalize_Parser &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_done_loader
</UL>

<P><STRONG><a name="[786]"></a>T1_Get_Private_Dict</STRONG> (Thumb, 748 bytes, Stack size 56 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = T1_Get_Private_Dict &rArr; read_pfb_tag &rArr; FT_Stream_ReadLongLE
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Read
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Skip
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Pos
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isxdigit_helper
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_pfb_tag
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Open_Face
</UL>

<P><STRONG><a name="[789]"></a>t1_allocate_blend</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = t1_allocate_blend &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_weight_vector
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_blend_design_map
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_blend_design_positions
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_blend_axis_types
</UL>

<P><STRONG><a name="[22f]"></a>T1_Get_Multi_Master</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = T1_Get_Multi_Master
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_MM_Var
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[78a]"></a>mm_axis_unmap</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mm_axis_unmap &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_MM_Var
</UL>

<P><STRONG><a name="[78b]"></a>mm_weights_unmap</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mm_weights_unmap
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_MM_Var
</UL>

<P><STRONG><a name="[232]"></a>T1_Get_MM_Var</STRONG> (Thumb, 432 bytes, Stack size 104 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = T1_Get_MM_Var &rArr; mm_axis_unmap &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mm_weights_unmap
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mm_axis_unmap
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_Multi_Master
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[231]"></a>T1_Set_MM_Blend</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = T1_Set_MM_Blend &rArr; FT_MulFix
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Set_MM_Design
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[230]"></a>T1_Set_MM_Design</STRONG> (Thumb, 228 bytes, Stack size 128 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = T1_Set_MM_Design &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Set_MM_Blend
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Set_Var_Design
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[233]"></a>T1_Set_Var_Design</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = T1_Set_Var_Design &rArr; T1_Set_MM_Design &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_RoundFix
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Set_MM_Design
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[78c]"></a>T1_Done_Blend</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = T1_Done_Blend &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Face_Done
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Open_Face
</UL>

<P><STRONG><a name="[22a]"></a>parse_blend_axis_types</STRONG> (Thumb, 242 bytes, Stack size 96 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = parse_blend_axis_types &rArr; t1_allocate_blend &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_allocate_blend
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[228]"></a>parse_blend_design_positions</STRONG> (Thumb, 258 bytes, Stack size 448 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = parse_blend_design_positions &rArr; t1_allocate_blend &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_allocate_blend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[229]"></a>parse_blend_design_map</STRONG> (Thumb, 316 bytes, Stack size 360 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = parse_blend_design_map &rArr; t1_allocate_blend &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_allocate_blend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[22b]"></a>parse_weight_vector</STRONG> (Thumb, 210 bytes, Stack size 240 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = parse_weight_vector &rArr; t1_allocate_blend &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_allocate_blend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[790]"></a>t1_load_keyword</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = t1_load_keyword
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_dict
</UL>

<P><STRONG><a name="[78e]"></a>is_space</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, type1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_charstrings
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_encoding
</UL>

<P><STRONG><a name="[78d]"></a>read_binary_data</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_binary_data &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_dict
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_charstrings
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_subrs
</UL>

<P><STRONG><a name="[224]"></a>parse_font_matrix</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = parse_font_matrix &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[225]"></a>parse_encoding</STRONG> (Thumb, 588 bytes, Stack size 64 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = parse_encoding &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_space
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[226]"></a>parse_subrs</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = parse_subrs &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_binary_data
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[227]"></a>parse_charstrings</STRONG> (Thumb, 1034 bytes, Stack size 80 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = parse_charstrings &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_binary_data
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_space
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[78f]"></a>parse_dict</STRONG> (Thumb, 612 bytes, Stack size 72 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = parse_dict &rArr; t1_load_keyword
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_binary_data
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_load_keyword
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Open_Face
</UL>

<P><STRONG><a name="[791]"></a>t1_init_loader</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = t1_init_loader &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Open_Face
</UL>

<P><STRONG><a name="[792]"></a>t1_done_loader</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = t1_done_loader &rArr; T1_Finalize_Parser &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Finalize_Parser
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Open_Face
</UL>

<P><STRONG><a name="[793]"></a>T1_Open_Face</STRONG> (Thumb, 612 bytes, Stack size 464 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = T1_Open_Face &rArr; T1_New_Parser &rArr; check_type1_format &rArr; read_pfb_tag &rArr; FT_Stream_ReadLongLE
</UL>
<BR>[Calls]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_done_loader
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_init_loader
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_dict
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Done_Blend
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_Private_Dict
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_New_Parser
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Face_Init
</UL>

<P><STRONG><a name="[794]"></a>T1_Size_Get_Globals_Funcs</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = T1_Size_Get_Globals_Funcs &rArr; FT_Get_Module
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Size_Request
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Size_Init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Size_Done
</UL>

<P><STRONG><a name="[23e]"></a>T1_Size_Done</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = T1_Size_Done &rArr; T1_Size_Get_Globals_Funcs &rArr; FT_Get_Module
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Size_Get_Globals_Funcs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[23d]"></a>T1_Size_Init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = T1_Size_Init &rArr; T1_Size_Get_Globals_Funcs &rArr; FT_Get_Module
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Size_Get_Globals_Funcs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[244]"></a>T1_Size_Request</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = T1_Size_Request &rArr; FT_Request_Metrics &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Request_Metrics
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Size_Get_Globals_Funcs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[240]"></a>T1_GlyphSlot_Done</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, type1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[23f]"></a>T1_GlyphSlot_Init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = T1_GlyphSlot_Init &rArr; FT_Get_Module
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[795]"></a>T1_Done_Metrics</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = T1_Done_Metrics &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Face_Done
</UL>

<P><STRONG><a name="[23c]"></a>T1_Face_Done</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = T1_Face_Done &rArr; T1_Done_Blend &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Done_Metrics
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Done_Blend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[796]"></a>T1_Parse_Glyph_And_Get_Char_String</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = T1_Parse_Glyph_And_Get_Char_String
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Load_Glyph
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Parse_Glyph
</UL>

<P><STRONG><a name="[ce]"></a>T1_Parse_Glyph</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = T1_Parse_Glyph &rArr; T1_Parse_Glyph_And_Get_Char_String
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Parse_Glyph_And_Get_Char_String
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Compute_Max_Advance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.text)
</UL>
<P><STRONG><a name="[797]"></a>T1_Compute_Max_Advance</STRONG> (Thumb, 162 bytes, Stack size 1552 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = T1_Compute_Max_Advance &rArr; T1_Parse_Glyph &rArr; T1_Parse_Glyph_And_Get_Char_String
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Parse_Glyph
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Face_Init
</UL>

<P><STRONG><a name="[23b]"></a>T1_Face_Init</STRONG> (Thumb, 696 bytes, Stack size 72 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = T1_Face_Init &rArr; T1_Compute_Max_Advance &rArr; T1_Parse_Glyph &rArr; T1_Parse_Glyph_And_Get_Char_String
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_module_get_service
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module_Interface
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_CMap_New
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Compute_Max_Advance
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Open_Face
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[238]"></a>T1_Driver_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, type1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[239]"></a>T1_Driver_Done</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, type1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[22c]"></a>t1_get_glyph_name</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = t1_get_glyph_name &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[22d]"></a>t1_get_name_index</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = t1_get_name_index
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[22e]"></a>t1_get_ps_name</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, type1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[234]"></a>t1_ps_get_font_info</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = t1_ps_get_font_info &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[235]"></a>t1_ps_has_glyph_names</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, type1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[236]"></a>t1_ps_get_font_private</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = t1_ps_get_font_private &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[23a]"></a>Get_Interface</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_Interface &rArr; ft_service_list_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_service_list_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[798]"></a>T1_Get_Kerning</STRONG> (Thumb, 120 bytes, Stack size 28 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = T1_Get_Kerning
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Kerning
</UL>

<P><STRONG><a name="[242]"></a>Get_Kerning</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Get_Kerning &rArr; T1_Get_Kerning
</UL>
<BR>[Calls]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Get_Kerning
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[241]"></a>T1_Load_Glyph</STRONG> (Thumb, 598 bytes, Stack size 1640 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = T1_Load_Glyph &rArr; FT_Outline_Transform &rArr; FT_Vector_Transform &rArr; FT_MulFix
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_synthesize_vertical_metrics
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Transform
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Translate
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Transform
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Get_CBox
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Parse_Glyph_And_Get_Char_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>t1_get_index</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = t1_get_index &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>compare_kern_pairs</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = compare_kern_pairs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.text)
</UL>
<P><STRONG><a name="[799]"></a>T1_Read_PFM</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = T1_Read_PFM &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Set_Charmap
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Char_Index
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Read_Metrics
</UL>

<P><STRONG><a name="[243]"></a>T1_Read_Metrics</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = T1_Read_Metrics &rArr; T1_Read_PFM &rArr; qsort &rArr; _partition_sort
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_Read_PFM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[237]"></a>T1_Get_Track_Kerning</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, type1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = T1_Get_Track_Kerning &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1.o(.constdata)
</UL>
<P><STRONG><a name="[79a]"></a>cid_parser_new</STRONG> (Thumb, 466 bytes, Stack size 344 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = cid_parser_new &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Read
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReleaseFrame
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Pos
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExtractFrame
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_face_open
</UL>

<P><STRONG><a name="[79c]"></a>cid_parser_done</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cid_parser_done &rArr; FT_Stream_ReleaseFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReleaseFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_done_loader
</UL>

<P><STRONG><a name="[7a0]"></a>cid_get_offset</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cid_get_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_load_glyph
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_read_subrs
</UL>

<P><STRONG><a name="[79e]"></a>cid_load_keyword</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cid_load_keyword
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parse_dict
</UL>

<P><STRONG><a name="[246]"></a>parse_font_matrix</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = parse_font_matrix &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1cid.o(.constdata)
</UL>
<P><STRONG><a name="[245]"></a>parse_fd_array</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = parse_fd_array &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1cid.o(.constdata)
</UL>
<P><STRONG><a name="[79d]"></a>cid_parse_dict</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cid_parse_dict &rArr; cid_load_keyword
</UL>
<BR>[Calls]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_load_keyword
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_face_open
</UL>

<P><STRONG><a name="[79f]"></a>cid_read_subrs</STRONG> (Thumb, 612 bytes, Stack size 80 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = cid_read_subrs &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Read
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_get_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_face_open
</UL>

<P><STRONG><a name="[7a1]"></a>t1_init_loader</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = t1_init_loader &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_face_open
</UL>

<P><STRONG><a name="[7a2]"></a>t1_done_loader</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = t1_done_loader &rArr; cid_parser_done &rArr; FT_Stream_ReleaseFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parser_done
</UL>
<BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_face_open
</UL>

<P><STRONG><a name="[7a3]"></a>cid_hex_to_binary</STRONG> (Thumb, 354 bytes, Stack size 336 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = cid_hex_to_binary &rArr; FT_Stream_Read &rArr; FT_Stream_ReadAt
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Read
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Pos
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_face_open
</UL>

<P><STRONG><a name="[7a4]"></a>cid_face_open</STRONG> (Thumb, 206 bytes, Stack size 128 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = cid_face_open &rArr; cid_parser_new &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_OpenMemory
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_hex_to_binary
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_done_loader
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t1_init_loader
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_read_subrs
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parse_dict
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_parser_new
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_face_init
</UL>

<P><STRONG><a name="[251]"></a>cid_slot_done</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, type1cid.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> type1cid.o(.constdata)
</UL>
<P><STRONG><a name="[250]"></a>cid_slot_init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cid_slot_init &rArr; FT_Get_Module
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1cid.o(.constdata)
</UL>
<P><STRONG><a name="[7a5]"></a>cid_size_get_globals_funcs</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cid_size_get_globals_funcs &rArr; FT_Get_Module
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_size_request
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_size_init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_size_done
</UL>

<P><STRONG><a name="[24f]"></a>cid_size_done</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cid_size_done &rArr; cid_size_get_globals_funcs &rArr; FT_Get_Module
</UL>
<BR>[Calls]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_size_get_globals_funcs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1cid.o(.constdata)
</UL>
<P><STRONG><a name="[24e]"></a>cid_size_init</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cid_size_init &rArr; cid_size_get_globals_funcs &rArr; FT_Get_Module
</UL>
<BR>[Calls]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_size_get_globals_funcs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1cid.o(.constdata)
</UL>
<P><STRONG><a name="[253]"></a>cid_size_request</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cid_size_request &rArr; FT_Request_Metrics &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Request_Metrics
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_size_get_globals_funcs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1cid.o(.constdata)
</UL>
<P><STRONG><a name="[24d]"></a>cid_face_done</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cid_face_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1cid.o(.constdata)
</UL>
<P><STRONG><a name="[24c]"></a>cid_face_init</STRONG> (Thumb, 516 bytes, Stack size 56 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = cid_face_init &rArr; cid_face_open &rArr; cid_parser_new &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module_Interface
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_face_open
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1cid.o(.constdata)
</UL>
<P><STRONG><a name="[249]"></a>cid_driver_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, type1cid.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> type1cid.o(.constdata)
</UL>
<P><STRONG><a name="[24a]"></a>cid_driver_done</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, type1cid.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> type1cid.o(.constdata)
</UL>
<P><STRONG><a name="[247]"></a>cid_get_postscript_name</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, type1cid.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> type1cid.o(.constdata)
</UL>
<P><STRONG><a name="[248]"></a>cid_ps_get_font_info</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cid_ps_get_font_info &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1cid.o(.constdata)
</UL>
<P><STRONG><a name="[24b]"></a>cid_get_interface</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cid_get_interface &rArr; ft_service_list_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_service_list_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1cid.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>cid_load_glyph</STRONG> (Thumb, 376 bytes, Stack size 72 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cid_load_glyph &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadAt
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_get_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_slot_load_glyph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1cid.o(.text)
</UL>
<P><STRONG><a name="[252]"></a>cid_slot_load_glyph</STRONG> (Thumb, 544 bytes, Stack size 1632 bytes, type1cid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = cid_slot_load_glyph &rArr; cid_load_glyph &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_synthesize_vertical_metrics
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Vector_Transform
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Translate
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Transform
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Outline_Get_CBox
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulFix
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cid_load_glyph
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type1cid.o(.constdata)
</UL>
<P><STRONG><a name="[7a6]"></a>t42_parser_done</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = t42_parser_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_loader_done
</UL>

<P><STRONG><a name="[7a7]"></a>t42_loader_done</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = t42_loader_done &rArr; t42_parser_done &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parser_done
</UL>
<BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Open_Face
</UL>

<P><STRONG><a name="[7a9]"></a>t42_load_keyword</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = t42_load_keyword
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parse_dict
</UL>

<P><STRONG><a name="[7a8]"></a>t42_parse_dict</STRONG> (Thumb, 374 bytes, Stack size 72 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = t42_parse_dict &rArr; t42_load_keyword
</UL>
<BR>[Calls]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_load_keyword
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Open_Face
</UL>

<P><STRONG><a name="[7aa]"></a>t42_parser_init</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = t42_parser_init &rArr; FT_Stream_Read &rArr; FT_Stream_ReadAt
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Read
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Skip
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Open_Face
</UL>

<P><STRONG><a name="[7ab]"></a>t42_loader_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = t42_loader_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Open_Face
</UL>

<P><STRONG><a name="[7ac]"></a>T42_Open_Face</STRONG> (Thumb, 336 bytes, Stack size 360 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = T42_Open_Face &rArr; t42_parse_dict &rArr; t42_load_keyword
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_loader_init
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parser_init
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parse_dict
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_loader_done
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Face_Init
</UL>

<P><STRONG><a name="[261]"></a>T42_Face_Init</STRONG> (Thumb, 744 bytes, Stack size 96 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = T42_Face_Init &rArr; T42_Open_Face &rArr; t42_parse_dict &rArr; t42_load_keyword
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Size
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Open_Face
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_module_get_service
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module_Interface
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_CMap_New
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_Open_Face
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[262]"></a>T42_Face_Done</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = T42_Face_Done &rArr; FT_Done_Face &rArr; destroy_face &rArr; FT_Done_GlyphSlot &rArr; ft_glyphslot_done &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Face
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[25e]"></a>T42_Driver_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = T42_Driver_Init &rArr; FT_Get_Module
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Get_Module
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[25f]"></a>T42_Driver_Done</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, type42.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[263]"></a>T42_Size_Init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = T42_Size_Init &rArr; FT_New_Size &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Activate_Size
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_Size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[268]"></a>T42_Size_Request</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = T42_Size_Request &rArr; FT_Request_Size &rArr; FT_Request_Metrics &rArr; FT_MulDiv &rArr; ft_multo64
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Activate_Size
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Request_Size
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[269]"></a>T42_Size_Select</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = T42_Size_Select &rArr; FT_Select_Size &rArr; FT_Select_Metrics &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Activate_Size
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Select_Size
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[264]"></a>T42_Size_Done</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = T42_Size_Done &rArr; FT_Done_Size &rArr; destroy_size &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_Size
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_List_Find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[265]"></a>T42_GlyphSlot_Init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = T42_GlyphSlot_Init &rArr; FT_New_GlyphSlot &rArr; ft_glyphslot_init &rArr; FT_GlyphLoader_New &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_New_GlyphSlot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[266]"></a>T42_GlyphSlot_Done</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = T42_GlyphSlot_Done &rArr; FT_Done_GlyphSlot &rArr; ft_glyphslot_done &rArr; FT_GlyphLoader_Done &rArr; FT_GlyphLoader_Reset &rArr; FT_GlyphLoader_Rewind &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Done_GlyphSlot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[7ad]"></a>t42_glyphslot_clear</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = t42_glyphslot_clear &rArr; ft_glyphslot_free_bitmap &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_glyphslot_free_bitmap
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T42_GlyphSlot_Load
</UL>

<P><STRONG><a name="[267]"></a>T42_GlyphSlot_Load</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = T42_GlyphSlot_Load &rArr; t42_glyphslot_clear &rArr; ft_glyphslot_free_bitmap &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_glyphslot_clear
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[7ae]"></a>t42_is_space</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, type42.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parse_charstrings
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_parse_encoding
</UL>

<P><STRONG><a name="[254]"></a>t42_parse_font_matrix</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = t42_parse_font_matrix &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_DivFix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[255]"></a>t42_parse_encoding</STRONG> (Thumb, 596 bytes, Stack size 64 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = t42_parse_encoding &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_is_space
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[257]"></a>t42_parse_sfnts</STRONG> (Thumb, 672 bytes, Stack size 88 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = t42_parse_sfnts &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[256]"></a>t42_parse_charstrings</STRONG> (Thumb, 894 bytes, Stack size 72 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = t42_parse_charstrings &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t42_is_space
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[258]"></a>t42_get_glyph_name</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = t42_get_glyph_name &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[259]"></a>t42_get_name_index</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = t42_get_name_index &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[25a]"></a>t42_get_ps_font_name</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, type42.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[25b]"></a>t42_ps_get_font_info</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = t42_ps_get_font_info &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[25c]"></a>t42_ps_has_glyph_names</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, type42.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[25d]"></a>t42_ps_get_font_private</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = t42_ps_get_font_private &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[260]"></a>T42_Get_Interface</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, type42.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = T42_Get_Interface &rArr; ft_service_list_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_service_list_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> type42.o(.constdata)
</UL>
<P><STRONG><a name="[7af]"></a>fnt_font_done</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, winfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fnt_font_done &rArr; FT_Stream_ReleaseFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReleaseFrame
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNT_Face_Done
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_face_get_dll_font
</UL>

<P><STRONG><a name="[7b0]"></a>fnt_font_load</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, winfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fnt_font_load &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExtractFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNT_Face_Init
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_face_get_dll_font
</UL>

<P><STRONG><a name="[7b1]"></a>fnt_face_get_dll_font</STRONG> (Thumb, 444 bytes, Stack size 64 bytes, winfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fnt_face_get_dll_font &rArr; fnt_font_load &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_GetShortLE
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ReadFields
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Pos
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_ExitFrame
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_EnterFrame
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Stream_Seek
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_font_load
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_font_done
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNT_Face_Init
</UL>

<P><STRONG><a name="[26a]"></a>fnt_cmap_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, winfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fnt_cmap_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winfnt.o(.constdata)
</UL>
<P><STRONG><a name="[26b]"></a>fnt_cmap_char_index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, winfnt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> winfnt.o(.constdata)
</UL>
<P><STRONG><a name="[26c]"></a>fnt_cmap_char_next</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, winfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fnt_cmap_char_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winfnt.o(.constdata)
</UL>
<P><STRONG><a name="[270]"></a>FNT_Face_Done</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, winfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FNT_Face_Done &rArr; fnt_font_done &rArr; FT_Stream_ReleaseFrame &rArr; ft_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_free
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_font_done
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNT_Face_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winfnt.o(.constdata)
</UL>
<P><STRONG><a name="[26f]"></a>FNT_Face_Init</STRONG> (Thumb, 616 bytes, Stack size 72 bytes, winfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = FNT_Face_Init &rArr; fnt_face_get_dll_font &rArr; fnt_font_load &rArr; FT_Stream_ReadFields &rArr; FT_Stream_EnterFrame &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_CMap_New
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_alloc
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_MulDiv
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNT_Face_Done
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_face_get_dll_font
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnt_font_load
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winfnt.o(.constdata)
</UL>
<P><STRONG><a name="[273]"></a>FNT_Size_Select</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, winfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = FNT_Size_Select &rArr; FT_Select_Metrics &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT_Select_Metrics
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNT_Size_Request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winfnt.o(.constdata)
</UL>
<P><STRONG><a name="[272]"></a>FNT_Size_Request</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, winfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = FNT_Size_Request &rArr; FNT_Size_Select &rArr; FT_Select_Metrics &rArr; FT_DivFix &rArr; FT_Add64
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FNT_Size_Select
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winfnt.o(.constdata)
</UL>
<P><STRONG><a name="[271]"></a>FNT_Load_Glyph</STRONG> (Thumb, 398 bytes, Stack size 88 bytes, winfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = FNT_Load_Glyph &rArr; ft_mem_realloc &rArr; ft_mem_qrealloc &rArr; ft_mem_alloc &rArr; ft_mem_qalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_synthesize_vertical_metrics
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_mem_realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winfnt.o(.constdata)
</UL>
<P><STRONG><a name="[26d]"></a>winfnt_get_header</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, winfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = winfnt_get_header &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winfnt.o(.constdata)
</UL>
<P><STRONG><a name="[26e]"></a>winfnt_get_service</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, winfnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = winfnt_get_service &rArr; ft_service_list_lookup
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft_service_list_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> winfnt.o(.constdata)
</UL>
<P><STRONG><a name="[815]"></a>_DrawCharAA8_NoTrans</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, guiaa_char8.o(i._DrawCharAA8_NoTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = _DrawCharAA8_NoTrans &rArr; GL_DrawBitmap &rArr; GUI_SetDrawMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableUncached
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AA_MixColors256
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA__DrawCharAA8
</UL>

<P><STRONG><a name="[816]"></a>_DrawCharAA8_Trans</STRONG> (Thumb, 186 bytes, Stack size 88 bytes, guiaa_char8.o(i._DrawCharAA8_Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = _DrawCharAA8_Trans &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_Trans
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetSize
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA__DrawCharAA8
</UL>

<P><STRONG><a name="[81b]"></a>_AddFreeMemory</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, gui_alloc.o(i._AddFreeMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _AddFreeMemory &rArr; _RemoveFreeBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteTagData
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[818]"></a>_Alloc</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, gui_alloc.o(i._Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteTagData
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PushFreeBlock
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PopFreeBlock
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinIndex
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
</UL>

<P><STRONG><a name="[98c]"></a>_EnlargeBlocks</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, gui_alloc.o(i._EnlargeBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PopFreeBlock
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>

<P><STRONG><a name="[967]"></a>_GetMinIndex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_alloc.o(i._GetMinIndex))
<BR><BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>

<P><STRONG><a name="[81d]"></a>_InitOnce</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, gui_alloc.o(i._InitOnce))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TestRAM
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[f4]"></a>_OnExit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gui_alloc.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit &rArr; GUI__memset
</UL>
<BR>[Calls]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_alloc.o(i._InitOnce)
</UL>
<P><STRONG><a name="[969]"></a>_PopFreeBlock</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gui_alloc.o(i._PopFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = _PopFreeBlock &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[81c]"></a>_PushFreeBlock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gui_alloc.o(i._PushFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _PushFreeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[81f]"></a>_RemoveFreeBlock</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gui_alloc.o(i._RemoveFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RemoveFreeBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>

<P><STRONG><a name="[81e]"></a>_RemoveHoles</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, gui_alloc.o(i._RemoveHoles))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _RemoveHoles &rArr; _AddFreeMemory &rArr; _RemoveFreeBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[999]"></a>_TestRAM</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, gui_alloc.o(i._TestRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _TestRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>

<P><STRONG><a name="[968]"></a>_WriteTagData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_alloc.o(i._WriteTagData))
<BR><BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>

<P><STRONG><a name="[86d]"></a>_InitContext</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, gui_core.o(i._InitContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _InitContext
</UL>
<BR>[Calls]<UL><LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[dc]"></a>_OnExit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gui_core.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit &rArr; GUI__memset
</UL>
<BR>[Calls]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(i.GUI__Config)
</UL>
<P><STRONG><a name="[836]"></a>_UnlinkDevice</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gui_device.o(i._UnlinkDevice))
<BR><BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_UnlinkTaskDevices
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Unlink
</UL>

<P><STRONG><a name="[848]"></a>_SetRotation</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gui_dispstringinrectex.o(i._SetRotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = _SetRotation &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
</UL>

<P><STRONG><a name="[8ad]"></a>_Log2Phys</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_touch_driveranalog.o(i._Log2Phys))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Log2Phys
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Calibrate
</UL>

<P><STRONG><a name="[8ae]"></a>_SetMinMax</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gui_touch_driveranalog.o(i._SetMinMax))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Calibrate
</UL>

<P><STRONG><a name="[8b1]"></a>_StoreUnstable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gui_touch_driveranalog.o(i._StoreUnstable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _StoreUnstable &rArr; GUI_TOUCH_StoreUnstable &rArr; GUI_TOUCH_StoreState &rArr; GUI_TOUCH_StoreStateEx &rArr; GUI_PID_StoreState &rArr; _StoreState
</UL>
<BR>[Calls]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreUnstable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[278]"></a>_Color2IndexBulk</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, guicc_m565.o(i._Color2IndexBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[275]"></a>_Color2Index_M565</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, guicc_m565.o(i._Color2Index_M565))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Color2Index_M565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[277]"></a>_GetIndexMask_M565</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_m565.o(i._GetIndexMask_M565))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[279]"></a>_Index2ColorBulk</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, guicc_m565.o(i._Index2ColorBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.constdata)
</UL>
<P><STRONG><a name="[27b]"></a>_SetBkColor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(i._SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetBkColor
</UL>
<BR>[Calls]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[27a]"></a>_SetColor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(i._SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetColor
</UL>
<BR>[Calls]<UL><LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[27c]"></a>_SetDrawMode</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lcd.o(i._SetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _SetDrawMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.constdata)
</UL>
<P><STRONG><a name="[8cb]"></a>_GetDevProp</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i._GetDevProp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVYSizeEx
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeEx
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMaxValue
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
</UL>

<P><STRONG><a name="[8d3]"></a>_GetMaxValue</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getex.o(i._GetMaxValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _GetMaxValue &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
</UL>

<P><STRONG><a name="[979]"></a>_DrawBitLine1BPP</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, guidev_16.o(i._DrawBitLine1BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawBitLine1BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[97a]"></a>_DrawBitLine2BPP</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, guidev_16.o(i._DrawBitLine2BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawBitLine2BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[97b]"></a>_DrawBitLine4BPP</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, guidev_16.o(i._DrawBitLine4BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DrawBitLine4BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[281]"></a>_DrawBitmap</STRONG> (Thumb, 714 bytes, Stack size 112 bytes, guidev_16.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _DrawBitmap &rArr; _DrawBitLine2BPP
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine4BPP
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine2BPP
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[282]"></a>_DrawHLine</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, guidev_16.o(i._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _DrawHLine &rArr; _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[283]"></a>_DrawVLine</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, guidev_16.o(i._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawVLine &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[284]"></a>_FillRect</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, guidev_16.o(i._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset16
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[28b]"></a>_GetDevData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_16.o(i._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[289]"></a>_GetDevFunc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_16.o(i._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[28a]"></a>_GetDevProp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_16.o(i._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[285]"></a>_GetPixelIndex</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, guidev_16.o(i._GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetPixelIndex &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[28c]"></a>_GetRect</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, guidev_16.o(i._GetRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetRect
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[288]"></a>_SetOrg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_16.o(i._SetOrg))
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[286]"></a>_SetPixelIndex</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, guidev_16.o(i._SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _SetPixelIndex &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[978]"></a>_XY2PTR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guidev_16.o(i._XY2PTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[287]"></a>_XorPixel</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, guidev_16.o(i._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _XorPixel &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_16.o(.constdata)
</UL>
<P><STRONG><a name="[8]"></a>_Create</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, button_skin.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _Create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_skin.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>_Paint</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, button_skin.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; WM_GetWindowSizeY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_skin.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>_Create</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, checkbox_skin.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Create
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> checkbox_skin.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>_Paint</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, checkbox_skin.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; WM_GetWindowSizeY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> checkbox_skin.o(.data)
</UL>
<P><STRONG><a name="[7d6]"></a>_DrawBackground</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, checkbox_skinflex.o(i._DrawBackground))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = _DrawBackground &rArr; GUI_DrawGradientV &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_GetSkinFlexButtonSize
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_DrawSkinFlex
</UL>

<P><STRONG><a name="[7d7]"></a>_DrawBitmap</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, checkbox_skinflex.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = _DrawBitmap &rArr; _GenCheck &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ErrorOut1
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_GetSkinFlexButtonSize
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GenCheck
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_DrawSkinFlex
</UL>

<P><STRONG><a name="[7da]"></a>_DrawFocus</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, checkbox_skinflex.o(i._DrawFocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = _DrawFocus &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYSizeOfFont
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_GetSkinFlexButtonSize
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHECKBOX_DrawSkinFlex
</UL>

<P><STRONG><a name="[97c]"></a>_GenCheck</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, checkbox_skinflex.o(i._GenCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _GenCheck &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBitmapPixel_1bpp
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[993]"></a>_SetBitmapPixel_1bpp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, checkbox_skinflex.o(i._SetBitmapPixel_1bpp))
<BR><BR>[Called By]<UL><LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GenCheck
</UL>

<P><STRONG><a name="[c]"></a>_Create</STRONG> (Thumb, 40 bytes, Stack size 56 bytes, dropdown_skin.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Create
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dropdown_skin.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>_Paint</STRONG> (Thumb, 106 bytes, Stack size 80 bytes, dropdown_skin.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DROPDOWN__GetpItemLocked
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dropdown_skin.o(.data)
</UL>
<P><STRONG><a name="[7dd]"></a>_DrawBackground</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, dropdown_skinflex.o(i._DrawBackground))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = _DrawBackground &rArr; GUI__DrawTwinArc4 &rArr; _DrawTwinArc4 &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DROPDOWN_DrawSkinFlex
</UL>

<P><STRONG><a name="[7de]"></a>_DrawText</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, dropdown_skinflex.o(i._DrawText))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = _DrawText &rArr; GUI_DispStringInRect &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DROPDOWN_DrawSkinFlex
</UL>

<P><STRONG><a name="[10]"></a>_Create</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, framewin_skin.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Create
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewin_skin.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>_GetBorderSize</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, framewin_skin.o(i._GetBorderSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _GetBorderSize
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewin_skin.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>_Paint</STRONG> (Thumb, 240 bytes, Stack size 136 bytes, framewin_skin.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; FRAMEWIN__GetTitleLimits &rArr; WM_GetNextSibling &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__GetTitleLimits
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcTitleHeight
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewin_skin.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>_Create</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, header_skin.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Create
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> header_skin.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>_Paint</STRONG> (Thumb, 272 bytes, Stack size 144 bytes, header_skin.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; WIDGET__GetClientRect &rArr; WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetClientRect
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> header_skin.o(.data)
</UL>
<P><STRONG><a name="[8c8]"></a>_DrawArrow</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, header_skinflex.o(i._DrawArrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = _DrawArrow &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetArrowPara
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEADER_DrawSkinFlex
</UL>

<P><STRONG><a name="[8c5]"></a>_DrawBackground</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, header_skinflex.o(i._DrawBackground))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = _DrawBackground &rArr; GUI_DrawGradientV &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEADER_DrawSkinFlex
</UL>

<P><STRONG><a name="[8c6]"></a>_DrawBitmap</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, header_skinflex.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _DrawBitmap &rArr; GUI_ARRAY_GetpItemLocked &rArr; GUI_ARRAY__GetpItemLocked &rArr; GUI_ARRAY__GethItem
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetYSize
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetXSize
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEADER_DrawSkinFlex
</UL>

<P><STRONG><a name="[8c9]"></a>_DrawOverlap</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, header_skinflex.o(i._DrawOverlap))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = _DrawOverlap &rArr; GUI_DrawGradientV &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEADER_DrawSkinFlex
</UL>

<P><STRONG><a name="[8c7]"></a>_DrawText</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, header_skinflex.o(i._DrawText))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = _DrawText &rArr; GUI_DispStringInRect &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetArrowPara
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEADER_DrawSkinFlex
</UL>

<P><STRONG><a name="[974]"></a>_GetArrowPara</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, header_skinflex.o(i._GetArrowPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetArrowPara
</UL>
<BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawText
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArrow
</UL>

<P><STRONG><a name="[14]"></a>_Create</STRONG> (Thumb, 50 bytes, Stack size 56 bytes, menu_skin.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _Create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_skin.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>_Paint</STRONG> (Thumb, 314 bytes, Stack size 136 bytes, menu_skin.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; GUI_SetTextMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_skin.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>_Create</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, multipage_skin.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _Create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multipage_skin.o(.data)
</UL>
<P><STRONG><a name="[8f0]"></a>_IsBetween</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, multipage_skin.o(i._IsBetween))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_SKIN__GetTouchedPage
</UL>

<P><STRONG><a name="[15]"></a>_Paint</STRONG> (Thumb, 1624 bytes, Stack size 224 bytes, multipage_skin.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; MULTIPAGE__GetItemRect &rArr; _GetItemWidth &rArr; MULTIPAGE__GetPagePos &rArr; MULTIPAGE__GetPageWidth &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPagePos
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetItemRect
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__CalcBorderRect
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_IsPageEnabled
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetYSize
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetXSize
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multipage_skin.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>_Create</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, progbar_skin.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Create
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progbar_skin.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>_Paint</STRONG> (Thumb, 320 bytes, Stack size 104 bytes, progbar_skin.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; PROGBAR__GetTextRect &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR__Value2Pos
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR__GetTextRect
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR__GetTextLocked
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progbar_skin.o(.data)
</UL>
<P><STRONG><a name="[8f7]"></a>_DrawBackground</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, progbar_skinflex.o(i._DrawBackground))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = _DrawBackground &rArr; GUI_DrawGradientH &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR_DrawSkinFlex
</UL>

<P><STRONG><a name="[1a]"></a>_Create</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, radio_skin.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Create
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio_skin.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>_Paint</STRONG> (Thumb, 452 bytes, Stack size 160 bytes, radio_skin.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO__GetButtonSize
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontInfo
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio_skin.o(.data)
</UL>
<P><STRONG><a name="[ee]"></a>_CalcPositions</STRONG> (Thumb, 334 bytes, Stack size 96 bytes, scrollbar_skin.o(i._CalcPositions))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = _CalcPositions &rArr; WM_GetScrollbarV &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarV
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarH
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR__Rect2VRect
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DivideRound32
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skin.o(i._Create)
</UL>
<P><STRONG><a name="[1c]"></a>_Create</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, scrollbar_skin.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Create
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skin.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>_Paint</STRONG> (Thumb, 186 bytes, Stack size 120 bytes, scrollbar_skin.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; _CalcPositions &rArr; WM_GetScrollbarV &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetClientRect
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcPositions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skin.o(.data)
</UL>
<P><STRONG><a name="[e8]"></a>_DrawBackgroundH</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, scrollbar_skinflex.o(i._DrawBackgroundH))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = _DrawBackgroundH &rArr; GUI_DrawGradientV &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
</UL>
<P><STRONG><a name="[e5]"></a>_DrawBackgroundV</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, scrollbar_skinflex.o(i._DrawBackgroundV))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = _DrawBackgroundV &rArr; GUI_DrawGradientH &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
</UL>
<P><STRONG><a name="[975]"></a>_DrawFrame</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, scrollbar_skinflex.o(i._DrawFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = _DrawFrame &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackgroundV
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBackgroundH
</UL>

<P><STRONG><a name="[ea]"></a>_DrawGraspH</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, scrollbar_skinflex.o(i._DrawGraspH))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = _DrawGraspH &rArr; GUI_DrawVLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
</UL>
<P><STRONG><a name="[e7]"></a>_DrawGraspV</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, scrollbar_skinflex.o(i._DrawGraspV))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = _DrawGraspV &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skinflex.o(i.SCROLLBAR_DrawSkinFlex)
</UL>
<P><STRONG><a name="[8fb]"></a>_GetArrowPara</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, scrollbar_skinflex.o(i._GetArrowPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetArrowPara
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR_DrawSkinFlex
</UL>

<P><STRONG><a name="[99e]"></a>_CopyItemInfo2Rect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, slider_skin.o(i._CopyItemInfo2Rect))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[1e]"></a>_Create</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, slider_skin.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Create
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider_skin.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>_Paint</STRONG> (Thumb, 422 bytes, Stack size 128 bytes, slider_skin.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; WM_GetClientRectEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyItemInfo2Rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider_skin.o(.data)
</UL>
<P><STRONG><a name="[8fe]"></a>_DrawShaftH</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, slider_skinflex.o(i._DrawShaftH))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = _DrawShaftH &rArr; GUI_FillRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLIDER_DrawSkinFlex
</UL>

<P><STRONG><a name="[8fd]"></a>_DrawShaftV</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, slider_skinflex.o(i._DrawShaftV))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = _DrawShaftV &rArr; GUI_FillRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLIDER_DrawSkinFlex
</UL>

<P><STRONG><a name="[900]"></a>_DrawThumbH</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, slider_skinflex.o(i._DrawThumbH))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = _DrawThumbH &rArr; GUI_DrawGradientV &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLIDER_DrawSkinFlex
</UL>

<P><STRONG><a name="[8ff]"></a>_DrawThumbV</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, slider_skinflex.o(i._DrawThumbV))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = _DrawThumbV &rArr; GUI_DrawGradientH &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLIDER_DrawSkinFlex
</UL>

<P><STRONG><a name="[20]"></a>_Create</STRONG> (Thumb, 50 bytes, Stack size 56 bytes, spinbox_skin.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _Create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spinbox_skin.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>_Paint</STRONG> (Thumb, 278 bytes, Stack size 112 bytes, spinbox_skin.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; WM_GetWindowSizeY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HasFocus
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__GetButtonRectEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spinbox_skin.o(.data)
</UL>
<P><STRONG><a name="[906]"></a>_DrawArrow</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, spinbox_skinflex.o(i._DrawArrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = _DrawArrow &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX_DrawSkinFlex
</UL>

<P><STRONG><a name="[905]"></a>_DrawButton</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, spinbox_skinflex.o(i._DrawButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = _DrawButton &rArr; GUI_DrawGradientV &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX_DrawSkinFlex
</UL>

<P><STRONG><a name="[903]"></a>_DrawFrame</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, spinbox_skinflex.o(i._DrawFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = _DrawFrame &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX_DrawSkinFlex
</UL>

<P><STRONG><a name="[8be]"></a>_DrawTwinArc2</STRONG> (Thumb, 262 bytes, Stack size 88 bytes, gui__drawtwinarc.o(i._DrawTwinArc2))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = _DrawTwinArc2 &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTwinArcPara
</UL>
<BR>[Called By]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc2
</UL>

<P><STRONG><a name="[8bf]"></a>_DrawTwinArc4</STRONG> (Thumb, 370 bytes, Stack size 112 bytes, gui__drawtwinarc.o(i._DrawTwinArc4))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = _DrawTwinArc4 &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTwinArcPara
</UL>
<BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
</UL>

<P><STRONG><a name="[8c1]"></a>_FillTrippleArc</STRONG> (Thumb, 572 bytes, Stack size 104 bytes, gui__drawtwinarc.o(i._FillTrippleArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = _FillTrippleArc &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTrippleArcPara
</UL>
<BR>[Called By]<UL><LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__FillTrippleArc
</UL>

<P><STRONG><a name="[98e]"></a>_GetTrippleArcPara</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, gui__drawtwinarc.o(i._GetTrippleArcPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _GetTrippleArcPara
</UL>
<BR>[Calls]<UL><LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillTrippleArc
</UL>

<P><STRONG><a name="[98b]"></a>_GetTwinArcPara</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gui__drawtwinarc.o(i._GetTwinArcPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _GetTwinArcPara
</UL>
<BR>[Calls]<UL><LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTwinArc4
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTwinArc2
</UL>

<P><STRONG><a name="[84d]"></a>_DrawGradient</STRONG> (Thumb, 382 bytes, Stack size 88 bytes, gui_drawgradient.o(i._DrawGradient))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
</UL>

<P><STRONG><a name="[84f]"></a>_DrawGradientRounded</STRONG> (Thumb, 260 bytes, Stack size 88 bytes, gui_drawgradientrounded.o(i._DrawGradientRounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
</UL>

<P><STRONG><a name="[7fb]"></a>Abs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_drawline.o(i.Abs))
<BR><BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
</UL>

<P><STRONG><a name="[802]"></a>_DrawLineEnd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_drawline.o(i._DrawLineEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DrawLineEnd &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[7fd]"></a>_SetLineColor</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, gui_drawline.o(i._SetLineColor))
<BR><BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
</UL>

<P><STRONG><a name="[7fe]"></a>_atan2</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, gui_drawline.o(i._atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[852]"></a>_DrawRoundedRect</STRONG> (Thumb, 286 bytes, Stack size 104 bytes, gui_drawroundedrect.o(i._DrawRoundedRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _DrawRoundedRect &rArr; LCD_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
</UL>

<P><STRONG><a name="[810]"></a>_ClearTextBackground</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, gui_encext.o(i._ClearTextBackground))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = _ClearTextBackground &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__ClearLine
</UL>

<P><STRONG><a name="[856]"></a>_CopyString</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gui_errorout.o(i._CopyString))
<BR><BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ErrorOut1
</UL>

<P><STRONG><a name="[86a]"></a>_GotoX</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_goto.o(i._GotoX))
<BR><BR>[Called By]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
</UL>

<P><STRONG><a name="[86b]"></a>_GotoY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_goto.o(i._GotoY))
<BR><BR>[Called By]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
</UL>

<P><STRONG><a name="[d7]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_task.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_task.o(i.GUITASK_Init)
</UL>
<P><STRONG><a name="[28f]"></a>_CalcSizeOfChar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._CalcSizeOfChar))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[290]"></a>_Encode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._Encode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[28d]"></a>_GetCharCode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._GetCharCode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[28e]"></a>_GetCharSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._GetCharSize))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_color.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_color.o(i.LCD_InitColors)
</UL>
<P><STRONG><a name="[97e]"></a>_DrawBitLine1BPP</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, lcd_rotatecw.o(i._DrawBitLine1BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawBitLine1BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[97d]"></a>_DrawBitmap</STRONG> (Thumb, 290 bytes, Stack size 80 bytes, lcd_rotatecw.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _DrawBitmap &rArr; _DrawBitLine1BPP
</UL>
<BR>[Calls]<UL><LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetPfSetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapCW
</UL>

<P><STRONG><a name="[22]"></a>_DrawBitmapCW</STRONG> (Thumb, 456 bytes, Stack size 112 bytes, lcd_rotatecw.o(i._DrawBitmapCW))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = _DrawBitmapCW &rArr; _TransformPoint &rArr; WM_GetWindowRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rotatecw.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>_Rect2TextRect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_rotatecw.o(i._Rect2TextRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Rect2TextRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rotatecw.o(.data)
</UL>
<P><STRONG><a name="[984]"></a>_TransformPoint</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lcd_rotatecw.o(i._TransformPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = _TransformPoint &rArr; WM_GetWindowRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformRect
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapCW
</UL>

<P><STRONG><a name="[24]"></a>_TransformRect</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lcd_rotatecw.o(i._TransformRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = _TransformRect &rArr; _TransformPoint &rArr; WM_GetWindowRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rotatecw.o(.data)
</UL>
<P><STRONG><a name="[96f]"></a>_Convert16</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, guidev_writetoactiveopaque.o(i._Convert16))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Convert16 &rArr; GUI__CompactPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>

<P><STRONG><a name="[971]"></a>_Convert8</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, guidev_writetoactiveopaque.o(i._Convert8))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Convert8 &rArr; GUI__CompactPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveOpaque_8
</UL>

<P><STRONG><a name="[895]"></a>_WriteToActiveOpaque_8</STRONG> (Thumb, 824 bytes, Stack size 168 bytes, guidev_writetoactiveopaque.o(i._WriteToActiveOpaque_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = _WriteToActiveOpaque_8 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfColor2IndexEx
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__DrawBitmap_1bpp
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Convert8
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Convert16
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[896]"></a>_WriteToActiveOpaque_HT</STRONG> (Thumb, 844 bytes, Stack size 96 bytes, guidev_writetoactiveopaque.o(i._WriteToActiveOpaque_HT))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = _WriteToActiveOpaque_HT &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[99b]"></a>_OnButtonPressed</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, button.o(i._OnButtonPressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = _OnButtonPressed &rArr; WM_NotifyParent &rArr; WM_SendToParent &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchDefault
</UL>

<P><STRONG><a name="[99c]"></a>_OnButtonReleased</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, button.o(i._OnButtonReleased))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = _OnButtonReleased &rArr; WM_NotifyParent &rArr; WM_SendToParent &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchDefault
</UL>

<P><STRONG><a name="[25]"></a>_OnTouchDefault</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, button.o(i._OnTouchDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = _OnTouchDefault &rArr; _OnButtonReleased &rArr; WM_NotifyParent &rArr; WM_SendToParent &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonPressed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.data)
</UL>
<P><STRONG><a name="[8e8]"></a>_IsTopLevelMenu</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, menu.o(i._IsTopLevelMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = _IsTopLevelMenu &rArr; MENU__SendMenuMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__SendMenuMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__HasEffect
</UL>

<P><STRONG><a name="[8f4]"></a>_AdjustRect</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, multipage.o(i._AdjustRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _AdjustRect
</UL>
<BR>[Calls]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYSizeOfFont
</UL>
<BR>[Called By]<UL><LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__CalcBorderRect
</UL>

<P><STRONG><a name="[8ee]"></a>_GetEnable</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, multipage.o(i._GetEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _GetEnable &rArr; GUI_ARRAY_GetpItemLocked &rArr; GUI_ARRAY__GetpItemLocked &rArr; GUI_ARRAY__GethItem
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
</UL>
<BR>[Called By]<UL><LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE_IsPageEnabled
</UL>

<P><STRONG><a name="[8f5]"></a>_GetItemWidth</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, multipage.o(i._GetItemWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = _GetItemWidth &rArr; MULTIPAGE__GetPagePos &rArr; MULTIPAGE__GetPageWidth &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPagePos
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
</UL>
<BR>[Called By]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetItemRect
</UL>

<P><STRONG><a name="[90f]"></a>_EffectRequiresRedraw</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, widget.o(i._EffectRequiresRedraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _EffectRequiresRedraw
</UL>
<BR>[Calls]<UL><LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Screen2Client
</UL>
<BR>[Called By]<UL><LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawUpRect
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDownRect
</UL>

<P><STRONG><a name="[961]"></a>WM__PaintWinAndOverlays</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, wm.o(i.WM__PaintWinAndOverlays))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WM__PaintWinAndOverlays &rArr; _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
</UL>

<P><STRONG><a name="[927]"></a>_DeleteAllChildren</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm.o(i._DeleteAllChildren))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = _DeleteAllChildren &rArr;  WM_DeleteWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[958]"></a>_DesktopHandle2Index</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm.o(i._DesktopHandle2Index))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbBackWin
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
</UL>

<P><STRONG><a name="[92b]"></a>_DrawNext</STRONG> (Thumb, 82 bytes, Stack size 136 bytes, wm.o(i._DrawNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = _DrawNext &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CopyToLCD &rArr; GUI_MEMDEV_CopyToLCDAt &rArr; GUI_MEMDEV__WriteToActiveOpaque &rArr; _WriteToActiveOpaque_8 &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[92a]"></a>_Exec1Input</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, wm.o(i._Exec1Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = _Exec1Input &rArr; WM_DeleteWindow &rArr; WM_NotifyParent &rArr; WM_SendToParent &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[95b]"></a>_FindNext_IVR</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, wm.o(i._FindNext_IVR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _FindNext_IVR &rArr; _Findy1 &rArr;  _Findy1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>
<BR>[Called By]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>

<P><STRONG><a name="[990]"></a>_Findx0</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, wm.o(i._Findx0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _Findx0 &rArr;  _Findx0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
</UL>
<BR>[Called By]<UL><LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
</UL>

<P><STRONG><a name="[991]"></a>_Findx1</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, wm.o(i._Findx1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _Findx1 &rArr;  _Findx1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
</UL>
<BR>[Called By]<UL><LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
</UL>

<P><STRONG><a name="[98f]"></a>_Findy1</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, wm.o(i._Findy1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _Findy1 &rArr;  _Findy1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
</UL>
<BR>[Called By]<UL><LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FindNext_IVR
</UL>

<P><STRONG><a name="[948]"></a>_Invalidate1Abs</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, wm.o(i._Invalidate1Abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Invalidate1Abs &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RectIsNZ
</UL>
<BR>[Called By]<UL><LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Invalidate1Abs
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>

<P><STRONG><a name="[ec]"></a>_OnExit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wm.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i.WM_Init)
</UL>
<P><STRONG><a name="[962]"></a>_Paint1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm.o(i._Paint1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Paint1
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[964]"></a>_Paint1Trans</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, wm.o(i._Paint1Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Paint1Trans &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[963]"></a>_PaintTransChildren</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, wm.o(i._PaintTransChildren))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
</UL>
<BR>[Called By]<UL><LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[957]"></a>_SetClipRectUserIntersect</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm.o(i._SetClipRectUserIntersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
</UL>
<BR>[Called By]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>

<P><STRONG><a name="[ed]"></a>_cbPaintMemDev</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wm.o(i._cbPaintMemDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _cbPaintMemDev &rArr; WM__PaintWinAndOverlays &rArr; _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i.WM__Paint)
</UL>
<P><STRONG><a name="[eb]"></a>cbBackWin</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, wm.o(i.cbBackWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = cbBackWin &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(i.WM_Init)
</UL>
<P><STRONG><a name="[931]"></a>_GetDialogItem</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, wm_getscrollbar.o(i._GetDialogItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>
<BR>[Called By]<UL><LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarV
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarH
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>

<P><STRONG><a name="[936]"></a>_GetDefaultWin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_getwindowsize.o(i._GetDefaultWin))
<BR><BR>[Calls]<UL><LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetActiveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
</UL>

<P><STRONG><a name="[de]"></a>_OnExit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gui__alpha.o(i._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__alpha.o(i.GUI__GetAlphaBuffer)
</UL>
<P><STRONG><a name="[8b9]"></a>_DispLine</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, gui_charline.o(i._DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _DispLine &rArr; GUI__ManageCache &rArr; GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
</UL>
<BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>

<P><STRONG><a name="[2b]"></a>_Log2VisBuffered</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_charline.o(i._Log2VisBuffered))
<BR>[Address Reference Count : 1]<UL><LI> gui_charline.o(.data)
</UL>
<P><STRONG><a name="[804]"></a>_Add</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, gui_fillpolygon.o(i._Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _Add
</UL>
<BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>

<P><STRONG><a name="[998]"></a>_IncPointer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_onkey.o(i._IncPointer))
<BR><BR>[Called By]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncReadPointer
</UL>

<P><STRONG><a name="[89d]"></a>_IncReadPointer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_onkey.o(i._IncReadPointer))
<BR><BR>[Calls]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
</UL>

<P><STRONG><a name="[291]"></a>_Color2Index_0</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, guicc_0.o(i._Color2Index_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Color2Index_0 &rArr; LCD_GetNumColors &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CalcColorDist
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.constdata)
</UL>
<P><STRONG><a name="[293]"></a>_GetIndexMask_0</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, guicc_0.o(i._GetIndexMask_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetIndexMask_0 &rArr; LCD_GetNumColors &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.constdata)
</UL>
<P><STRONG><a name="[292]"></a>_Index2Color_0</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, guicc_0.o(i._Index2Color_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _Index2Color_0 &rArr; LCD_GetNumColors &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.constdata)
</UL>
<P><STRONG><a name="[883]"></a>_Min</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_banding.o(i._Min))
<BR><BR>[Called By]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[88a]"></a>_CreateStaticDevice</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, guidev_staticdevices.o(i._CreateStaticDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = _CreateStaticDevice &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr; WM__UpdateChildPositions &rArr;  WM_ResizeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AlphaSuppressMixing
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[299]"></a>_Create</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, button_skinclassic.o(i._Create))
<BR>[Address Reference Count : 1]<UL><LI> button_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[298]"></a>_Paint</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, button_skinclassic.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; GUI_DispStringInRect &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[29b]"></a>_Create</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, checkbox_skinclassic.o(i._Create))
<BR>[Address Reference Count : 1]<UL><LI> checkbox_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>_GetButtonSize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, checkbox_skinclassic.o(i._GetButtonSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetButtonSize
</UL>
<BR>[Calls]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_GetDefaultEffect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> checkbox_skinclassic.o(.data)
</UL>
<P><STRONG><a name="[29a]"></a>_Paint</STRONG> (Thumb, 452 bytes, Stack size 64 bytes, checkbox_skinclassic.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; WIDGET__GetBkColor &rArr; WM_GetBkColor &rArr; WM_SendMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetBkColor
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDownRect
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontSizeY
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
</UL>
<BR>[Address Reference Count : 1]<UL><LI> checkbox_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[29d]"></a>_Create</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dropdown_skinclassic.o(i._Create))
<BR>[Address Reference Count : 1]<UL><LI> dropdown_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[29c]"></a>_Paint</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, dropdown_skinclassic.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; GUI_DispStringInRect &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectEx
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DROPDOWN__GetpItemLocked
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDown
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawUpRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dropdown_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[29f]"></a>_Create</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, framewin_skinclassic.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = _Create &rArr; FRAMEWIN_SetOwnerDraw &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN_SetOwnerDraw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewin_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>_GetBorderSize</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, framewin_skinclassic.o(i._GetBorderSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetBorderSize
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewin_skinclassic.o(.data)
</UL>
<P><STRONG><a name="[29e]"></a>_Paint</STRONG> (Thumb, 270 bytes, Stack size 112 bytes, framewin_skinclassic.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; FRAMEWIN__CalcPositions &rArr; FRAMEWIN__GetTitleLimits &rArr; WM_GetNextSibling &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAMEWIN__CalcPositions
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_EFFECT_3D_DrawUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> framewin_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[2a1]"></a>_Create</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, header_skinclassic.o(i._Create))
<BR>[Address Reference Count : 1]<UL><LI> header_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[989]"></a>_DrawTriangle</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, header_skinclassic.o(i._DrawTriangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = _DrawTriangle &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[2a0]"></a>_Paint</STRONG> (Thumb, 632 bytes, Stack size 112 bytes, header_skinclassic.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; GUI_DispStringInRect &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetYSize
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetXSize
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawUpRect
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTriangle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> header_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[2a3]"></a>_Create</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu_skinclassic.o(i._Create))
<BR>[Address Reference Count : 1]<UL><LI> menu_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[2a2]"></a>_Paint</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, menu_skinclassic.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; MENU__CalcMenuSizeY &rArr; MENU__GetItemHeight &rArr; MENU__GetEffectSize &rArr; MENU__HasEffect &rArr; _IsTopLevelMenu &rArr; MENU__SendMenuMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetItemWidth
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetItemHeight
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRect
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYDistOfFont
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__HasEffect
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetNumItems
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__GetEffectSize
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__CalcMenuSizeY
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MENU__CalcMenuSizeX
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPaintColors
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRectEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[9a1]"></a>_SetPaintColors</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, menu_skinclassic.o(i._SetPaintColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = _SetPaintColors &rArr; GUI_SetColor &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[2a5]"></a>_Create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, multipage_skinclassic.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Create
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multipage_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>_GetTouchedPage</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, multipage_skinclassic.o(i._GetTouchedPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = _GetTouchedPage &rArr; MULTIPAGE__GetItemRect &rArr; _GetItemWidth &rArr; MULTIPAGE__GetPagePos &rArr; MULTIPAGE__GetPageWidth &rArr; GUI_GetStringDistX &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetItemRect
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multipage_skinclassic.o(i._Create)
</UL>
<P><STRONG><a name="[2a4]"></a>_Paint</STRONG> (Thumb, 884 bytes, Stack size 144 bytes, multipage_skinclassic.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; GUI_DispStringInRectEx &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPageWidth
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetPagePos
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__GetItemRect
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MULTIPAGE__CalcBorderRect
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetYSize
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__GetXSize
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetNumItems
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multipage_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[2a7]"></a>_Create</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, progbar_skinclassic.o(i._Create))
<BR>[Address Reference Count : 1]<UL><LI> progbar_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[987]"></a>_DrawPart</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, progbar_skinclassic.o(i._DrawPart))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = _DrawPart &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[2a6]"></a>_Paint</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, progbar_skinclassic.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; _DrawPart &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR__Value2Pos
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR__GetTextRect
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROGBAR__GetTextLocked
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDownRect
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawPart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> progbar_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[2a9]"></a>_Create</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio_skinclassic.o(i._Create))
<BR>[Address Reference Count : 1]<UL><LI> radio_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>_GetButtonSize</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, radio_skinclassic.o(i._GetButtonSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetButtonSize
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio_skinclassic.o(.data)
</UL>
<P><STRONG><a name="[2a8]"></a>_Paint</STRONG> (Thumb, 464 bytes, Stack size 120 bytes, radio_skinclassic.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetClientRect
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ARRAY_GetpItemLocked
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFocusRect
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontInfo
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>_CalcPositions</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, scrollbar_skinclassic.o(i._CalcPositions))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = _CalcPositions &rArr; WM_GetScrollbarV &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarV
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetScrollbarH
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCROLLBAR__Rect2VRect
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DivideRound32
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetYSize
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetXSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skinclassic.o(i._Create)
</UL>
<P><STRONG><a name="[2ab]"></a>_Create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, scrollbar_skinclassic.o(i._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Create
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[2aa]"></a>_Paint</STRONG> (Thumb, 372 bytes, Stack size 88 bytes, scrollbar_skinclassic.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; WIDGET__DrawTriangle &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetClientRect
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawTriangle
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillRectEx
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawUpRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scrollbar_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[2ad]"></a>_Create</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, slider_skinclassic.o(i._Create))
<BR>[Address Reference Count : 1]<UL><LI> slider_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[2ac]"></a>_Paint</STRONG> (Thumb, 324 bytes, Stack size 88 bytes, slider_skinclassic.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; WIDGET__DrawVLine &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetClientRect
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillRectEx
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawUpRect
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDownRect
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawVLine
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__DrawFocusRect
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slider_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[2af]"></a>_Create</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spinbox_skinclassic.o(i._Create))
<BR>[Address Reference Count : 1]<UL><LI> spinbox_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[988]"></a>_DrawSpinEffect</STRONG> (Thumb, 172 bytes, Stack size 136 bytes, spinbox_skinclassic.o(i._DrawSpinEffect))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = _DrawSpinEffect &rArr; GUI_FillRectEx &rArr; GUI_FillRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectEx
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[98a]"></a>_DrawTriangle</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, spinbox_skinclassic.o(i._DrawTriangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = _DrawTriangle &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[2ae]"></a>_Paint</STRONG> (Thumb, 200 bytes, Stack size 176 bytes, spinbox_skinclassic.o(i._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = _Paint &rArr; _DrawSpinEffect &rArr; GUI_FillRectEx &rArr; GUI_FillRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__DrawBk
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPINBOX__GetButtonRect
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawTriangle
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawSpinEffect
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spinbox_skinclassic.o(.constdata)
</UL>
<P><STRONG><a name="[2b2]"></a>_DrawDown</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, widget_effect_3d.o(i._DrawDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = _DrawDown &rArr; _DrawDownRect &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_3d.o(.constdata)
</UL>
<P><STRONG><a name="[2b3]"></a>_DrawDownRect</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, widget_effect_3d.o(i._DrawDownRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = _DrawDownRect &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_3d.o(.constdata)
</UL>
<P><STRONG><a name="[2b1]"></a>_DrawUpRect</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, widget_effect_3d.o(i._DrawUpRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = _DrawUpRect &rArr; GUI_DrawRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_EFFECT_3D_DrawUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_3d.o(.constdata)
</UL>
<P><STRONG><a name="[2b6]"></a>_DrawDown</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, widget_effect_3d1l.o(i._DrawDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = _DrawDown &rArr; _DrawDownRect &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_3d1l.o(.constdata)
</UL>
<P><STRONG><a name="[2b7]"></a>_DrawDownRect</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, widget_effect_3d1l.o(i._DrawDownRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = _DrawDownRect &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_3d1l.o(.constdata)
</UL>
<P><STRONG><a name="[2b4]"></a>_DrawUp</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, widget_effect_3d1l.o(i._DrawUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = _DrawUp &rArr; _DrawUpRect &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_3d1l.o(.constdata)
</UL>
<P><STRONG><a name="[2b5]"></a>_DrawUpRect</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, widget_effect_3d1l.o(i._DrawUpRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = _DrawUpRect &rArr; GUI_DrawHLine &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_3d1l.o(.constdata)
</UL>
<P><STRONG><a name="[95f]"></a>_MoveDescendents</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, wm_move.o(i._MoveDescendents))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = _MoveDescendents &rArr;  _MoveDescendents (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>
<BR>[Called By]<UL><LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendents
</UL>

<P><STRONG><a name="[9a3]"></a>_Screen2hWin</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, wm_screen2win.o(i._Screen2hWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = _Screen2hWin &rArr;  _Screen2hWin (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsInWindow
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>
<BR>[Called By]<UL><LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWinStop
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>

<P><STRONG><a name="[94f]"></a>_Screen2hWinStop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_screen2win.o(i._Screen2hWinStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Screen2hWinStop &rArr; _Screen2hWin &rArr;  _Screen2hWin (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindowEx
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>
<BR>[Called By]<UL><LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
</UL>

<P><STRONG><a name="[94b]"></a>WM__ReleaseCapture</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, wm_setcapture.o(i.WM__ReleaseCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = WM__ReleaseCapture &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr;  WM_SendToParent (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
</UL>

<P><STRONG><a name="[9a7]"></a>_DecPointer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_pid.o(i._DecPointer))
<BR><BR>[Called By]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreState
</UL>

<P><STRONG><a name="[898]"></a>_IncPointer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_pid.o(i._IncPointer))
<BR><BR>[Called By]<UL><LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_GetState
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreState
</UL>

<P><STRONG><a name="[89a]"></a>_StoreState</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gui_pid.o(i._StoreState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _StoreState
</UL>
<BR>[Calls]<UL><LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncPointer
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_StoreState
</UL>

<P><STRONG><a name="[972]"></a>_CreateBuffer</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, gui_sprite.o(i._CreateBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = _CreateBuffer &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
</UL>
<BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPosition
</UL>

<P><STRONG><a name="[992]"></a>_FlushBuffer</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, gui_sprite.o(i._FlushBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _FlushBuffer &rArr; GUI__CompactPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSpriteBkPixel
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseBuffer
</UL>

<P><STRONG><a name="[994]"></a>_GetBkPixel</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gui_sprite.o(i._GetBkPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _GetBkPixel &rArr; GUI_GetBitmapPixelIndex &rArr; GUI_GetBitmapPixelIndexEx
</UL>
<BR>[Calls]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitmapPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPosition
</UL>

<P><STRONG><a name="[997]"></a>_GetDeviceRect</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gui_sprite.o(i._GetDeviceRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _GetDeviceRect &rArr; LCD_GetYSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
</UL>
<BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPosition
</UL>

<P><STRONG><a name="[9a2]"></a>_ReleaseBuffer</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_sprite.o(i._ReleaseBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = _ReleaseBuffer &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPosition
</UL>

<P><STRONG><a name="[8a2]"></a>_SetPosition</STRONG> (Thumb, 664 bytes, Stack size 208 bytes, gui_sprite.o(i._SetPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = _SetPosition &rArr; _CreateBuffer &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitmapPixelIndex
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSpriteBkPixel
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseBuffer
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDeviceRect
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBkPixel
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[9a6]"></a>_SetSpriteBkPixel</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gui_sprite.o(i._SetSpriteBkPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _SetSpriteBkPixel &rArr; _FlushBuffer &rArr; GUI__CompactPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPosition
</UL>

<P><STRONG><a name="[8a8]"></a>_RemoveFromLinList</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gui_timer.o(i._RemoveFromLinList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _RemoveFromLinList
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
</UL>

<P><STRONG><a name="[8a9]"></a>_Unlink</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gui_timer.o(i._Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Unlink
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
</UL>

<P><STRONG><a name="[2ba]"></a>_Color2IndexBulk</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, guicc_8888.o(i._Color2IndexBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_8888.o(.constdata)
</UL>
<P><STRONG><a name="[2b8]"></a>_Color2Index_8888</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guicc_8888.o(i._Color2Index_8888))
<BR>[Address Reference Count : 1]<UL><LI> guicc_8888.o(.constdata)
</UL>
<P><STRONG><a name="[2b9]"></a>_GetIndexMask_8888</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_8888.o(i._GetIndexMask_8888))
<BR>[Address Reference Count : 1]<UL><LI> guicc_8888.o(.constdata)
</UL>
<P><STRONG><a name="[2bb]"></a>_Index2ColorBulk</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, guicc_8888.o(i._Index2ColorBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_8888.o(.constdata)
</UL>
<P><STRONG><a name="[8a0]"></a>LCD_ReadRectEx</STRONG> (Thumb, 404 bytes, Stack size 64 bytes, lcd_readrect.o(i.LCD_ReadRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_ReadRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
</UL>
<BR>[Called By]<UL><LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRectEx
</UL>

<P><STRONG><a name="[981]"></a>_DrawBitLine1BPP</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, guidev_32.o(i._DrawBitLine1BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawBitLine1BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[982]"></a>_DrawBitLine2BPP</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, guidev_32.o(i._DrawBitLine2BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawBitLine2BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[976]"></a>_DrawBitLine32BPP_DDB</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, guidev_32.o(i._DrawBitLine32BPP_DDB))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _DrawBitLine32BPP_DDB &rArr; GUI__MixColors
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__MixColors
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[983]"></a>_DrawBitLine4BPP</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, guidev_32.o(i._DrawBitLine4BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DrawBitLine4BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[2bc]"></a>_DrawBitmap</STRONG> (Thumb, 666 bytes, Stack size 104 bytes, guidev_32.o(i._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _DrawBitmap &rArr; _DrawBitLine2BPP
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine4BPP
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine32BPP_DDB
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine2BPP
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine1BPP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[2bd]"></a>_DrawHLine</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, guidev_32.o(i._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _DrawHLine &rArr; _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[2be]"></a>_DrawVLine</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, guidev_32.o(i._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawVLine &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[2bf]"></a>_FillRect</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, guidev_32.o(i._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _FillRect &rArr; GUI_USAGE_AddRect
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[2c6]"></a>_GetDevData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_32.o(i._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[2c4]"></a>_GetDevFunc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_32.o(i._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[2c5]"></a>_GetDevProp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_32.o(i._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[2c0]"></a>_GetPixelIndex</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, guidev_32.o(i._GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetPixelIndex &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[2c7]"></a>_GetRect</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, guidev_32.o(i._GetRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetRect
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[2c3]"></a>_SetOrg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_32.o(i._SetOrg))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[2c1]"></a>_SetPixelIndex</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, guidev_32.o(i._SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _SetPixelIndex &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[980]"></a>_XY2PTR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guidev_32.o(i._XY2PTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[2c2]"></a>_XorPixel</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, guidev_32.o(i._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _XorPixel &rArr; _XY2PTR
</UL>
<BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.constdata)
</UL>
<P><STRONG><a name="[2c9]"></a>GUI_USAGE_BM_AddHLine</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_AddHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GUI_USAGE_BM_AddHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[2c8]"></a>GUI_USAGE_BM_AddPixel</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_AddPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_USAGE_BM_AddPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[2ca]"></a>GUI_USAGE_BM_Clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GUI_USAGE_BM_Clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[2cc]"></a>GUI_USAGE_BM_GetNextDirty</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, guidev_usagebm.o(i.GUI_USAGE_BM_GetNextDirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_USAGE_BM_GetNextDirty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[2cb]"></a>_GUI_USAGE_BM_Delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, guidev_usagebm.o(i._GUI_USAGE_BM_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = _GUI_USAGE_BM_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.constdata)
</UL>
<P><STRONG><a name="[7bb]"></a>_partition_sort</STRONG> (Thumb, 478 bytes, Stack size 296 bytes, qsortnoex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _partition_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>

<P><STRONG><a name="[9b2]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[9aa]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[d4]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
